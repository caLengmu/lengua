<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Multilingual Text Reader & Recorder</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f1f8fc;
      color: #444;
      margin: 0;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }

    .container {
      width: 80%;
      max-width: 600px;
      background: #ffffff;
      box-shadow: 0px 6px 12px rgba(0, 0, 0, 0.1);
      border-radius: 15px;
      padding: 20px;
      text-align: center;
    }

    h1 {
      color: #2a628f;
      margin-bottom: 10px;
    }

    .flags {
      margin-bottom: 20px;
    }

    .flags img {
      width: 40px;
      margin: 0 5px;
    }

    textarea, input {
      width: 100%;
      padding: 10px;
      font-size: 16px;
      border: 2px solid #c5dfee;
      border-radius: 10px;
      outline: none;
      margin: 10px 0;
    }

    textarea {
      height: 100px;
    }

    .controls {
      margin: 15px 0;
    }

    select, button {
      font-size: 16px;
      margin: 5px 10px;
      padding: 8px 15px;
      border: none;
      border-radius: 8px;
      background-color: #0f4c81;
      color: #fff;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    select:hover, button:hover {
      background-color: #083a63;
    }

    button:disabled {
      background-color: #c5dfee;
      cursor: not-allowed;
    }

    select {
      padding: 10px 15px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Multilingual Text Reader & Recorder</h1>
    <div class="flags">
      <img src="https://flagcdn.com/w320/jp.png" alt="Japan Flag">
      <img src="https://flagcdn.com/w320/kr.png" alt="Korea Flag">
      <img src="https://flagcdn.com/w320/es.png" alt="Spain Flag">
      <img src="https://flagcdn.com/w320/us.png" alt="USA Flag">
    </div>
    <textarea id="text-input" placeholder="Enter your passage here..."></textarea>
    <input id="recognized-text" placeholder="Recognized speech will appear here..." disabled>
    <div class="controls">
      <select id="language-select">
        <option value="ja-JP">日本語</option>
        <option value="ko-KR">한국어</option>
        <option value="es-ES">español</option>
        <option value="en-US">English</option>
      </select>
      <select id="speed-select">
        <option value="1">1x</option>
        <option value="0.85">0.85x</option>
        <option value="0.7">0.7x</option>
        <option value="1.2">1.2x</option>
        <option value="1.5">1.5x</option>
      </select>
    </div>
    <div class="controls">
      <button id="read-btn">Read Aloud</button>
      <button id="pause-btn" disabled>Pause</button>
      <button id="stop-btn" disabled>Stop</button>
      <button id="record-btn">Record</button>
      <button id="play-recording-btn" disabled>Play Recording</button>
    </div>
  </div>

  <script>
    const readBtn = document.getElementById('read-btn');
    const pauseBtn = document.getElementById('pause-btn');
    const stopBtn = document.getElementById('stop-btn');
    const recordBtn = document.getElementById('record-btn');
    const playRecordingBtn = document.getElementById('play-recording-btn');
    const textInput = document.getElementById('text-input');
    const recognizedText = document.getElementById('recognized-text');
    const languageSelect = document.getElementById('language-select');
    const speedSelect = document.getElementById('speed-select');

    let synth = window.speechSynthesis;
    let utterance;
    let isPaused = false;
    let recognition;
    let recordedAudio = null;

    // Text-to-Speech
    readBtn.addEventListener('click', () => {
      const text = textInput.value.trim();
      if (!text) return alert("Please enter some text!");

      if (isPaused && utterance) {
        synth.resume();
        isPaused = false;
      } else {
        utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = languageSelect.value;
        utterance.rate = parseFloat(speedSelect.value);

        readBtn.disabled = true;
        pauseBtn.disabled = false;
        stopBtn.disabled = false;

        utterance.onend = () => {
          readBtn.disabled = false;
          pauseBtn.disabled = true;
          stopBtn.disabled = true;
        };

        synth.speak(utterance);
      }
    });

    pauseBtn.addEventListener('click', () => {
      if (synth.speaking && !isPaused) {
        synth.pause();
        isPaused = true;
        pauseBtn.textContent = 'Resume';
      } else if (isPaused) {
        synth.resume();
        isPaused = false;
        pauseBtn.textContent = 'Pause';
      }
    });

    stopBtn.addEventListener('click', () => {
      if (synth.speaking) synth.cancel();
      readBtn.disabled = false;
      pauseBtn.disabled = true;
      stopBtn.disabled = true;
      isPaused = false;
      pauseBtn.textContent = 'Pause';
    });

    // Speech Recognition
    recordBtn.addEventListener('click', () => {
      if (!window.SpeechRecognition && !window.webkitSpeechRecognition) {
        alert("Speech recognition not supported in this browser.");
        return;
      }

      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition = new SpeechRecognition();
      recognition.lang = languageSelect.value;
      recognition.interimResults = false;

      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        recognizedText.value = transcript;
        recordedAudio = transcript;
        playRecordingBtn.disabled = false;
      };

      recognition.start();
    });

    // Play Recorded Audio
    playRecordingBtn.addEventListener('click', () => {
      if (recordedAudio) {
        const playbackUtterance = new SpeechSynthesisUtterance(recordedAudio);
        playbackUtterance.lang = languageSelect.value;
        synth.speak(playbackUtterance);
      }
    });
  </script>
</body>
</html>
