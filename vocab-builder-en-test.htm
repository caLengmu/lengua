<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vocab Builder</title>
    <style>
        :root {
            --primary: #D33E43;      /* Vibrant Red */
            --secondary: #F8B500;    /* Japanese Amber */
            --accent1: #5D9CEC;      /* Sky Blue */
            --accent2: #77B28C;      /* Matcha Green */
            --accent3: #A06CD5;      /* Purple */
            --dark: #2D2D2A;         /* Charcoal */
            --light: #F8F3E6;        /* Off-white */
            --mid: #888888;          /* Mid Gray */
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--light);
            color: var(--dark);
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.5;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
        }

      .controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px; /* Increased from 20px to 30px for better spacing */
    position: relative; /* Add this to ensure proper positioning context */
    z-index: 1; /* Add this to make sure controls stay above other elements */
}

        .left-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        button {
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        .text-import-btn {
            background-color: var(--secondary);
            color: black;
        }

     

        .start-btn {
            background-color: var(--primary);
            color: white;
            padding: 16px 25px;
            font-size: 25px;
        }

.ai-support-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        


      table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    background-color: white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    clear: both; /* Add this to ensure the table clears any floated elements */
    display: table; /* Explicitly set to table display */
}

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
        }

        tr:nth-child(even) {
            background-color: rgba(0, 0, 0, 0.03);
        }

        tr:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .speaker-icon {
            cursor: pointer;
            color: var(--secondary);
            margin-left: 8px;
            font-size: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--light);
            width: 90%;
            max-width: 500px;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
        }

        .modal h2 {
            margin-top: 0;
            color: var(--primary);
            font-size: 1.8rem;
        }

        .prompt {
            font-size: 24px;
            margin: 20px 0;
            color: var(--dark);
            font-weight: bold;
        }

        .answer-input {
            width: 100%;
            padding: 12px;
            font-size: 18px;
            margin-bottom: 15px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
        }

        .feedback {
            margin: 15px 0;
            font-size: 25px;
            font-weight: bold;
            min-height: 27px;
        }

        .correct {
            color: var(--accent2);
        }

        .incorrect {
            color: var(--primary);
        }

        .hint {
            color: var(--accent1);
            font-style: italic;
            font-size: 25px;
            margin: 10px 0;
            min-height: 24px;
        }

        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .submit-btn {
            background-color: var(--primary);
            color: white;
        }

        .speak-btn {
            background-color: var(--accent1);
            color: white;
        }

        .hint-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        .answer-btn {
            background-color: var(--accent3);
            color: white;
        }

        .next-btn {
            background-color: var(--accent2);
            color: white;
        }

        .close-btn {
            background-color: var(--mid);
            color: white;
        }

.copy-btn {
    background-color: var(--accent3);
    color: white;
}

        .recording {
            background-color: var(--primary);
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .hidden {
            display: none;
        }

        #file-input {
            display: none;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: var(--mid);
            font-style: italic;
        }

        .tts-speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .tts-speed-control select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid var(--mid);
            background-color: white;
            font-size: 14px;
        }

        .tts-speed-control label {
            font-weight: bold;
            color: white;
        }

        .reveal-answer {
            color: var(--primary);
            font-weight: bold;
            font-size: 30px;
            margin: 10px 0;
            min-height: 27px;
        }

.section-header {
    background-color: var(--dark);
    color: var(--light);
    font-weight: bold;
}

.section-header td {
background-color: var(--dark);
    color: var(--light);
    padding: 10px 15px;
}

       /* Text Import Modal Styles - Updated for Button Sets */
/* Updated textarea style to handle larger content */
#text-import-content {
    width: 100%;
    height: 200px; /* Increased height to accommodate more text */
    padding: 12px;
    margin: 15px 0;
    font-size: 14px; /* Slightly smaller font for more content */
    border: 2px solid var(--mid);
    border-radius: 6px;
    box-sizing: border-box;
    resize: vertical;
    white-space: pre-wrap; /* Preserves line breaks and spaces */
    font-family: monospace; /* Monospace font for better alignment */
    overflow-y: auto; /* Add scroll if content exceeds height */
}

/* Make the modal larger to accommodate the expanded content */
#text-import-modal .modal-content {
    max-width: 800px;
    max-height: 90vh; /* Limit maximum height */
    overflow-y: auto; /* Add scroll for very large content */
}

/* Button set styling adjustments */
.preset-buttons {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
}

.button-set {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    background-color: rgba(0, 0, 0, 0.02);
}
.button-set h3 {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 16px;
    color: var(--dark);
}

.preset-btn {
    margin: 5px;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 14px;
    border: none;
    cursor: pointer;
    font-weight: normal;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.textbook-btn {
    background-color: var(--accent1);
    color: white;
}

.live-btn {
    background-color: var(--accent2);
    color: white;
}

.core-btn {
    background-color: var(--accent3);
    color: white;
}

.other-btn {
    background-color: var(--secondary);
    color: var(--dark);
}

#text-import-content {
    width: 100%;
    height: 100px; /* Reduced height to take up 1/5 of the modal */
    padding: 12px;
    margin: 15px 0;
    font-size: 16px;
    border: 2px solid var(--mid);
    border-radius: 6px;
    box-sizing: border-box;
    resize: vertical;
}

@media (max-width: 600px) {
    .preset-buttons {
        grid-template-columns: 1fr;
    }
}

/* AI Support Modal Styles */
        #ai-support-modal .modal-content {
            max-width: 600px;
        }

        .ai-support-links {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }

        .ai-support-link {
            background-color: var(--accent1);
            color: white;
            text-decoration: none;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .ai-support-link:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        /* Responsive adjustments */
        @media (max-width: 600px) {
            .button-group {
                flex-direction: column;
            }
            
            button {
                width: 100%;
            }
            
            th, td {
                padding: 8px 10px;
            }
            
            .controls {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .left-controls {
                justify-content: space-between;
                width: 100%;
            }

.right-controls {
                justify-content: space-between;
                width: 100%;
            }


.date-info {
    position: absolute;
    top: 20px;
    right: 20px;
    text-align: right;
    font-size: 14px;
    line-height: 1.6;
    color: var(--dark);
    background-color: rgba(255, 255, 255, 0.9);
    padding: 10px 15px;
    border-radius: 8px;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column; /* Change to column for vertical display */
    gap: 5px;
    font-weight: bold;
    max-width: 90%; /* Prevent overflow on small screens */
    z-index: 10; /* Ensure it stays above other elements */
}

.date-info span {
    display: flex;
    align-items: center;
    white-space: nowrap; /* Prevent line breaks within each date item */
}

.date-info .emoji {
    margin-right: 8px;
    font-size: 16px;
}

.date-info .countdown {
    color: var(--primary);
    margin: 0 3px;
}

/* Add media queries for mobile responsiveness */
@media (max-width: 768px) {
    .date-info {
        position: static; /* Position in normal flow on mobile */
        margin: 0 auto 15px auto; /* Center it and add margin below */
        width: 100%;
        max-width: 100%;
        text-align: center;
        right: auto;
        top: auto;
    }
    
    .date-info span {
        justify-content: center; /* Center content on mobile */
    }
    
    header {
        display: flex;
        flex-direction: column;
    }
}


            .ai-support-links {
                grid-template-columns: 1fr;
            }
        }

.visitor-counter {
    margin-top: 40px;
    text-align: center;
    padding: 15px;
    color: var(--dark);
    font-size: 16px;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

#visitor-count {
    font-weight: bold;
}

<style>
/* Refresh Reminder Popup Styles */
.popup-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background-color: white;
  padding: 25px;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  width: 90%;
  max-width: 500px;
  text-align: center;
}

.popup-layout {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.pikachu-image {
  width: 150px;
  flex-shrink: 0;
}

.pikachu-image img {
  width: 100%;
  height: auto;
}

.speech-bubble {
  position: relative;
  background-color: #FFFDE7;
  border: 2px solid var(--secondary);
  border-radius: 15px;
  padding: 15px;
  margin-left: 15px;
}

.speech-bubble:before {
  content: "";
  position: absolute;
  left: -15px;
  top: 50%;
  transform: translateY(-50%);
  border-width: 15px 15px 15px 0;
  border-style: solid;
  border-color: transparent var(--secondary) transparent transparent;
}

.speech-bubble:after {
  content: "";
  position: absolute;
  left: -12px;
  top: 50%;
  transform: translateY(-50%);
  border-width: 12px 12px 12px 0;
  border-style: solid;
  border-color: transparent #FFFDE7 transparent transparent;
}

.english-text {
  font-size: 18px;
  font-weight: bold;
  color: var(--primary);
  margin-bottom: 8px;
}

.chinese-text {
  font-size: 16px;
  color: var(--dark);
}

.close-reminder-btn {
  background-color: var(--accent1);
  color: white;
  padding: 12px 24px;
  font-size: 18px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.close-reminder-btn:hover {
  background-color: var(--primary);
  transform: translateY(-2px);
  box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
}

/* Responsive adjustments */
@media (max-width: 600px) {
  .popup-layout {
    flex-direction: column;
  }
  
  .speech-bubble {
    margin-left: 0;
    margin-top: 15px;
  }
  
  .speech-bubble:before, .speech-bubble:after {
    left: 50%;
    top: -15px;
    transform: translateX(-50%) rotate(90deg);
  }
  
  .speech-bubble:after {
    top: -12px;
  }
}
</style>

    </style>
</head>
<body>
    <header>
<div id="date-info" class="date-info"></div>
        <h1>🎯 Vocabulary Builder (2.6)</h1>
    </header>

</div>

    <div class="controls">
    <div class="left-controls">
        


        <button class="text-import-btn" id="text-import-btn">📝 Import Text</button>
    </div>
    <button class="start-btn" id="start-btn" disabled>🚀 Start!</button>
    <button class="ai-support-btn" id="ai-support-btn">💡 AI Support</button>
</div>

    <table id="vocabulary-table">
        <thead>
            <tr>
                <th>
                    <div class="tts-speed-control">
                        <label for="tts-speed">Vocabulary</label>
                        <select id="tts-speed">
                            <option value="0.6">0.6x</option>
                            <option value="0.8">0.8x</option>
                            <option value="1">1x</option>                                                       
                        </select>
                    </div>
                </th>
                <th>Translation</th>
                <th>
                    <label>
                        <input type="checkbox" id="select-all"> Select All
                    </label>
                </th>
            </tr>
        </thead>
        <tbody id="vocabulary-body">
            <tr>
                <td colspan="3" class="no-data">Import your vocabulary list to get started</td>
            </tr>
        </tbody>
    </table>

    <!-- Text Import Modal -->
<div id="text-import-modal" class="modal">
    <div class="modal-content">
        <h2>Import Text</h2>
        
        <!-- Button Sets -->
        <div class="preset-buttons">
            <!-- Textbook Buttons -->
            <div class="button-set textbook-buttons">
                <h3>Textbook</h3>
                <button class="preset-btn textbook-btn" data-preset="b2l4">B2 L4</button>
                <button class="preset-btn textbook-btn" data-preset="b2l5">B2 L5</button>
                <button class="preset-btn textbook-btn" data-preset="b2l6">B2 L6</button>
            </div>
            
            <!-- Live Magazine Buttons -->
            <div class="button-set live-buttons">
                <h3>Live Magazine</h3>
                <button class="preset-btn live-btn" data-preset="liveU91">U9 #1</button>
<button class="preset-btn live-btn" data-preset="liveU92">U9 #2</button>
                <button class="preset-btn live-btn" data-preset="liveU111">U11 #1</button>
<button class="preset-btn live-btn" data-preset="liveU112">U11 #2</button>
                <button class="preset-btn live-btn" data-preset="liveU101">U10 #1</button>
<button class="preset-btn live-btn" data-preset="liveU102">U10 #2</button>
                <button class="preset-btn live-btn" data-preset="liveU14">U14</button>
            </div>
            
            <!-- 核心字彙 Buttons -->
            <div class="button-set core-buttons">
                <h3>核心字彙</h3>
                <button class="preset-btn core-btn" data-preset="coreU13">U13</button>
                <button class="preset-btn core-btn" data-preset="coreU14">U14</button>
                <button class="preset-btn core-btn" data-preset="coreU15">U15</button>
            </div>
            
            <!-- Other Button -->
            <div class="button-set other-buttons">
                <h3>Other</h3>
                <button class="preset-btn other-btn" data-preset="other1">B2 L4單字片語例句填空</button>
<button class="preset-btn other-btn" data-preset="other2">B2 L6單字片語例句填空</button>



            </div>
        </div>
        
        <!-- Text Import Field -->
        <textarea id="text-import-content" placeholder="Enter your vocabulary pairs here..."></textarea>
        
<!-- Action Buttons -->
<div class="button-group">
    <button id="text-import-submit-btn" class="submit-btn">Import</button>
    <button id="text-import-copy-btn" class="copy-btn">Copy</button>
    <button id="text-import-clear-btn" class="hint-btn">Clear</button>
    <button id="text-import-close-btn" class="close-btn">Close</button>
</div>        

    </div>
</div>

<!-- AI Support Modal -->
    <div id="ai-support-modal" class="modal">
        <div class="modal-content">
            <h2>💡 AI Support</h2>
            <div class="ai-support-links">
<a href="https://dictionary.cambridge.org/zht/%E8%A9%9E%E5%85%B8/%E8%8B%B1%E8%AA%9E-%E6%BC%A2%E8%AA%9E-%E7%B9%81%E9%AB%94/" class="ai-support-link" target="_blank">🔍 劍橋中英雙解字典</a>
                                              <a href="https://chatgpt.com/share/67fb4661-ab40-800a-91e1-84af81f0382b" class="ai-support-link" target="_blank">🌟 生成例句+中譯</a>
 <a href="https://chatgpt.com/share/67da57c1-afa4-800a-956f-41b344ca587c" class="ai-support-link" target="_blank">💬 互動問答</a>
                                <a href="https://tobespecified" class="ai-support-link" target="_blank">☕ (未完成)生成故事 / 短文</a>
<a href="https://chatgpt.com/share/67f896d4-e3a4-800a-9169-b0f385820e3e" class="ai-support-link" target="_blank">[Quiz] 填空題 ✏️</a>
<a href="https://chatgpt.com/share/67f7329b-e008-800a-9c06-df50ec1bb977" class="ai-support-link" target="_blank">[Quiz] 中譯英 (入門) 😃 </a>
<a href="https://chatgpt.com/share/67f619dd-d668-800a-af6e-696897e751e7" class="ai-support-link" target="_blank">[Quiz] 中譯英 (學測難度) 😖</a>
<a href="https://tobespecified" class="ai-support-link" target="_blank">(未完成)[Quiz] 閱讀測驗 ⏳</a>
            </div>
            <div class="button-group">
                <button id="ai-support-close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

    <!-- Quiz Modal -->
    <div id="quiz-modal" class="modal">
        <div class="modal-content">
            <div id="prompt" class="prompt">Say "<span id="translation-prompt"></span>" in English.</div>
            <input type="text" id="answer-input" class="answer-input" placeholder="Type your answer here...">
            <div id="feedback" class="feedback"></div>
            <div id="hint-text" class="hint"></div>
            <div id="reveal-answer" class="reveal-answer"></div>
            <div class="button-group">
                <button id="submit-btn" class="submit-btn">Submit</button>
                <button id="speak-btn" class="speak-btn">🎤 Speak</button>
                <button id="hint-btn" class="hint-btn">Hint</button>
                <button id="answer-btn" class="answer-btn">🔑 Answer</button>
                <button id="next-btn" class="next-btn">Next</button>
                <button id="close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

 
    <script>
        // DOM Elements
      
        const textImportBtn = document.getElementById('text-import-btn');
     
        const startBtn = document.getElementById('start-btn');
const aiSupportBtn = document.getElementById('ai-support-btn');
        const vocabularyTable = document.getElementById('vocabulary-table');
        const vocabularyBody = document.getElementById('vocabulary-body');
        const selectAllCheckbox = document.getElementById('select-all');
        const quizModal = document.getElementById('quiz-modal');
        const translationPrompt = document.getElementById('translation-prompt');
        const answerInput = document.getElementById('answer-input');
        const feedbackEl = document.getElementById('feedback');
        const hintTextEl = document.getElementById('hint-text');
        const revealAnswerEl = document.getElementById('reveal-answer');
        const submitBtn = document.getElementById('submit-btn');
        const speakBtn = document.getElementById('speak-btn');
        const hintBtn = document.getElementById('hint-btn');
        const answerBtn = document.getElementById('answer-btn');
        const nextBtn = document.getElementById('next-btn');
        const closeBtn = document.getElementById('close-btn');
        const ttsSpeedSelect = document.getElementById('tts-speed');
        
        // Text Import Modal Elements
        const textImportModal = document.getElementById('text-import-modal');
        const textImportContent = document.getElementById('text-import-content');
        const textImportSubmitBtn = document.getElementById('text-import-submit-btn');
        const textImportCloseBtn = document.getElementById('text-import-close-btn');
const textImportClearBtn = document.getElementById('text-import-clear-btn');

// AI Support Modal Elements
        const aiSupportModal = document.getElementById('ai-support-modal');
        const aiSupportCloseBtn = document.getElementById('ai-support-close-btn');

        // Variables
        let vocabularyData = [];
        let currentQuizWords = [];
        let currentWordIndex = -1;
        let currentWord = null;
        let recognition = null;
        let speechRate = 0.6;

        // Initialize Speech Recognition
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.continuous = false;
            recognition.interimResults = false;

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript.toLowerCase().trim();
                answerInput.value = transcript;
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onend = function() {
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error', event.error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };
        }

        // Text-to-Speech function
        function speak(text) {
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'en-US';
                utterance.rate = speechRate;
                speechSynthesis.speak(utterance);
            }
        }

        // TTS Speed change handler
        ttsSpeedSelect.addEventListener('change', (e) => {
            speechRate = parseFloat(e.target.value);
        });

// AI Support button click handler
        aiSupportBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'flex';
        });

        // AI Support Close button click handler
        aiSupportCloseBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'none';
        });

        // Text Import button click handler
        textImportBtn.addEventListener('click', () => {
            textImportModal.style.display = 'flex';
        });

        // Text Import Close button click handler
        textImportCloseBtn.addEventListener('click', () => {
            textImportModal.style.display = 'none';
        });

// Preset vocabulary data
const presetVocabulary = {

    b2l4: `
B2 L4 Malala

◎前半部(first half) 
male (adj, n)    =男性(的)
female (adj, n) =女性(的)
region (n) =地區
forbid (v) =禁止(v)
continue (v)     =繼續(v)
education (n)  =教育(n)
principal (n)    =校長
equal (adj)      =平等的
control (v)       =控制
annoy (v) =使生氣
threat (n) =威脅(n)
       ◎後半部(second half) 
surgery (n)      =手術
recover (v)       =恢復(v)
sign (v)    =簽署
persuade (v)    =說服(v)
adopt (v) =1.採用
adopt (v) =2.收養
policy (n) =政策
ensure (v)        =確保
establish (v)    =建立(v)
honor (n) =1.榮譽
honor (n) =2.榮幸
weapon (n)     =武器
◎詞類變化(different parts of speech)
regional (adj) = 區域的
continuous (adj) = 持續的
educate (v) = 教育(v)
educational (adj) = 教育的、有教育意義的
principal (adj) = 主要的(＝main)
equality (n) = 平等(n)
threaten (v) = 威脅、恐嚇(v)
recovery (n) = 恢復、康復(n)
persuasion (n) = 說服(n)
persuasive (adj) = 有說服力的
establishment (n) = 建立(n)
honor (v) = 尊敬、表揚(v)
honorable (adj) = 值得尊敬的
◎片語(phrases & idioms) 
take notice (of...)     =[片語]注意、留意(t… n…)
blow up   =[片語]爆炸、炸毀(b… u…)
take away        =[片語]拿走、移除(t… a…)
speak out =[片語]公開發聲(s… o…)
call for...  =[片語]呼籲、要求(c… f…)`,

    b2l5: `
to be updated

`,

    b2l6: `

B2 L6 Wonder
    
◎前半部(first half) 
awful (adj)	=糟糕的
stare (v)	=盯著看(v)
whisper (v)	=低聲說(v)
rude (adj)	 =無禮的
tease (v)	=嘲弄
purposely (adv)	=故意地
scary (adj)	=可怕的
overhear (v)	=無意中聽到
incident (n)	=(不好的)事件
cruel (adj)	=殘忍的
pretend (v)	=假裝(v)
genuine (adj)	=真誠的(adj)

◎後半部(second half) 
apologize (v)	=道歉(v)
gradually (adv)	=逐漸地
approach (v)	=接近(v)
absolute (adj)	=絕對的
defend (v)	 =防守、保衛(v)
bully (n)	=霸凌者
ceremony (n)	=典禮、儀式

◎詞類變化(different parts of speech)
stare (n)	=盯著看(n)
whisper (n)	=低語聲(n)
purpose (n)	=目的
scare (v)	=使害怕
cruelty (n)	 =殘忍(n)
genuinely (adv)	 =真誠地
apology (n)	=道歉(n)
gradual (adj)	=逐漸的(adj)
approach (n)	=接近(n)
absolutely (adv)	=完全地
defense (n)	=防禦；辯護(n)
bully (v)	=欺負、霸凌(v)

◎片語(phrases & idioms) 
fit in	 = [片語] 融入
around the corner	= [片語] 即將到來(a… the c…)
sick to one's stomach	= [片語] 感到反胃、難過or憤怒(s… t… o… s…)
make peace	= [片語] 和好
make fun of	= [片語] 嘲笑
at least	= [片語] 至少
apart from...	= [片語] 除了…之外(＝1. besides…  2. except…)
not... anymore	= [片語] 不再…
`,

    liveU91: `
Live U9  Hemophilia: The Royal Disease  Match 18th 
◎Paragraph 1

hemophilia	=血友病 
royal	=皇家的 
disease	=疾病 
no big deal	=沒什麼大不了的 
bleed/ bled/ bled	=流血 
minor 	=輕微的vs. major 
◎Paragraph 2

gene	=基因
genetic	=基因的 
condition	=1.狀況  2.疾病 
clot	=凝固 
hemophiliac	=血友病患者 
put sb at risk of...	=讓某人有…風險 
get injured	=受傷 
a bloody nose 	=流鼻血(＝nosebleed) 
go on=	持續 
lose / lost / lost 	=失去 
therefore	=因此(＝ thus) 
imagine	=想像 
dangerous	=危險的 
◎Paragraph 3

live a long life	=活得久 
as late as...	=直到…的時候仍然 
life expectancy	=平均壽命 
severe	=嚴重的(＝serious) 
treatment	=治療 
improve	=改善；進步 
dramatically	=戲劇性地；大幅地 
over recent decades	=在近幾十年來 
regularly	=定期地、規律地 
inject	=注射 
relatively (+ adj.)	=相對地… 
normal	=正常的 
That said	=話雖如此 
permanent	=永久的 
cure	=治癒；療法 

`,

liveU92: `

(p40) March 19th 
◎Paragraph 1

be transferred from A to B	=從 A 傳到 B 
be used to... =習慣於… 
used to do something	=過去常常… 
die out	=滅絕；消失 
interestingly	=有趣的是… 
carry the disease	=帶有這個疾病 
get symptoms	=出現症狀 
pass something on to someone	=傳遞某物給某人 
realize =	意識到；發現 
spread	=傳播；散播 
far and wide	=到處；遍佈 
◎Paragraph 2

royal	=(adj)皇家的、(n)皇室成員 
royal family	=王室 
common	=普遍的；常見的 
Europe	=歐洲 
carrier	=攜帶者、帶原者 
marry into (+ family)	=因結婚而進入某種家庭 
Russia	=俄羅斯 
Spain	=西班牙 
Germany	=德國 
spread	=傳播；擴散 
inherit	=遺傳；繼承 
suffer	=受苦；遭受 
effect	=影響；效果 
include=	包含 
czar	=俄國沙皇 
◎Paragraph 3

fate	=命運
tragic	=悲劇的
positive	=正向的(vs. negative)
outcome	=結果(＝result)
affect	=影響(= influence)
lead to…	=引起、導致(＝cause)
research	=研究
death sentence=	死刑
once	=曾經


`,

    liveU111: `
Live U11 Atlantis May 24

◎Paragraph 1
lasting (adj)	=持久的
appeal	=吸引力
film	=電影(＝movie)
mark (v)	=標誌、紀念
encounter	=遇到
be based on...	=[片語]以...為依據
in part	=[片語]部分地
century	=世紀
tale	=故事
◎Paragraph 2
follow-up	=後續
adventure	=冒險
portray	=描述、描繪
advanced	=先進的
ancient	=古老的
civilization	=文明
sink / sank / sunk	=下沉
beneath	=在…下面(＝under)
be forced to do something =被迫做某事
adapt to...	=適應…
watery	=1.含水的 2.(飲料等)味道淡的
structure	=結構；建築物
director	=導演
take credit for...	=[片語]因…而得功勞
impressive	=令人印象深刻的
far from...	=[片語]遠非...、完全不…
original	=原本的、獨創的
◎Paragraph 3
mention	=提到
philosopher	=哲學家
describe	=描述
island	=島嶼
nation	=國家
protect	=保護
confident	=有信心的
seek / sought / sought	=尋找(＝look for)
take over...	=接管
beat / beat / beaten	=打敗
war	=戰爭
destroy	=破壞
earthquake	=地震`,

liveU112: `
Live U11 Atlantis May 25

◎Paragraph 1
flood	=洪水、淹水
make up	=[片語]編造(故事等)
moral	=道德的
account 	=記述、描述(n)
genuine	=真正的、真誠的
historical	=有關歷史的
event	=事件
according to...	=根據…
be located in a place	=位於某地(＝lie in a place)
beyond	=超出範圍之外
strait	=海峽
despite	=儘管(＝in spite of)
researcher	=研究人員
point to...	=指向…
put forward	=[片語]提出(想法等)
location	=地點
claim	=聲稱
lie in a place	=位於某地(＝be located in a place)
remain	=仍然是、維持
hide / hid / hidden	=躲藏、隱藏
◎Paragraph 2
realistic	=務實的
suffer	=受苦、遭受
natural disaster	=天然災害
over the course of	=[片語]在…期間
with sth in mind	=[片語]考慮到…
specifically	=特意地、具體地
area	=區域
frequent	=頻繁的
active volcano	=活火山
◎Paragraph 3
technology	=科技
advance	=前進、進步
perhaps	=也許(＝maybe)
remind sb of...	=讓某人想起…
mysterious	=神祕的
inspire	=啟發；激勵
explore	=探索；探險
`,


    liveU101: `

Live U10  Cijin Island: A Perfect Little Getaway   

March 20th 
◎Paragraph 1

getaway (n)	=1.逃離2.短期假期
pace (n)	=步調
fast-paced (adj)	=步調快的
urban (adj)	=都市的
environment (n)	=環境
coast (n)	=海岸
head to (a place)	=前往(某處)
ideal (adj)	=理想的
escape (v)	=逃離；逃脫

◎Paragraph 2
tunnel (n)	=隧道
ferry (n)	=渡輪
handy (adj)	=方便好用的
scenic (adj)	=風景優美的
option (n)	=選項
depart (v)	=出發；離開
pier (n)	=碼頭
get to (a place)	=抵達(某處)
fully (adv)	=完全地
explore (v)	=探索
rent (v)	=租用
scooter (n)	=1.機車2.滑板車

◎Paragraph 3

once (連接詞) =	一旦…就…
line (v)	=排列；排隊
offer (v)	=提供
various (adj)	=各式各樣的
stand (n)	=攤位
take something in	=觀看；參觀
sandy (adj)	=多沙的
temple (n)	=寺廟
admire (v)	=欣賞；敬佩
bright-red (adj)	=亮紅的
lantern (n)	=燈籠
`,

 liveU102: `

March 21st  
◎Paragraph 1

while	=儘管(＝although)
spot (n)	=地點
chill out	=放鬆
sunset (n)	=日落
a must	=必去之地；必做之事
ice-cold (adj)	=冰冷的
view (n)	=景色
laid-back (adj)	=悠閒的
atmosphere (n)	=氣氛
draw (v)	=吸引(＝attract)
tourist (n)=	遊客
locals (n)	=當地人(複數)
A and B alike	=A 和 B 都…(＝both A and B)
breeze (n)	=微風
background (n)	=背景


◎Paragraph 2

...is not my thing = 我對...不感興趣
occupied (adj)	=1.被佔領的	2.被佔用的	3.忙碌的(＝busy)
fort (n)	=要塞；堡壘
complete (v)	=完成
definitely (adv)	=絕對地
be worth something	=值得某事
be worth doing something	=值得做某事
steep (adj)	=陡的
originally (adv)	=原本；起初
keep an eye on...	=留意…
harbor (n)	=港口
protect someone from...	=保護某人免於…
attack (n)	=攻擊
serve a ... purpose	=有…的用途
provide (v)	=提供
panorama (n)	=全景


◎Paragraph 3

social media	=社群媒體
content (n)	=內容
arch (n)	=拱門
installation (n)	=1.安裝2.裝置藝術
shallow (adj)	=淺的
a sense of...	=一種…的感覺
evolve from A to B	=從A演變成B


`,

    liveU14: `
Live U14 Bracelet 

◎Paragraph 1
era (n) = 時代
tour (n) = 1.旅行 2.巡迴演出
constantly (adv) = 持續地
break the record = 打破紀錄
record-breaking (adj) = 破紀錄的
sales (n) = 銷售量
tale (n) = 故事
wherever = 無論哪裡
craft (n) = 工藝、手工藝
roof (n) = 屋頂
go through the roof = [片語] 激增、暴增 (g… t… the r…)
exchange (v) = 交換
friendship (n) = 友誼
bracelet (n) = 手鍊
◎Paragraph 2
root (n) = 根源、起源
have one’s roots in... = [片語] 根源於... (h… one’s r… i…)
indigenous (adj) = 本地的、原住民的
weave (v) = 編織
similar (adj) = 相似的
particularly (adv) = 特別地
hippy/hippie (n) = 嬉皮
take up = [片語] 開始採用/從事...(t… u…)
◎Paragraph 3
include (v) = 包含
bright (adj) = 明亮的、鮮豔的
bead (n) = 珠子
feature (v) = 以…為特色
slogan (n) = 口號、標語
over time = [片語] 隨著時間過去 (o… t…)
(dream/wish) come true = (夢想/願望)成真、實現
◎Paragraph 4
wonderful (adj) = 極好的 (w…)
affordable (adj) = 付得起的
wonderfully affordable = 價格非常實惠的 (w…ly a…)
personal (adj) = 個人的
celebrate (v) = 慶祝
currently (adv) = 目前、當前
trend (n) = 趨勢、潮流
gather (v) = (使)聚集
material (n) = 材料
creative (adj) = 有創意的
trade (v) = 1.交換 2.交易
design (n) = 設計
bestie (n) = 最好的朋友
`,

    coreU13: `
核心單U13

cartoon (n) = 1.(報紙上的)漫畫  2.卡通
character (n) = 角色
comic (book) = 漫畫書
strip (n) = 條狀物(如：布條、紙條等)
comic strip (n) = (報紙上的)四格連環漫畫
spark (v) = 激起、引發
intense (adj) = 強烈的、激烈的
argument (n) = 爭論
illustration (n) = 插圖
before long (adv) = 不久、馬上(＝soon)
revise (n) = 修改
lock = (n)鎖 (v)鎖起來
voice = (n)聲音  (v)用言語表達
opinion (n) = 意見、看法
proof (n) = 證據
comment (n) = 評論
imply (v) = 暗示、暗指
interpret (v) = 解釋、詮釋
secondary (adj) = 次要的(vs. primary ＝主要的)`,

    coreU14: `
核心單U14

amazing (adj) = 1.驚人的(＝very surprising) 2.very good
crop (n) = 農作物
influence (n, v) = 影響
mankind (n) = 人類(＝all humans; the human race)
significant (adj) = 1.重要的(＝important)  2.顯著的(＝noticeable)
significantly (adv) = 顯著地
corn (n) = 玉米
wheat (n) = 小麥
climate (n) = 氣候(vs. weather天氣)
sauce (n) = 醬汁
means (n) = 方法；手段
namely (adv) = 也就是說、更確切地說
prove (v) = 證明(v)
value (n) = 價值
protein (n) = 蛋白質
basis (n) = 基礎
increase (v) = 增加(v)
increasingly (+ adj) = 越來越…(-ly + adj.)
diet (n) = 1.飲食 2.節食
go on a diet = 控制飲食、節食
importance (n) = 重要性
delicious (adj) = 美味的`,

    coreU15: `
核心單U15

risk (n) = 風險
disappear (v) = 消失(vs. appear＝出現)
completely (adv) = 完全地
creature (n) = (會移動的or想像中的)生物，如：各種動物、龍、人魚等(P.S.不包括植物！)
stubborn (adj) = 固執的
favor  (v) = 偏愛
favor (n) = 幫忙、恩惠
bother (v) = 1.打擾  2.使擔心、使煩惱
refuse (v) = 拒絕
mate (v) = 交配
mate (n) = 1.(動物的)配偶  2.同伴(classmate, teammate, roommate)
put off (v) = 1.延後  2.使反感、使打消念頭
sensitive (adj) = 敏感的
contain (v) = 包含
information (n) = 資訊
communicate (v) = 溝通
activity (n) = 活動
disturb (v) = 打斷、干擾
locate (v) = 找出…的位置(＝find out)
affect (v) = 影響(＝influence)
behavior (n) = 行為`,

    other1: `
課本L4單字片語填空


female = Amelia Earhart was the first f_____ pilot to fly solo across the Atlantic Ocean.愛蜜莉亞．艾爾哈特是第一位單獨飛越大西洋的女性飛行員。
region = The northern r_____(s) of the country are usually windy and snowy in winter.這個國家的北部地區在冬天通常多風又下雪。
forbidding = By f_____(ding) factories to dump their waste in the sea, the government was able to clean up the coast.藉由禁止工廠將廢棄物倒入海洋，政府才能清理海岸。
continued = After a short break for lunch, Wally c_____(ed) his work.簡短休息吃午餐後，Wally繼續他的工作。
principal = Mrs. Lee has been the school’s p_____ for ten years, and she always sees students’ needs as her primary concern.李女士擔任本校校長已經十年了，而且她總是把學生的需求當作第一考量。
equal = When it comes to medical care, everyone should enjoy e_____ rights and be treated the same.當談到醫療照護，每個人應該享有同樣的權利並且被同等對待。
control = It is important to c_____ your weight. Being too thin or too fat is bad for your health.控制你的體重很重要。太瘦或太胖對你的健康不好。
annoys = It really a_____(s) Mrs. Donald when her children don’t wash their hands before dinner.孩子們晚餐前不洗手真的令Donald太太很生氣。
threatened = The robber t_____(ed) the bank staff with a gun and made them hand over the money.這搶匪持槍威脅銀行行員並且要他們將錢交出來。
surgery = When Joel had a heart operation, it was a very young doctor who performed the s_____.當Joel動心臟手術時，執行這個外科手術的是一位很年輕的醫師。
recovered = Stacy r_____(ed) from the flu and went back to work last week.
Stacy從流感中康復並在上週回到工作崗位。
signed = David s_____(ed) his name at the bottom of the letter.David在信件底部簽名。
persuade = Mr. Kennedy was worried about his daughter’s health and tried to p_____ her to do more exercise.Kennedy先生擔心他女兒的健康，並且設法說服她多做運動。
adopted = Oliver was a_____(ed) by his aunt when both of his parents died in a plane crash.當Oliver的雙親於空難中罹難時，他被他的阿姨收養。
adopted, policy = The amount of waste has been greatly reduced since our government a_____(ed) stricter p_____(s) on recycling.自從我們的政府採取更嚴格的回收政策以來，垃圾量已經大幅減少。
ensure, education = A new law will be made to e_____ that every child will get proper care and e_____.一條新的法律將被制定來確保每位孩童得到適當的照顧與教育。
established = Harvard University was e_____(ed) in 1636 and is the oldest university in the US.哈佛大學成立於1636年，而且是美國最老的大學。
honors = Ang Lee has received many h_____(s) and awards for his inspiring movies.李安因其激勵人心的電影而贏得許多榮譽及獎項。
weapons = When the police caught the murderer, they searched him to see if he was carrying a gun or any other deadly w_____(s).當警察逮捕這位謀殺犯時，他們對他搜身看他是否持有槍枝或其他致命的武器。
took notice = We were too busy working, so no one t_____(過去式) n_____ when Alex left last night.我們太忙於工作，所以昨晚Alex離開時沒人注意到。
blew up = Enemy forces b_____(過去式) u_____ the bridge with a bomb so that our army could not advance.敵軍部隊用炸彈炸毀這座橋樑好讓我們的軍隊無法前進。
took away = Robert’s parents were worried that online games would distract him from his studies, so they t_____(過去式) a_____ his smartphone.Robert的父母擔心線上遊戲會使他無法專注於課業，所以將他的智慧型手機拿走。
spoken out = Many concerned citizens have s_____(pp) o_____ against the building of nuclear power plants.許多憂心的公民公開發表反對興建核電廠。
called for = The workers c_____(ed) f_____ the company to raise their salaries by going on a five-day strike.這些工人們藉由進行五天的罷工來呼籲公司加薪。


`,
other2: `
課本L6單字片語填空

awful = Though the hikers met with bad weather during their climb, they overcame the a_____ conditions with their positive attitude. (雖然這些健行者在攀登過程中遇到壞天氣，他們用正向的態度克服糟透的狀況。)
stare = When Mrs. Green saw her son sitting with his feet up on the table, she gave him a long and cold s_____. (當Green太太看到兒子坐著把腳翹到桌上，她久久冷冷地瞪著他。)
whisper = Iris had a cold and lost her voice, so she could only talk in a w_____. (Iris感冒失聲，所以她只能用氣音說話。)
rude = After waiting in line for twenty minutes, the customer became r_____ to the cashier about her being so slow. (在排隊二十分鐘之後，這位顧客因為收銀員如此慢而變得對她無禮。)
tease = Friends often t_____ Clint about his red hair, yet he never takes them seriously. (朋友們常嘲弄Clint的紅髮，但他從不把他們當一回事。)
purposely = Emily didn’t feel like talking to the passenger next to her and p_____ closed her eyes to make him think she was asleep. (Emily不想和旁邊的乘客交談，故意閉上雙眼，讓他以為她睡著了。)
scary = Being stuck in the elevator during such a terrible earthquake was really s_____. My legs are still shaking! (在這麼可怕的地震中被困在電梯裡實在嚇人。我的雙腿仍在發抖！)
overheard = Even though the door was closed, Liz still o_____(過去式) her parents arguing with each other. (雖然門關著，Liz還是無意中聽到父母在吵架。)
incident = The recent shooting i_____ in the US has raised public awareness of the need for gun control. (美國最近的那件槍擊事件提升了民眾對槍枝需要管制的意識。)
cruel = Olivia is really scared of spiders, so it was c_____ to put that rubber toy spider on her desk on purpose. (Olivia實在很怕蜘蛛，所以故意把那個橡膠玩具蜘蛛放在她書桌上是很殘忍的。)
pretended = Pam wasn’t sure how to answer her boyfriend’s question, so she p_____(ed) that she hadn’t heard him. (Pam不知道要怎麼回答男友的問題，所以她假裝沒有聽見。)
genuinely = If you g_____ tell your dad that you’re sorry, I believe he will forgive you for breaking his vase. (如果你誠心向你爸爸道歉，我相信他會原諒你打破他的花瓶。)
apologized = Rob quickly a_____(ed) to Grace for stepping on her toe. (Rob為踩到Grace的腳趾很快向她道歉。)
gradually = Public speaking used to scare Sharon. With practice, however, she has g_____ overcome her fear. (公開演講曾讓Sharon懼怕。然而靠著練習，她已逐漸克服恐懼。)
approaching = As the typhoon was fast a_____(ing), people rushed to the supermarket to buy fresh vegetables. (隨著颱風快速逼近，民眾趕往超市購買新鮮蔬菜。)
absolutely = My grandmother is really good at baking. The cakes she bakes are a_____ delicious. (我的奶奶十分擅長烘焙，她烤的蛋糕非常好吃。)
defend = Vincent grabbed a bat to d_____ himself when the robbers broke into his house and began searching for his money. (當搶匪闖入他家開始搜刮財物時，Vincent抓了一支球棒來保護自己。)
bully = Chuck used to be a school b_____, but now he realizes it’s wrong to hurt or threaten others. (Chuck曾是學校的惡霸，但他現在明白傷害或威脅他人是不對的。)
ceremony = The opening c_____ at the Olympics ended with a beautiful fireworks display. (奧林匹克運動會的開幕典禮以美麗的煙火表演作為結尾。)
fit in = Kevin wanted to be popular, but he knew it would take time to f_____ i_____ at his new school. (Kevin想要變得受歡迎，但他明白要融入新學校需要時間。)
around corner = Christmas is just a_____ the c_____, so Ed has started to decorate his house with beautiful lights. (耶誕節即將來臨，所以Ed已開始用美麗的燈裝飾他的房子。)
sick to stomach = Rachel felt s_____ t_____ her s_____ when she saw that the fire had destroyed all her paintings. (當Rachel眼見大火燒毀她所有的畫作時，她難過至極。)
made peace = Hearing Julia accept Van’s apology, Anna was happy that the two had finally m_____(pp) p_____. (得知Julia接受Van的道歉，Anna很高興這兩位終於和好了。)
make fun of = The school bullies often m_____ f_____ o_____ Brad because of the birthmark on his face. It really hurts his feelings. (學校中的惡霸常常因Brad臉上的胎記嘲笑他，實在很傷他的心。)
at least = The swimmer didn’t break the record in the competition, but a_____ l_____ he won the gold medal. (這位游泳選手比賽時並未打破紀錄，但至少他贏得了金牌。)
Apart from = A_____ f_____ English and French, Thomas also speaks a little Japanese. (除了英語和法語之外，Thomas也會說一點日語。)
anymore = Many people don’t collect CDs a_____ because buying music online is easier and more convenient now. (許多人不再收集CD，因為現在購買線上音樂更容易且更方便。)

`

};







// Add event listeners to all preset buttons
document.querySelectorAll('.preset-btn').forEach(button => {
    button.addEventListener('click', () => {
        const presetKey = button.dataset.preset;
        if (presetVocabulary[presetKey]) {
            textImportContent.value = presetVocabulary[presetKey];
        }
    });
});

        // Text Import Submit button click handler
        textImportSubmitBtn.addEventListener('click', () => {
            const text = textImportContent.value.trim();
            if (!text) {
                alert('Please enter vocabulary pairs before importing.');
                return;
            }
            
            processTextImport(text);
            textImportModal.style.display = 'none';
        });

// Text Import Clear button click handler
textImportClearBtn.addEventListener('click', () => {
    textImportContent.value = '';
});

        
function processTextImport(text) {
    vocabularyData = [];
    const lines = text.split('\n');
    
    let currentSection = "Default";
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;
        
        // Check if this is a section header
        if (line.includes('◎') || line.includes('=...') || line.startsWith('#')) {
            currentSection = line.replace('◎', '').replace('=...', '').replace('#', '').trim();
            continue;
        }
        
        const parts = line.split('=');
        if (parts.length < 2) continue;
        
        const vocabulary = parts[0].trim();
        const translation = parts[1].trim();
        
        if (vocabulary && translation) {
            vocabularyData.push({
                vocabulary: vocabulary,
                translation: translation,
                selected: true,
                section: currentSection
            });
        }
    }
    
    renderVocabularyTable();
    if (vocabularyData.length > 0) {
        startBtn.disabled = false;
    }
}

      
// Copy button click handler
const textImportCopyBtn = document.getElementById('text-import-copy-btn');

textImportCopyBtn.addEventListener('click', () => {
    const textToCopy = textImportContent.value;
    if (!textToCopy) {
        alert('No text to copy.');
        return;
    }
    
    // Copy text to clipboard
    navigator.clipboard.writeText(textToCopy)
        .then(() => {
            // Provide visual feedback
            const originalText = textImportCopyBtn.textContent;
            textImportCopyBtn.textContent = 'Copied!';
            
            // Revert button text after a short delay
            setTimeout(() => {
                textImportCopyBtn.textContent = originalText;
            }, 1500);
        })
        .catch(err => {
            console.error('Failed to copy text: ', err);
            alert('Failed to copy text. Please try again.');
        });
});
       

        function renderVocabularyTable() {
    if (vocabularyData.length === 0) {
        vocabularyBody.innerHTML = '<tr><td colspan="3" class="no-data">Import your vocabulary list to get started</td></tr>';
        return;
    }
    
    vocabularyBody.innerHTML = '';
    
    // Group items by section
    const sectionMap = {};
    vocabularyData.forEach(item => {
        if (!sectionMap[item.section]) {
            sectionMap[item.section] = [];
        }
        sectionMap[item.section].push(item);
    });
    
    // Render each section
    Object.keys(sectionMap).forEach(sectionName => {
        const sectionItems = sectionMap[sectionName];
        
        // Add section header row
        const sectionRow = document.createElement('tr');
        sectionRow.className = 'section-header';
        
        const sectionCell = document.createElement('td');
        sectionCell.colSpan = 2;
        sectionCell.textContent = sectionName;
        sectionCell.style.fontWeight = 'bold';
        sectionCell.style.backgroundColor = 'var(--dark)';
        sectionCell.style.color = 'var(--light)';
        sectionCell.style.padding = '10px 15px';
        
        const sectionCheckCell = document.createElement('td');
        const sectionCheckbox = document.createElement('input');
        sectionCheckbox.type = 'checkbox';
        sectionCheckbox.checked = sectionItems.every(item => item.selected);
        sectionCheckbox.dataset.section = sectionName;
        sectionCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            const section = e.target.dataset.section;
            
            // Update all items in this section
            vocabularyData.forEach((item, index) => {
                if (item.section === section) {
                    item.selected = isChecked;
                    // Also update the displayed checkboxes
                    const checkbox = document.querySelector(`input[data-index="${index}"]`);
                    if (checkbox) checkbox.checked = isChecked;
                }
            });
            
            updateSelectAllCheckbox();
        });
        
        sectionCheckCell.appendChild(sectionCheckbox);
        sectionRow.appendChild(sectionCell);
        sectionRow.appendChild(sectionCheckCell);
        vocabularyBody.appendChild(sectionRow);
        
        // Add vocabulary items for this section
        sectionItems.forEach((item, localIndex) => {
            const index = vocabularyData.findIndex(vItem => 
                vItem.vocabulary === item.vocabulary && 
                vItem.translation === item.translation);
            
            const row = document.createElement('tr');
            
            // Vocabulary column with speaker
            const wordCell = document.createElement('td');
            const cleanWord = item.vocabulary.replace(/\(.*\)/g, '').trim();
            
            wordCell.innerHTML = `
                ${item.vocabulary}
                <span class="speaker-icon" title="Listen" data-word="${cleanWord}">🔊</span>
            `;
            
            // Translation column
            const translationCell = document.createElement('td');
            translationCell.textContent = item.translation;
            
            // Checkbox column
            const checkboxCell = document.createElement('td');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = item.selected;
            checkbox.dataset.index = index;
            checkbox.dataset.section = item.section;
            checkbox.addEventListener('change', (e) => {
                vocabularyData[index].selected = e.target.checked;
                updateSectionCheckbox(item.section);
                updateSelectAllCheckbox();
            });
            checkboxCell.appendChild(checkbox);
            
            row.appendChild(wordCell);
            row.appendChild(translationCell);
            row.appendChild(checkboxCell);
            vocabularyBody.appendChild(row);
        });
    });
    
    // Add event listeners to speaker icons
    document.querySelectorAll('.speaker-icon').forEach(icon => {
        icon.addEventListener('click', (e) => {
            const word = e.target.dataset.word;
            speak(word);
        });
    });
    
    updateSelectAllCheckbox();
}


function updateSectionCheckbox(sectionName) {
    const sectionItems = vocabularyData.filter(item => item.section === sectionName);
    const allSelected = sectionItems.every(item => item.selected);
    const noneSelected = sectionItems.every(item => !item.selected);
    
    const sectionCheckbox = document.querySelector(`input[data-section="${sectionName}"]`);
    if (sectionCheckbox) {
        sectionCheckbox.checked = allSelected;
        sectionCheckbox.indeterminate = !allSelected && !noneSelected;
    }
}








        // modify the Update "Select All" checkbox state
        
function updateSelectAllCheckbox() {
    if (vocabularyData.length === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
        return;
    }
    
    const selectedCount = vocabularyData.filter(item => item.selected).length;
    
    if (selectedCount === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
    } else if (selectedCount === vocabularyData.length) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
    } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
    }
}

//Update the global "Select All" checkbox handler
       selectAllCheckbox.addEventListener('change', (e) => {
    const isChecked = e.target.checked;
    
    vocabularyData.forEach(item => {
        item.selected = isChecked;
    });
    
    document.querySelectorAll('#vocabulary-body input[type="checkbox"]').forEach(checkbox => {
        checkbox.checked = isChecked;
        if (checkbox.dataset.section) {
            checkbox.indeterminate = false;
        }
    });
});

        // Start Quiz button handler
        startBtn.addEventListener('click', () => {
            currentQuizWords = vocabularyData.filter(item => item.selected);
            
            if (currentQuizWords.length === 0) {
                alert('Please select at least one vocabulary word to start the quiz.');
                return;
            }
            
            startQuiz();
        });

        // Start the quiz
        function startQuiz() {
            resetQuiz();
            quizModal.style.display = 'flex';
            nextQuestion();
        }

        // Reset quiz state
        function resetQuiz() {
            currentWordIndex = -1;
            currentWord = null;
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
        }

        // Load the next question
        function nextQuestion() {
            // Reset UI elements
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
            
            // Randomly select next word
            const previousIndex = currentWordIndex;
            
            // If only one word, just use it
            if (currentQuizWords.length === 1) {
                currentWordIndex = 0;
            } else {
                // Make sure we don't get the same word twice in a row
                do {
                    currentWordIndex = Math.floor(Math.random() * currentQuizWords.length);
                } while (currentWordIndex === previousIndex && currentQuizWords.length > 1);
            }
            
            currentWord = currentQuizWords[currentWordIndex];
            translationPrompt.textContent = currentWord.translation;
        }

        // Submit answer
        function submitAnswer() {
    if (!currentWord) return;
    
    const userAnswer = answerInput.value.trim().toLowerCase();
    // Split the vocabulary by slash and clean each option
    const correctAnswers = currentWord.vocabulary
        .split('/')
        .map(ans => ans.replace(/\(.*?\)/g, '').trim().toLowerCase());
    
    // Normalize user answer (remove punctuation)
    const normalizedUserAnswer = userAnswer.replace(/[.,?'’…\/#!$%\^&\*;:{}=\-_`~()]/g, "");
    
    // Check if user's answer matches any of the correct options
    const isCorrect = correctAnswers.some(answer => {
        const normalizedAnswer = answer.replace(/[.,?'’…\/#!$%\^&\*;:{}=\-_`~()]/g, "");
        return normalizedUserAnswer === normalizedAnswer;
    });
    
    if (isCorrect) {
        feedbackEl.textContent = 'Well done! 🏆😊👍';
        feedbackEl.className = 'feedback correct';
        speak('Well done!');
    } else {
        feedbackEl.textContent = 'Try again! 🔥🔥🔥';
        feedbackEl.className = 'feedback incorrect';
        speak('Try again!');
    }
}

        // Show hint
        function showHint() {
            if (!currentWord) return;
            
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            const firstLetter = correctAnswer.charAt(0).toUpperCase();
            
            hintTextEl.textContent = `The answer starts with the letter ${firstLetter}.`;
        }

        // Show answer
        function showAnswer() {
            if (!currentWord) return;
            
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            revealAnswerEl.textContent = `${correctAnswer}`;
            speak(correctAnswer);
        }

        // Event Listeners for Quiz Modal
        submitBtn.addEventListener('click', submitAnswer);
        
        answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                submitAnswer();
            }
        });
        
        speakBtn.addEventListener('click', () => {
            if (!recognition) {
                alert('Speech recognition is not supported in your browser.');
                return;
            }
            
            try {
                if (speakBtn.textContent === '🎤 Speak') {
                    recognition.start();
                    speakBtn.textContent = 'Recording';
                    speakBtn.classList.add('recording');
                } else {
                    recognition.stop();
                    speakBtn.textContent = '🎤 Speak';
                    speakBtn.classList.remove('recording');
                }
            } catch (error) {
                console.error('Speech recognition error:', error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            }
        });
        
        hintBtn.addEventListener('click', showHint);
        
        answerBtn.addEventListener('click', showAnswer);
        
        nextBtn.addEventListener('click', nextQuestion);
        
        closeBtn.addEventListener('click', () => {
            quizModal.style.display = 'none';
            if (recognition) {
                recognition.stop();
            }
        });


// Date information display
function updateDateInfo() {
    const dateInfoEl = document.getElementById('date-info');
    
    // Get current date in Taiwan timezone
    const options = { 
        timeZone: 'Asia/Taipei',
        weekday: 'long', 
        month: 'long', 
        day: 'numeric', 
        year: 'numeric'
    };
    const today = new Date();
    const taiwanDate = today.toLocaleDateString('en-US', options);
    
    // Calculate days until 段考 (May 12, 2025)
    const examDate = new Date('May 12, 2025');
    examDate.setHours(0, 0, 0, 0);
    const todayNoTime = new Date(today);
    todayNoTime.setHours(0, 0, 0, 0);
    const daysUntilExam = Math.ceil((examDate - todayNoTime) / (1000 * 60 * 60 * 24));
    
    // Calculate days until 116學測 (January 16, 2027)
    const collegeExamDate = new Date('January 16, 2027');
    collegeExamDate.setHours(0, 0, 0, 0);
    const daysUntilCollegeExam = Math.ceil((collegeExamDate - todayNoTime) / (1000 * 60 * 60 * 24));
    
    // Update the HTML - each item on separate line
    dateInfoEl.innerHTML = `
        <span><span class="emoji">📅</span>${taiwanDate}</span><br>
        <span><span class="emoji">⏰</span><span class="countdown">${daysUntilExam}</span> days until 段考</span>
        <span><span class="emoji">📚</span><span class="countdown">${daysUntilCollegeExam}</span> days until 116學測</span>
    `;
}


// Update date information when page loads
updateDateInfo();

// Update date information every minute
setInterval(updateDateInfo, 60000);

    </script>

<footer class="visitor-counter">
    <div id="visitor-count">👥 Loading visitor count...</div>
</footer>

<div id="refresh-reminder-popup" class="popup-container">
  <div class="popup-content">
    <div class="popup-layout">
      <div class="pikachu-image">
        <img src="https://i.imgur.com/u5aT8h1.png" alt="Pikachu" width="150">
      </div>
      <div class="speech-bubble">
        <p class="english-text">Please click the refresh button 🔄 for the latest update!</p>
        <p class="chinese-text">請點擊重新整理按鈕 🔄 以獲取最新更新！</p>
      </div>
    </div>
    <button id="close-reminder-btn" class="close-reminder-btn">Okay. I'll do it.</button>
  </div>
</div>

<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>

<!-- Add this to the end of your existing <script> section -->
<script>
    // Firebase visitor counter
    function initVisitorCounter() {
        // Your Firebase configuration - REPLACE WITH YOUR ACTUAL VALUES
        const firebaseConfig = {
            apiKey: "AIzaSyBFhmaAZmBtsM5DKoxgy1G-RouRKsrjYsA",
            authDomain: "vocab-builder-visitor-counter.firebaseapp.co",
            databaseURL: "https://vocab-builder-visitor-counter-default-rtdb.asia-southeast1.firebasedatabase.app/",
            projectId: "vocab-builder-visitor-counter",
            storageBucket: "vocab-builder-visitor-counter.firebasestorage.app",
            messagingSenderId: "648587683861",
            appId: "1:648587683861:web:dcb777160dabb4cbf8c61c"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        // Get today's date in YYYY-MM-DD format in Taiwan timezone
        const today = new Date();
        const taiwanDate = new Date(today.toLocaleString('en-US', { timeZone: 'Asia/Taipei' }));
        const dateStr = taiwanDate.getFullYear() + '-' + 
                       (taiwanDate.getMonth() + 1).toString().padStart(2, '0') + '-' + 
                       taiwanDate.getDate().toString().padStart(2, '0');

        // Reference to today's visitor count
        const visitorCountRef = database.ref('visitorCount/' + dateStr);

        // Function to update visitor display
        function updateVisitorDisplay(count) {
            const visitorCountEl = document.getElementById('visitor-count');
            if (count === 1) {
                visitorCountEl.innerHTML = `👋  ${count} person has visited this website today.`;
            } else {
                visitorCountEl.innerHTML = `👋  ${count} people have visited this website today.`;
            }
        }

        // Check if this browser has already been counted today
        const hasVisitedToday = localStorage.getItem('visited_' + dateStr);
        
        if (!hasVisitedToday) {
            // Increment the count using a transaction
            visitorCountRef.transaction((currentCount) => {
                return (currentCount || 0) + 1;
            }, (error, committed, snapshot) => {
                if (error) {
                    console.error('Transaction failed:', error);
                } else if (committed) {
                    // Mark this browser as counted for today
                    localStorage.setItem('visited_' + dateStr, 'true');
                    updateVisitorDisplay(snapshot.val());
                }
            });
        } else {
            // Just get the current count without incrementing
            visitorCountRef.once('value', (snapshot) => {
                const count = snapshot.val() || 0;
                updateVisitorDisplay(count);
            });
        }

        // Listen for count changes
        visitorCountRef.on('value', (snapshot) => {
            const count = snapshot.val() || 0;
            updateVisitorDisplay(count);
        });
    }

    // Call the function to initialize the visitor counter
    try {
        initVisitorCounter();
    } catch (e) {
        console.error("Error initializing visitor counter:", e);
        document.getElementById('visitor-count').innerHTML = "😅 Visitor count unavailable";
    }

<script>
// Refresh Reminder Popup functionality
document.addEventListener('DOMContentLoaded', () => {
  // Show the popup when the page loads
  const refreshReminderPopup = document.getElementById('refresh-reminder-popup');
  
  
    // Show popup after a slight delay for better user experience
    setTimeout(() => {
      refreshReminderPopup.style.display = 'flex';
    }, 1000);
  } else {
    refreshReminderPopup.style.display = 'none';
  }
  
  // Add event listener to close button
  const closeReminderBtn = document.getElementById('close-reminder-btn');
  closeReminderBtn.addEventListener('click', () => {
    refreshReminderPopup.style.display = 'none';
    
  
  });
});
</script>

</script>


</body>
</html>
