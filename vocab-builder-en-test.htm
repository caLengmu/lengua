<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vocab Builder</title>
    <style>
        :root {
            --primary: #D33E43;
            --secondary: #F8B500;
            --accent1: #5D9CEC;
            --accent2: #77B28C;
            --accent3: #A06CD5;
            --dark: #2D2D2A;
            --light: #F8F3E6;
            --mid: #888888;
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--light);
            color: var(--dark);
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.5;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
        }

        .tts-system-selector {
            margin-top: 15px;
            font-size: 16px;
            color: var(--dark);
        }

        .tts-system-selector label {
            font-weight: bold;
            margin-right: 8px;
        }

        .tts-system-selector select {
            padding: 8px 12px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            background-color: white;
            color: var(--dark);
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: border-color 0.2s ease;
        }

        .tts-system-selector select:hover {
            border-color: var(--accent1);
        }

        .tts-system-selector select:focus {
            outline: none;
            border-color: var(--primary);
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            position: relative;
            z-index: 1;
        }

        .left-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        button {
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        .text-import-btn {
            background-color: var(--secondary);
            color: black;
        }

        .english-to-chinese-btn {
            background-color: var(--accent3);
            color: white;
            padding: 16px 25px;
            font-size: 20px;
        }

        .listen-choose-btn {
            background-color: var(--accent2);
            color: white;
            padding: 16px 25px;
            font-size: 20px;
        }

        .start-btn {
            background-color: var(--primary);
            color: white;
            padding: 16px 25px;
            font-size: 20px;
        }

        .ai-support-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        .quiz-mode-selector {
            background-color: white;
            border: 2px solid var(--mid);
            border-radius: 10px;
            padding: 3px;
            margin: 3px 0;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
        }

        .mode-options {
            display: flex;
            justify-content: space-around;
            gap: 20px;
        }

        .mode-option {
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 10px 15px;
            border: 2px solid transparent;
            border-radius: 8px;
            transition: all 0.3s ease;
            flex: 1;
            text-align: center;
        }

        .mode-option:hover {
            background-color: rgba(93, 156, 236, 0.1);
            border-color: var(--accent1);
        }

        .mode-option input[type="radio"] {
            margin: 0 8px 0 0;
            transform: scale(1.2);
        }

        .mode-option .option-text {
            font-weight: bold;
            font-size: 16px;
            color: var(--dark);
        }

        .mode-option input[type="radio"]:checked + .option-text {
            color: var(--primary);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            clear: both;
            display: table;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
        }

        tr:nth-child(even) {
            background-color: rgba(0, 0, 0, 0.03);
        }

        tr:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .speaker-icon {
            cursor: pointer;
            color: var(--secondary);
            margin-left: 8px;
            font-size: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--light);
            width: 90%;
            max-width: 500px;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
        }

        .modal h2 {
            margin-top: 0;
            color: var(--primary);
            font-size: 1.8rem;
        }

        .prompt {
            font-size: 24px;
            margin: 20px 0;
            color: var(--dark);
            font-weight: bold;
        }

        .answer-input {
            width: 100%;
            padding: 12px;
            font-size: 18px;
            margin-bottom: 15px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
        }

        .feedback {
            margin: 15px 0;
            font-size: 25px;
            font-weight: bold;
            min-height: 27px;
        }

        .correct {
            color: var(--accent2);
        }

        .incorrect {
            color: var(--primary);
        }

        .hint {
            color: var(--accent1);
            font-style: italic;
            font-size: 25px;
            margin: 10px 0;
            min-height: 24px;
        }

        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .submit-btn {
            background-color: var(--primary);
            color: white;
        }

        .speak-btn {
            background-color: var(--accent1);
            color: white;
        }

        .hint-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        .answer-btn {
            background-color: var(--accent3);
            color: white;
        }

        .next-btn {
            background-color: var(--accent2);
            color: white;
        }

        .close-btn {
            background-color: var(--mid);
            color: white;
        }

        .copy-btn {
            background-color: var(--accent3);
            color: white;
        }

        .recording {
            background-color: var(--primary);
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .hidden {
            display: none;
        }

        #file-input {
            display: none;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: var(--mid);
                    }

        .tts-speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .tts-speed-control select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid var(--mid);
            background-color: white;
            font-size: 14px;
        }

        .tts-speed-control label {
            font-weight: bold;
            color: white;
        }

        .reveal-answer {
            color: var(--primary);
            font-weight: bold;
            font-size: 30px;
            margin: 10px 0;
            min-height: 27px;
        }

        .section-header {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
            position: relative;
        }

        .section-header td {
            background-color: var(--dark);
            color: var(--light);
            padding: 10px 15px;
        }

        .collapse-btn {
            background: none;
            border: none;
            color: var(--light);
            font-size: 18px;
            cursor: pointer;
            padding: 0 8px 0 0;
            margin: 0;
            transition: transform 0.2s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 30px;
            box-shadow: none;
        }

        .collapse-btn:hover {
            transform: scale(1.1);
            box-shadow: none;
        }

        .section-collapsed .collapse-btn {
            transform: rotate(-90deg);
        }

        .section-row {
            display: table-row;
            transition: all 0.3s ease;
        }

        .section-row.section-collapsed {
            display: none;
        }

        .section-header .section-title {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .progress-info {
            background-color: var(--accent1);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 15px;
            display: inline-block;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .progress-section {
            opacity: 0.8;
            font-size: 14px;
        }

        #text-import-content {
            width: 100%;
            height: 100px;
            padding: 12px;
            margin: 15px 0;
            font-size: 16px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
            resize: vertical;
        }

        #text-import-modal .modal-content {
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .preset-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .button-set {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            background-color: rgba(0, 0, 0, 0.02);
        }

        .button-set h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
            color: var(--dark);
        }

        .preset-btn {
            margin: 5px;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 14px;
            border: none;
            cursor: pointer;
            font-weight: normal;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .textbook-btn {
            background-color: var(--accent1);
            color: white;
        }

        .live-btn {
            background-color: var(--accent2);
            color: white;
        }

        .core-btn {
            background-color: var(--accent3);
            color: white;
        }

        .other-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        #ai-support-modal .modal-content {
            max-width: 600px;
        }

        .ai-support-links {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }

        .ai-support-link {
            background-color: var(--accent1);
            color: white;
            text-decoration: none;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .ai-support-link:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        #listen-choose-modal .modal-content {
            max-width: 100%;
            width: 95%;
            max-height: 95vh;
            padding: 15px;
        }

        .listen-answer-section {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            gap: 15px;
        }

        .listen-answer-display {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary);
            min-height: 30px;
            padding: 10px 15px;
            border: 2px solid var(--mid);
            border-radius: 8px;
            background-color: white;
            flex-grow: 1;
            text-align: center;
        }

        .listen-speaker {
            cursor: pointer;
            color: var(--secondary);
            font-size: 28px;
            padding: 8px;
            border-radius: 50%;
            background-color: rgba(248, 181, 0, 0.1);
            transition: all 0.2s ease;
        }

        .listen-speaker:hover {
            background-color: rgba(248, 181, 0, 0.2);
            transform: scale(1.1);
        }

        .timer-feedback-section {
            margin-bottom: 25px;
            min-height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .timer-feedback {
            font-size: 20px;
            font-weight: bold;
            text-align: center;
        }

        .choices-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-bottom: 25px;
            max-width: 100%;
        }

        .choice-button {
            padding: 15px 10px;
            border: 2px solid var(--mid);
            border-radius: 8px;
            background-color: white;
            color: var(--dark);
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            line-height: 1.3;
        }

        .choice-button:hover {
            background-color: var(--accent1);
            color: white;
            border-color: var(--accent1);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .choice-button.correct {
            background-color: var(--accent2);
            color: white;
            border-color: var(--accent2);
        }

        .choice-button.incorrect {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .choice-button:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

        .listen-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .listen-next-btn {
            background-color: var(--accent2);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        .listen-close-btn {
            background-color: var(--mid);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        .date-info {
            position: absolute;
            top: 20px;
            right: 20px;
            text-align: right;
            font-size: 14px;
            line-height: 1.6;
            color: var(--dark);
            background-color: rgba(255, 255, 255, 0.9);
            padding: 10px 15px;
            border-radius: 8px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            gap: 5px;
            font-weight: bold;
            max-width: 90%;
            z-index: 10;
        }

        .date-info span {
            display: flex;
            align-items: center;
            white-space: nowrap;
        }

        .date-info .emoji {
            margin-right: 8px;
            font-size: 16px;
        }

        .date-info .countdown {
            color: var(--primary);
            margin: 0 3px;
        }

        .visitor-counter {
            margin-top: 40px;
            text-align: center;
            padding: 15px;
            color: var(--dark);
            font-size: 16px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        #visitor-count {
            font-weight: bold;
        }

        .popup-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-content {
            background-color: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 500px;
            text-align: center;
        }

        .popup-layout {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .pikachu-image {
            width: 150px;
            flex-shrink: 0;
        }

        .pikachu-image img {
            width: 100%;
            height: auto;
        }

        .speech-bubble {
            position: relative;
            background-color: #FFFDE7;
            border: 2px solid var(--secondary);
            border-radius: 15px;
            padding: 15px;
            margin-left: 15px;
        }

        .speech-bubble:before {
            content: "";
            position: absolute;
            left: -15px;
            top: 50%;
            transform: translateY(-50%);
            border-width: 15px 15px 15px 0;
            border-style: solid;
            border-color: transparent var(--secondary) transparent transparent;
        }

        .speech-bubble:after {
            content: "";
            position: absolute;
            left: -12px;
            top: 50%;
            transform: translateY(-50%);
            border-width: 12px 12px 12px 0;
            border-style: solid;
            border-color: transparent #FFFDE7 transparent transparent;
        }

        .english-text {
            font-size: 18px;
            font-weight: bold;
            color: var(--primary);
            margin-bottom: 8px;
        }

        .chinese-text {
            font-size: 16px;
            color: var(--dark);
        }

        .close-reminder-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .close-reminder-btn:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        @media (max-width: 768px) {
            .date-info {
                position: static;
                margin: 0 auto 15px auto;
                width: 100%;
                max-width: 100%;
                text-align: center;
                right: auto;
                top: auto;
            }

            .date-info span {
                justify-content: center;
            }

            header {
                display: flex;
                flex-direction: column;
            }
        }

        @media (max-width: 600px) {
            .button-group {
                flex-direction: column;
            }

            button {
                width: 100%;
            }

            th, td {
                padding: 8px 10px;
            }

            .controls {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }

            .left-controls {
                justify-content: space-between;
                width: 100%;
            }

            .right-controls {
                justify-content: space-between;
                width: 100%;
            }

            .choices-grid {
                gap: 10px;
            }

            .choice-button {
                padding: 12px 8px;
                font-size: 14px;
                min-height: 50px;
            }

            .listen-answer-display {
                font-size: 20px;
            }

            .listen-speaker {
                font-size: 24px;
            }

            .timer-feedback {
                font-size: 18px;
            }

            .mode-option {
                padding: 10px;
            }

            .preset-buttons {
                grid-template-columns: 1fr;
            }

            .ai-support-links {
                grid-template-columns: 1fr;
            }

            #listen-choose-modal .modal-content {
                width: 98%;
                padding: 10px;
            }

            .popup-layout {
                flex-direction: column;
            }

            .speech-bubble {
                margin-left: 0;
                margin-top: 15px;
            }

            .speech-bubble:before, .speech-bubble:after {
                left: 50%;
                top: -15px;
                transform: translateX(-50%) rotate(90deg);
            }

            .speech-bubble:after {
                top: -12px;
            }
        }
    </style>
</head>

<body>
    <header>
        <div id="date-info" class="date-info"></div>
        <h1>🎯 Vocabulary Builder (3.9)</h1>
        <div class="tts-system-selector">
            <label for="tts-system">System: </label>
            <select id="tts-system">
                <option value="android" selected>Android</option>
                <option value="ios">iOS</option>
            </select>
        </div>
    </header>

    <div class="controls">
        <div class="left-controls">
            <button class="text-import-btn" id="text-import-btn">📝 Load Vocab</button>
        </div>
        <button class="english-to-chinese-btn" id="english-to-chinese-btn" disabled>👀 看英想中</button>
        <button class="listen-choose-btn" id="listen-choose-btn" disabled>🎧 聽英選中</button>
        <button class="start-btn" id="start-btn" disabled>🎤 看中唸英</button>
        <button class="ai-support-btn" id="ai-support-btn">💡 AI Support</button>
    </div>

    <div class="quiz-mode-selector">
        <div class="mode-options">
            <label class="mode-option">
                <input type="radio" name="quiz-mode" value="sequential" checked>
                <span class="option-text">➡️ Sequential (按順序)</span>
            </label>
            <label class="mode-option">
                <input type="radio" name="quiz-mode" value="random">
                <span class="option-text">🔀 Random (隨機)</span>
            </label>
        </div>
    </div>

    <table id="vocabulary-table">
        <thead>
            <tr>
                <th>
                    <div class="tts-speed-control">
                        <label for="tts-speed">Vocabulary</label>
                        <select id="tts-speed">
                            <option value="0.6">0.6x</option>
                            <option value="0.8" selected>0.8x</option>
                            <option value="1">1x</option>
                        </select>
                    </div>
                </th>
                <th>Translation</th>
                <th>
                    <label>
                        <input type="checkbox" id="select-all"> Select All
                    </label>
                </th>
            </tr>
        </thead>
        <tbody id="vocabulary-body">
            <tr>
                <td colspan="3" class="no-data">Load the vocabulary to get started (載入字彙以開始學習)</td>
            </tr>
        </tbody>
    </table>

    <!-- Text Import Modal -->
    <div id="text-import-modal" class="modal">
        <div class="modal-content">
            <h2>Load Vocabulary</h2>
            <div class="preset-buttons">
                <div class="button-set textbook-buttons">
                    <h3>Textbook</h3>
                    <button class="preset-btn textbook-btn" data-preset="b3l1">B3 L1 (自読)</button>
                    <button class="preset-btn textbook-btn" data-preset="b3l2">B3 L2</button>
                    <button class="preset-btn textbook-btn" data-preset="b3l3">B3 L3</button>
                </div>
                <div class="button-set live-buttons">
                    <h3>Magazine</h3>
                    <button class="preset-btn live-btn" data-preset="maga1">U9</button>
                    <button class="preset-btn live-btn" data-preset="maga2">U11</button>
                    <button class="preset-btn live-btn" data-preset="maga3">U4 (自読)</button>
                    <button class="preset-btn live-btn" data-preset="maga4">U13 (自読)</button>
                </div>
                <div class="button-set core-buttons">
                    <h3>核心字彙</h3>
                    <button class="preset-btn core-btn" data-preset="coreP2U1">P2 U1</button>
                    <button class="preset-btn core-btn" data-preset="coreP2U2">P2 U2</button>
                    <button class="preset-btn core-btn" data-preset="coreP2U3">P2 U3</button>
                </div>
                <div class="button-set other-buttons">
                    <h3>Other</h3>
                    <button class="preset-btn other-btn" data-preset="other1">other 1</button>
                    <button class="preset-btn other-btn" data-preset="other2">other 2</button>
                </div>
            </div>
            <textarea id="text-import-content" placeholder="Enter your vocabulary pairs here..."></textarea>
            <div class="button-group">
                <button id="text-import-submit-btn" class="submit-btn">📂 Load</button>
                <button id="text-import-copy-btn" class="copy-btn">📋 Copy</button>
                <button id="text-import-clear-btn" class="hint-btn">🈳 Clear</button>
                <button id="text-import-close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

    <!-- AI Support Modal -->
    <div id="ai-support-modal" class="modal">
        <div class="modal-content">
            <h2>💡 AI Support</h2>
            <div class="ai-support-links">
                <a href="https://chatgpt.com/share/68db5397-e390-800a-88d2-e323314c7e5c" class="ai-support-link" target="_blank">🀄 生成中譯</a>
                <a href="https://chatgpt.com/share/68d63d05-8f18-800a-a2b7-e1e8a6168bc6" class="ai-support-link" target="_blank">🌟 生成例句+中譯</a>
                <a href="https://chatgpt.com/share/67da57c1-afa4-800a-956f-41b344ca587c" class="ai-support-link" target="_blank">💬 互動問答</a>
                <a href="https://chatgpt.com/share/67f896d4-e3a4-800a-9169-b0f385820e3e" class="ai-support-link" target="_blank">[Quiz] 填空題 ✏️</a>
                <a href="https://chatgpt.com/share/67f7329b-e008-800a-9c06-df50ec1bb977" class="ai-support-link" target="_blank">[Quiz] 中譯英 (入門) 😃</a>
                <a href="https://chatgpt.com/share/67f619dd-d668-800a-af6e-696897e751e7" class="ai-support-link" target="_blank">[Quiz] 中譯英 (學測難度) 😖</a>
            </div>
            <div class="button-group">
                <button id="ai-support-close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

    <!-- English to Chinese Quiz Modal -->
    <div id="english-to-chinese-modal" class="modal">
        <div class="modal-content">
            <div id="english-progress-info" class="progress-info" style="display: none;">
                <span id="english-progress-text"></span>
            </div>
            <div class="prompt">What does this mean in Chinese?</div>
            <div style="font-size: 28px; font-weight: bold; color: var(--primary); margin: 20px 0; display: flex; align-items: center; justify-content: center; gap: 15px;">
                <span id="english-word-display"></span>
                <span class="speaker-icon" id="english-word-speaker" title="Listen" style="cursor: pointer; color: var(--secondary); font-size: 24px;">🔊</span>
            </div>
            <div id="chinese-answer-display" class="reveal-answer" style="display: none;"></div>
            <div id="check-question" style="display: none; font-size: 23px; color: var(--accent1); margin-top: 10px;"><b>Did you get it right?</b></div>
            <div style="margin-top: 30px;">
                <button id="check-answer-btn" class="submit-btn" style="width: 100%; margin-bottom: 15px; padding: 15px;">Check Answer</button>
                <div class="button-group">
                    <button id="english-next-btn" class="next-btn">Next</button>
                    <button id="english-close-btn" class="close-btn">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Listen and Choose Modal -->
    <div id="listen-choose-modal" class="modal">
        <div class="modal-content">
            <h2>🎧 Listen and Choose</h2>
            <div class="listen-answer-section">
                <div id="listen-answer-display" class="listen-answer-display">Click the speaker</div>
                <div class="listen-speaker" id="listen-speaker" title="Play Audio">🔊</div>
            </div>
            <div class="timer-feedback-section">
                <div id="timer-feedback" class="timer-feedback"></div>
            </div>
            <div id="choices-grid" class="choices-grid"></div>
            <div class="listen-controls">
                <button id="listen-next-btn" class="listen-next-btn">Next</button>
                <button id="listen-close-btn" class="listen-close-btn">Close</button>
            </div>
        </div>
    </div>

    <!-- Quiz Modal -->
    <div id="quiz-modal" class="modal">
        <div class="modal-content">
            <div id="prompt" class="prompt">Say "<span id="translation-prompt"></span>" in English.</div>
            <input type="text" id="answer-input" class="answer-input" placeholder="Type your answer here...">
            <div id="feedback" class="feedback"></div>
            <div id="hint-text" class="hint"></div>
            <div id="reveal-answer" class="reveal-answer"></div>
            <div class="button-group">
                <button id="submit-btn" class="submit-btn">✅ or ❎</button>
                <button id="speak-btn" class="speak-btn">🎤 Speak</button>
                <button id="hint-btn" class="hint-btn">❓ Hint</button>
                <button id="answer-btn" class="answer-btn">🔑 Answer</button>
                <button id="next-btn" class="next-btn">Next</button>
                <button id="close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

    <footer class="visitor-counter">
        <div id="visitor-count">👥 Loading visitor count...</div>
    </footer>

    <!-- Refresh Reminder Popup -->
    <div id="refresh-reminder-popup" class="popup-container">
        <div class="popup-content">
            <div class="popup-layout">
                <div class="pikachu-image">
                    <img src="dinotaeng_walking.png" alt="Image Not Found" width="150">
                </div>
                <div class="speech-bubble">
                    <p class="english-text">1.每次使用請點擊「重新整理(refresh)🔄」以獲取更新！</p>
                    <p class="chinese-text">2.iPhone及iPad使用者需將system(系統)切換成iOS，🔊才能正常運作。</p>
                    <p class="chinese-text">3.手機有時會更新「文字轉語音」功能，導致🔊無法運作，重開機即可解決。</p>
                </div>
            </div>
            <button id="close-reminder-btn" class="close-reminder-btn">OK. I got it.</button>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>

    <script>
        // ===== DOM ELEMENTS =====
        const englishToChineseBtn = document.getElementById('english-to-chinese-btn');
        const englishToChineseModal = document.getElementById('english-to-chinese-modal');
        const englishWordDisplay = document.getElementById('english-word-display');
        const englishWordSpeaker = document.getElementById('english-word-speaker');
        const chineseAnswerDisplay = document.getElementById('chinese-answer-display');
        const checkQuestion = document.getElementById('check-question');
        const checkAnswerBtn = document.getElementById('check-answer-btn');
        const englishNextBtn = document.getElementById('english-next-btn');
        const englishCloseBtn = document.getElementById('english-close-btn');
        const englishProgressInfo = document.getElementById('english-progress-info');
        const englishProgressText = document.getElementById('english-progress-text');

        const listenChooseBtn = document.getElementById('listen-choose-btn');
        const listenChooseModal = document.getElementById('listen-choose-modal');
        const listenAnswerDisplay = document.getElementById('listen-answer-display');
        const listenSpeaker = document.getElementById('listen-speaker');
        const timerFeedback = document.getElementById('timer-feedback');
        const choicesGrid = document.getElementById('choices-grid');
        const listenNextBtn = document.getElementById('listen-next-btn');
        const listenCloseBtn = document.getElementById('listen-close-btn');

        const textImportBtn = document.getElementById('text-import-btn');
        const startBtn = document.getElementById('start-btn');
        const aiSupportBtn = document.getElementById('ai-support-btn');
        const vocabularyTable = document.getElementById('vocabulary-table');
        const vocabularyBody = document.getElementById('vocabulary-body');
        const selectAllCheckbox = document.getElementById('select-all');
        const quizModal = document.getElementById('quiz-modal');
        const translationPrompt = document.getElementById('translation-prompt');
        const answerInput = document.getElementById('answer-input');
        const feedbackEl = document.getElementById('feedback');
        const hintTextEl = document.getElementById('hint-text');
        const revealAnswerEl = document.getElementById('reveal-answer');
        const submitBtn = document.getElementById('submit-btn');
        const speakBtn = document.getElementById('speak-btn');
        const hintBtn = document.getElementById('hint-btn');
        const answerBtn = document.getElementById('answer-btn');
        const nextBtn = document.getElementById('next-btn');
        const closeBtn = document.getElementById('close-btn');
        const ttsSpeedSelect = document.getElementById('tts-speed');
        const ttsSystemSelect = document.getElementById('tts-system');

        const textImportModal = document.getElementById('text-import-modal');
        const textImportContent = document.getElementById('text-import-content');
        const textImportSubmitBtn = document.getElementById('text-import-submit-btn');
        const textImportCloseBtn = document.getElementById('text-import-close-btn');
        const textImportClearBtn = document.getElementById('text-import-clear-btn');
        const textImportCopyBtn = document.getElementById('text-import-copy-btn');

        const aiSupportModal = document.getElementById('ai-support-modal');
        const aiSupportCloseBtn = document.getElementById('ai-support-close-btn');

        // ===== VARIABLES =====
        let isSpeaking = false;
        let vocabularyData = [];
        let currentQuizWords = [];
        let currentWordIndex = -1;
        let currentWord = null;
        let recognition = null;
        let speechRate = 0.8;
        let quizMode = 'sequential';
        let currentEnglishQuizWords = [];
        let currentEnglishWordIndex = -1;
        let currentEnglishWord = null;
        let sectionProgress = {};
        let sectionOrder = [];
        let currentListenQuizWords = [];
        let currentListenWordIndex = -1;
        let currentListenWord = null;
        let questionStartTime = null;
        let isAnswered = false;

        let voices = [];
        let voicesLoaded = false;
        let currentTTSSystem = 'android';

        // ===== TTS FUNCTIONS =====
        function loadVoices() {
            return new Promise((resolve) => {
                voices = speechSynthesis.getVoices();
                if (voices.length > 0) {
                    voicesLoaded = true;
                    console.log('Voices loaded:', voices.length);
                    resolve(voices);
                } else {
                    const utterance = new SpeechSynthesisUtterance('');
                    utterance.volume = 0;
                    speechSynthesis.speak(utterance);
                    setTimeout(() => {
                        voices = speechSynthesis.getVoices();
                        voicesLoaded = true;
                        console.log('Voices loaded after trigger:', voices.length);
                        resolve(voices);
                    }, 100);
                }
            });
        }

        function getEnglishVoice() {
            if (!voicesLoaded || voices.length === 0) return null;

            if (currentTTSSystem === 'ios') {
                const iosPreferredVoices = ['Samantha', 'Tom', 'Alex', 'Karen', 'Moira'];
                for (const voiceName of iosPreferredVoices) {
                    const voice = voices.find(v => v.name.includes(voiceName));
                    if (voice) {
                        console.log('Using iOS voice:', voice.name);
                        return voice;
                    }
                }
            } else {
                const androidPreferredVoices = [
                    'Google US English',
                    'English (United States)',
                    'en-US-language',
                    'English United States',
                    'Chrome OS US English'
                ];
                for (const voiceName of androidPreferredVoices) {
                    const voice = voices.find(v =>
                        v.name.includes(voiceName) ||
                        v.name.toLowerCase().includes(voiceName.toLowerCase())
                    );
                    if (voice) {
                        console.log('Using Android voice:', voice.name);
                        return voice;
                    }
                }
            }

            const englishVoice = voices.find(v =>
                v.lang === 'en-US' ||
                v.lang.startsWith('en-') ||
                v.name.toLowerCase().includes('english')
            );
            if (englishVoice) {
                console.log(`Using fallback English voice for ${currentTTSSystem}:`, englishVoice.name);
                return englishVoice;
            }

            console.log(`Using first available voice for ${currentTTSSystem}:`, voices[0]?.name);
            return voices[0] || null;
        }

        function speak(text) {
            console.log('Speak function called with:', text, 'System:', currentTTSSystem);
            if (!('speechSynthesis' in window)) {
                console.warn('Speech synthesis not supported');
                return;
            }

            const cleanText = text.replace(/[()[\\]*]/g, '').trim();
            if (!cleanText) return;

            speechSynthesis.cancel();

            setTimeout(() => {
                const utterance = new SpeechSynthesisUtterance(cleanText);
                const preferredVoice = getEnglishVoice();
                if (preferredVoice) {
                    utterance.voice = preferredVoice;
                }

                utterance.lang = 'en-US';
                utterance.pitch = 1.0;
                utterance.volume = 1.0;

                if (currentTTSSystem === 'ios') {
                    utterance.rate = Math.max(0.5, speechRate * 0.9);
                } else {
                    utterance.rate = speechRate;
                    utterance.pitch = 0.95;
                }

                utterance.onstart = function() {
                    console.log('Speech started successfully');
                };

                utterance.onend = function() {
                    console.log('Speech ended normally');
                    isSpeaking = false;
                };

                utterance.onerror = function(event) {
                    console.error('Speech error:', event.error);
                    isSpeaking = false;
                };

                try {
                    speechSynthesis.speak(utterance);
                } catch (error) {
                    console.error('Failed to start speech synthesis:', error);
                }
            }, 100);
        }

        async function initializeTTS() {
            console.log('Initializing TTS...');
            const testUtterance = new SpeechSynthesisUtterance('');
            testUtterance.volume = 0;
            speechSynthesis.speak(testUtterance);
            await new Promise(resolve => setTimeout(resolve, 200));
            await loadVoices();

            if (voices.length === 0) {
                console.log('No voices found, trying again...');
                await new Promise(resolve => setTimeout(resolve, 500));
                await loadVoices();
            }

            console.log('TTS initialization complete. Voices:', voices.length);
            speechSynthesis.addEventListener('voiceschanged', () => {
                console.log('Voices changed event fired');
                loadVoices();
            });
        }

        // ===== SPEECH RECOGNITION =====
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.continuous = false;
            recognition.interimResults = false;

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript.toLowerCase().trim();
                answerInput.value = transcript;
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onend = function() {
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error', event.error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };
        }

        // ===== EVENT LISTENERS =====
        ttsSpeedSelect.addEventListener('change', (e) => {
            speechRate = parseFloat(e.target.value);
        });

        ttsSystemSelect.addEventListener('change', (e) => {
            currentTTSSystem = e.target.value;
            console.log(`Switched to ${currentTTSSystem} TTS system`);
            loadVoices().then(() => {
                console.log(`Voice loading complete for ${currentTTSSystem}`);
            });
        });

        document.addEventListener('change', (e) => {
            if (e.target.name === 'quiz-mode') {
                quizMode = e.target.value;
                console.log(`Quiz mode changed to: ${quizMode}`);
            }
        });

        aiSupportBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'flex';
        });

        aiSupportCloseBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'none';
        });

        textImportBtn.addEventListener('click', () => {
            textImportModal.style.display = 'flex';
        });

        textImportCloseBtn.addEventListener('click', () => {
            textImportModal.style.display = 'none';
        });

        // ===== PRESET VOCABULARY DATA =====
        const presetVocabulary = {
            b3l1: ` `,
            b3l2: `
◎Vocabulary---First Half (#1-#11)
innovate (v) =創新(v)
promise (v) =承諾(v)
material (n) =材料、原料
mention (v) =提到、說到(v)
structure (n) =結構
◎Vocabulary--Second Half (#12-#20)
rank (v) =排名(v)
unique (adj) =獨特的
adjust (v) =調整(v)
rely (v) =依靠
feedback (n) =回饋、意見
`,
            b3l3: `
◎Paragraph 1
champion (n) = 1.冠軍  2.捍衛者
universe (n) = 宇宙
be known as… = 被稱為…
create (v) = 創造
human being (n) = 人類(＝human, humankind)
clay (n) = 黏土
living creature (n) = 會動的生物、動物(不包括植物！)
on earth = 在地球上
quality (n) = 品質
speed (n) = 速度
strength (n) = 力量
fur (n) = 毛皮
wing (n) = 翅膀
by the time… = 到了…的時候
get to…= 到達…(＝ arrive at…)
run out of… = [片語] 用完…
make up for… = [片語] 彌補…
weak (adj) = 虛弱的
state (n) = 狀態
enable (v) = 使能夠
stand upright = 直立站立
not only…but also… = 不僅…而且…
generous (adj) = 慷慨的
so that… = 以便…
tool (n) = 工具
◎Paragraph 2
conflict (n) = 衝突(n)
Olympian gods (n) = 奧林匹斯眾神
distribution (n) = 分配(n)
make sacrifices = 做出犧牲
a sacrifice to God = 獻給神的祭品
trick someone (into doing something) = 欺騙某人（去做某事）
benefit (n) = 好處
slaughter (v) = 屠殺
an offering to God = 給神的供品
accept someone’s offer = 接受某人的提議
turn down someone’s offer = 拒絕某人的提議
special offer = 特別優惠
a pile of… = 一堆…
bone (n) = 骨頭
shiny fat (n) = 發亮的脂肪
underneath = 在…下面(＝under)
instead = 反而；作為替代
end up = [片語] 結果變成…
nothing but… = 只有…；不過是…
as a result = [片語] 結果、因此
from now on = 從現在起
from that day on = 從那天起
◎Paragraph 3
be angry about… = 對…生氣
starve (v) = 挨餓
freeze (v) = 凍僵
be able to… = 有能力(做某事)
be unable to… = 無法(做某事)
weapon (n) = 武器
to live in a cave = 住在洞穴裡
fall victim to… = [片語] 成為…的受害者
wild (adj) = 野生的
beast (n) = 野獸
miserable (adj) = 悲慘的
the stalk or stem of a flower (n) = 花梗或莖
light a match = 點燃火柴
hollow (adj) = 中空的
◎Paragraph 4
be furious about… = 對…極度憤怒(> be angry about…)
theft (n) = 竊盜
punish (v) = 懲罰
banish (v) = 放逐
be chained to a tree = 被鎖鏈拴在樹上
feed on… = [片語] 以…為食
liver (n) = 肝臟
gnaw (v) = 啃咬
torture (v) = 折磨
until the end of time = 直到時間的盡頭
set the stage for… = [片語] 為…創造條件、促成
civilization (n) = 文明
 `,
            maga1: `
◎Sept. 16—Paragraph 1
run (n) = 旅程(＝ journey)
zombie (n) = 殭屍
salmon (n) = 鮭魚
chaos (n) = 混亂
term (n) = 用語；術語
bring to mind = [片語] 使人想起
chain (n) = 鎖鏈
chain store (n) = 連鎖店
food chain (n) = 食物鏈
take place = [片語] (事情)發生、(活動)舉行
thousands of… = 上千的…
surge (v) = 激增
swim upstream = 溯流而上
spawn (v) = (魚、青蛙等大量)產卵
lay eggs = (鳥、雞等)下蛋
journey (n) = 旅程
be known as… = 被稱為…
chapter (n) = 章節
fascinating (adj) = 迷人的
life cycle (n) = 生命週期
a Korean drama (n) = 韓劇
dramatic (adj) = 戲劇性的
virus (n) = 病毒
go viral (on the internet) = 在網路上爆紅
promotion (n) = 宣傳；推廣
◎Sept. 16—Paragraph 2
freshwater fish (n) = 淡水魚
saltwater fish (n) = 海水魚
ocean (n) = 海洋
a couple of… = 幾個…
stream (< river) (n) = 溪流(< 河川)
start as… = 以…開始
lay eggs (v) = 下蛋
gravel (n) = 礫石
nest (n) = 巢穴
go through…= [片語] 經歷…(＝ experience)
stage (n) = 階段
on one’s way to… =  [片語] 在前往…的途中
journey (v) = 旅行
swim downstream = 順流而下
gather (v) = 聚集
estuary (n) = 河口
adapt to… (v) = 適應…
concentration (n) = 專注；集中
high salt concentration = 高鹽濃度
grow scales = 長出鱗片
silvery (adj) = 銀白色的
protect someone from… = 保護某人免於…
predator (n) = 捕食者
◎Sept. 16—Paragraph 3
adult (n) =成人
mature (v) = 成熟
return to… = 回到…
(fishing/hunting…) ground (n) = (捕魚/狩獵等有特殊用途的)區域、場地
experience (v) = 經歷
extreme (adj) = 極端的
physical (adj) = 身體的、生理的
exhausting (adj) = 令人筋疲力竭的(> tiring)
guide (v) = 引導
instinct (n) = 本能
current (n) = 水流、氣流、電流
swim against the current = 逆流而上
leap (v) = 跳躍(＝jump)
waterfall (n) = 瀑布
reach (a place) = 抵達(某處)(＝ arrive at…)
place of birth (n) = 出生地
restart  (v) = 重新開始(＝ start again)
rot (v) = 腐爛
earn money = 賺錢
earn friendship/respect… = 贏得友誼／尊敬…
earn someone something = 為某人贏得某物
nickname (n) = 綽號
◎Sept. 17—Paragraph 1
species (n) = 物種
as a keystone species = 作為關鍵物種
play a central role in… =  [片語] 在…中扮演核心角色
ecosystem (n) = 生態系
nutrient (n) = 養分
sustain (v) = 維持
feed (v) = 餵養；供給食物
insect (n) = 昆蟲
benefit (from…) (v) = 受益(於…)
woods (n) = 樹林
fertilize (v) = 施肥
soil (n) = 土壤
in addition to… =  [片語] 除了…之外(＝besides…)
ecological (adj) = 生態的
value (n) = 價值
throughout (+ place) = 遍及(某處)、(某處)到處都是
throughout (+ time) = 整個…期間
range (n) = 範圍
community (n) = 社群；群體
rely on… (v) = 依靠…
valuable (adj) = 有價值的
source of food (n) = 食物來源
the basis of… = …的基礎
economy (n) = 經濟
◎Sept. 17—Paragraph 2
despite… = 儘管…(＝ in spite of…)
environmental (adj) = 環境的
economic (adj) = 經濟的
face (v) = 面對
growing threats = 日益增加的威脅
on several fronts = 在幾個方面
climate change (n) = 氣候變遷
waters (n) = 水域(water + S)
affect (v) = 影響(＝influence)
migration (n) = 遷徙
pattern (n) = 模式
while = 而…(表示「對比」)
dam (n) = 水壩
pollution (n) = 污染
degrade (v) = 使惡化
habitat (n) = 棲息地
further (adv) = 1.更遠 2.更進一步
reduce (v) =使減少(vs. increase)
shrink (v) = 縮小(vs. expand)
population (n) = 人口；族群數量
deal with… =  [片語] 處理…
require (v) = 需要(＝need)
government (n) = 政府
responsibility (n) = 責任
ultimately (adv) = 最終、終究
(responsibility) lie with someone =  [片語]（責任）在於某人
◎Sept. 17—Paragraph 3
support (v) = 支持
reduce plastic use = 減少塑膠使用
push for… = 努力爭取、反覆要求
protective (adj) = 保護性的
policy (n) = 政策
individual (n) = 個人
take action = 採取行動
future generations (n) = 未來世代、後代子孫
deserve (v) = 值得擁有、理應得到
thriving (adj) = 繁榮的、興盛的
natural world (n) = 自然界

 `,
            maga2: `

◎Sept. 22—Paragraph 1
refrigerator / fridge (n) = 冰箱
have something in common = [片語] 有共同點
rely on… (v) = 依靠…
tiny (adj) = 微小的
a piece of technology (n) = 一項科技產品
(be made with…) This cake is made with eggs and flour. = [由…製成] 這個蛋糕是用蛋和麵粉做的。(使用某物作為零件或原料之一 vs. be made from… & be made of…)
semi- = 一半的、半… (如：semifinal半決賽，即四強賽)
semiconductor (n) = 半導體
in fact = 事實上
rarely (adv) = 很少地
device (n) = 裝置
simply (adv) = 簡單地
function (v) = 運作；起作用
◎Sept. 22—Paragraph 2
exactly (adv) = 正確地；完全地
in simple terms = 簡單來說
material (n) = 材料
the flow of… = …的流動
electricity (n) = 電
metal (n) = 金屬
conduct electricity or heat = 傳導 電或熱
adjust (v) = 調整
block (v) = 阻擋
to a… degree = 在某種程度上
various (adj) = 各種的
in other words = [片語] 換句話說
act like… = 做出像…的行為
miniature (adj) = 微型的
be well suited for… = 很適合於…
electronic device (n) = 電子裝置
micro- = 微小的、微… (如：microwave微波、Microsoft微軟)
microchip (n) = 微晶片
in turn  = 1.輪流地(＝one after another)
in turn = 2.因此；作為結果(＝as a result of something)
fundamental (adj) = 基本的
component (n) = 元件
◎Sept. 22—Paragraph 3
utterly (adv) = 完全地
transform (v) = 改變
shrink (v) = 縮小(vs. expand擴大)
dramatically (adv) = 戲劇性地；大幅度地
increasingly (+ adj.) = 越來越…
enable (v) = 使能夠
(be made from…) Paper is made from trees. = [由…製成] 紙是樹做的。(看不出原料)
(be made of…) This table is made of wood. = [由…製成] 這張桌子是木頭做的。(看得出原料)
silicon (n) = 矽
common (adj) = 常見的
element (n) = 元素
modify (v) = 修改
act as… = 1.臨時擔任、充當  2.有…效果、起…作用
an on-off switch (n) = 開關
electric signal (n) = 電子信號
form (v) = 形成
laptop (computer) (n) = 筆記型電腦
billions of… = 數十億的…
◎Sept. 23—Paragraph 1
be found in… = 存在於…
electronics (n) = 電子產品
desktop (computer) (n) = 桌上型電腦
tablet (computer) (n) = 平板電腦
gaming console (n) = 遊戲機
contain (v) = 含有
process (v) = 處理
processor (n) = 處理器
memory chip (n) = 記憶晶片
communication system (n) = 通訊系統
power (v) = 為…供電
data (n) = 數據
store (v) = 儲存
information (n) = 資訊
website (n) = 網站
be full of… = 充滿…
server (n) = 伺服器
run on… = 以…運作
advanced (adj) = 先進的
video streaming (n) = 影音串流
social media (n) = 社群媒體
◎Sept. 23—Paragraph 2
play a key role in… = [片語] 在…扮演關鍵角色
get around = 四處走動；移動
electric car (n) = 電動車
manage (v) = 管理
battery power (n) = 電池電力
maintain (v) = 維持
efficiency (n) = 效率
feature (n) = 特點、特色
navigation (n) = 導航
run (v) = 運行
appliance (n) = 家電
temperature (n) = 溫度
automate cycles (v) = 自動化循環
track (v) = 追蹤
expire (v) = 到期(失效、無法使用、食物過期)
expiration date (n) = (合約、簽證、信用卡、食物等地)有效期限
recipe (n) = (某道菜的)食譜(vs. cookbook一本食譜)
thanks to… = [片語] 多虧…、由於…(＝because of…, due to…)
◎Sept. 23—Paragraph 3
crucial (adj) = 關鍵的
behind the scenes = [片語] 幕後、不為人知地
digital (adj) = 數位的
keep something running = 讓某物持續運作
one… at a time = 一次一個…
◎Review: technical terms (專有名詞)
conduct electricity or heat = 傳導電或熱
semiconductor (n) = 半導體
microchip (n) = 微晶片
memory chip (n) = 記憶晶片
silicon (n) = 矽
electric signal (n) = 電子信號
laptop (computer) (n) = 筆記型電腦
desktop (computer) (n) = 桌上型電腦
tablet (computer) (n) = 平板電腦
processor (n) = 處理器
server (伺服器) (n) = 伺服器
communication system (n) = 通訊系統
automate cycles (v) = 自動化循環




 `,
            maga3: `
@Paragraph 1
import (n) = 進口
take root = 扎根
kingdom (n) = 王國
yet = 然而(but, however) vs. not yet (還沒、尚未)
be native to… = 原產於…
island (n) = 島嶼
in fact = [片語] 事實上
variety (n) = 品種；多樣性
introduce (v) = 1.介紹  2.首次推行；採用；引進
Dutch (n/adj) = 荷蘭人；荷蘭的
century (n) = 世紀
colonial rule (n) = 殖民統治
influence (v) = 影響(＝affect)
shape (v) = 形塑、塑造
agriculture (n) = 農業
to this day = [片語] 直到今日
@Paragraph 2
guava (n) = 芭樂
sugar apple (n) = 釋迦
wax apple (n) = 蓮霧
originally (adv) = 原本、起初
tropical (adj) = 熱帶的
bring something in (v) = [片語] 引進某物
establish (v) = 建立
profitable (adj) = 有利可圖的
crops (n) = 農作物
trade (n) = 貿易
agricultural (adj) = 農業的
landscape (n) = 某地區的景色、風景
varied (adj) = 多樣化的
major (adj) = 主要的
producer (n) = 生產者
@Paragraph 3
a period of time (n) = 一段時間
certainly (adv) = 確實、必然
negative (adj) = 負面的
have a positive impact on… = 對…有正面影響
fruit cultivation (n) = 水果栽培
improve (v) = 改善
local (adj) = 當地的
farming (n) = 農耕
play a vital role in… = 在…中扮演重要角色
industry (n) = 1.工業  2.產業
@Paragraph 4
once (adv) = 曾經
be deeply rooted in… = 深植於…
serve as… (v) = 充當；當作…使用
remind (v) = 提醒；使想起…
reminder (n) = 提醒的通知等
historical (adj) = 歷史的
exchange (n) = 交流；交換
complex (adj) = 複雜的
yield (v) = 產生；出產
enduring (adj) = 持久的
fruitful (adj) = 有成果的；豐碩的
result (n) = 結果

 `,
            maga4: `
◎Sept. 26—Paragraph 1
the long and short of it = 總而言之
constantly (adv) = 不斷地
century (n) = 世紀
significantly (adv) = 顯著地
length (n) = 長度
trend (n) = 趨勢
reveal (v) = 揭露
◎Sept. 26—Paragraph 2
economist (n) = 經濟學家
index (n) = 指數
theory (n) = 理論
reflect (v) = 反映
economy (n) = 經濟
according to… = 根據…
supporter (n) = 支持者
point to… = 指出…
booming (adj) = 蓬勃發展的
depression (n) = 1.憂鬱  2.經濟不景氣
the Great Depression (n) =經濟大蕭條(1929年~1933年)
symbol (n) = 象徵(n)
decade (n) = 十年
in contrast = 相較之下
be marked by… = 以…為特徵
various (adj) = 各種的
financial (adj) = 金融的；財務的
increase (v) = 增加(v)
popularity (n) = 普及；受歡迎程度
flow (n) = 流動(n)
(theory) hold up = （理論）經得起考驗
remain (v) = 維持(某狀態)
crisis (n) = 危機
be tied to… = 與…有關(＝be related to…)
the stock market (n) = 股市
◎Sept. 26—Paragraph 3
in fact = 事實上
cultural and social changes (n) = 文化與社會變遷
role (n) = 角色
gain (v) = 獲得
the right (to do something) = (做某事的)權利
vote (v) = 投票
◎Sept. 29—Paragraph 1
fascinating (adj) = 迷人的
thousands of… = 成千上萬的…
be made from… = 由…製成(vs. be made of…)
leather (n) = 皮革
ancient (adj) = 古代的
Egypt (n) = 埃及
Greece (n) = 希臘
wrap (v) = 包起來(v)
medieval (adj) = 中世紀的
favor (v) = 偏愛
shift (v/n) = 轉變(＝change)
slim (adj) = 苗條的
emerge (v) = 出現、浮現
◎Sept. 29—Paragraphs 2 & 3
gender (n) = 性別
attitude toward… = 對…的態度
indeed (adv) = 的確
avoid… altogether = 完全避免…
assert (v) = 主張；斷言
independence (n) = 獨立
recently (adv) = 最近
airline (n) = 航空公司
announce (v) = 宣布
staff (n) = (全體)員工
on duty = 值勤中
celebrity (n) = 名人
challenge (v) = 挑戰
norm (n) = 常規；規範
somewhere in between = 介於兩者之間
for sure = 確定地
 `,
            coreP2U1: `
◎Words/Phrases
dependent (adj) = 依賴的
imagine (v) = 想像
electronics (n) = 1.電子學  2.電子設備
advanced (adj) = 先進的；高級的
commercial (adj) = 商業的；營利的
TV commercial = 電視廣告
technically (adv) = 技術上；嚴格來說
assistant (n) = 助手
device (n) = 裝置；設備
imitate (v) = 模仿
invent (v) = 發明
further (v) = 促進；推進
further (adj/adv) = 更多的、更進一步的
research (n/v) = 研究
combination (n) = 組合
practical (adj) = 實用的
fashionable (adj) = 時尚的；流行的
in addition to… = 除了…之外(＝besides…)
educate (v) = 教育；培養
entertain (v) = 娛樂；招待
growth (n) = 成長；發展
promote (v) = 促進；推廣
◎Example Sentences
Children are dependent on their parents for food. = 孩子在食物上依賴父母。
I can’t imagine a world without phones. = 我無法想像一個沒有手機的世界。
Electronics are part of modern life. = 電子設備是現代生活的一部分。
This is an advanced computer program. = 這是一個先進的電腦程式。
Many companies make commercial products. = 許多公司生產商業產品。
I saw a funny TV commercial yesterday. = 我昨天看到一個有趣的電視廣告。
Technically, he didn’t break the rules. = 技術上來說，他並沒有違規。
She works as an assistant in the office. = 她在辦公室當助手。
A smartphone is a useful device. = 智慧型手機是一個有用的裝置。
Children often imitate their parents. = 孩子常模仿父母。
He can invent new tools easily. = 他能輕易發明新工具。
We need to further our knowledge. = 我們需要促進我們的知識。
He offered further advice on the topic. = 他對這個主題提供更多建議。
We need to further check the results. =我們需要更進一步確認結果。
Scientists do research on climate change. = 科學家研究氣候變化。
A combination of colors makes the painting beautiful. = 顏色的組合讓畫作很漂亮。
This bag is very practical for travel. = 這個包對旅行很實用。
She always wears fashionable clothes. = 她總是穿時尚的衣服。
In addition to English, she speaks French. = 除了英文，她還會說法文。
Teachers educate students in many subjects. = 老師教育學生很多科目。
Movies entertain people in their free time. = 電影在休閒時間娛樂人們。
The growth of trees is slow in winter. = 樹木在冬天生長緩慢。
We should promote healthy eating habits. = 我們應該推廣健康飲食習慣。

 `,
            coreP2U2: `
◎Words/Phrases
handy (adj) = 方便的；有用的
come in handy = [片語] 派上用場
microwave (oven) = 微波爐
extra (n/adj) = 額外的；額外的東西
typically (adv) = 通常；典型地
design (v/n) = 設計；圖案
motivate (v) = 激勵
ideal (adj/n) = 理想的；理想的人/事/物
task (n) = 任務；工作
drag (v) = 拖動；拉
especially (adv) = 尤其
sticky (adj) = 黏的
dust (n) = 灰塵
keyboard (n) = 鍵盤
polish (v) = 擦亮；潤色
polish (n) = 亮光劑(如：shoe polish鞋油、nail polish指甲油)
tell… apart = 分辨…
distribute (v) = 分配；散發
combine (v) = 結合、組合
handle (v) = 處理
(a piece of) baggage (n) = (一件)行李 (＝luggage)
◎Example Sentences
This small tool is very handy. = 這個小工具很方便。
This pen will come in handy later. = 這支筆以後會派上用場。
We heat food in the microwave. = 我們用微波爐加熱食物。
He bought an extra ticket for his friend. = 他買了一張額外的票給朋友。
She typically wakes up at seven. = 她通常七點起床。
The company will design a new logo. = 公司會設計一個新標誌。
Good teachers motivate students to learn. = 好老師激勵學生學習。
This is an ideal place for a picnic. = 這是野餐的理想地點。
Completing the task took two hours. = 完成這項任務花了兩小時。
Please drag the file to the folder. = 請把檔案拖到資料夾。
I like all fruits, especially apples. = 我喜歡所有水果，尤其是蘋果。
The candy is sticky and sweet. = 這糖果又黏又甜。
There is dust on the shelf. = 架子上有灰塵。
Type your password on the keyboard. = 在鍵盤上輸入你的密碼。
Polish the shoes before the party. = 派對前把鞋擦亮。
This polish makes the table shiny. = 這種亮光劑讓桌子有光澤。
It’s hard to tell the twins apart. = 分辨這對雙胞胎很困難。
The teacher will distribute the books to students. = 老師會把書分發給學生。
I combined black tea and milk to make milk tea. = 我把紅茶和牛奶組合起來做成奶茶。
She can handle difficult situations well. = 她能很好地處理困難情況。
We packed our baggage for the trip. = 我們為旅行打包行李。

 `,
            coreP2U3: `
◎Vocabulary #1-#10
invention (n) = 發明
brilliant (adj) = 傑出的；聰穎的
complete (adj) = 完整的；完全的
complete (v) = 完成
accident (n) = 意外；事故
material (n) = 材料；物質
explode (v) = 爆炸
control (v) = 控制
control (n) = 控制；管理
in a… manner = 以…方式
◎Example sentences #1-#10
The telephone was an important invention. = 電話是一項重要的發明。
She had a brilliant idea. = 她有一個聰明的點子。
The puzzle is complete. = 這個拼圖已經完整了。
I will complete my homework tonight. = 我今晚會完成作業。
He had an accident on his way to school. = 他上學的路上發生了意外。
We need more material for the project. = 我們的專案需要更多材料。
The fireworks will explode at midnight. = 煙火會在午夜爆炸。
I need to control my anger. = 我需要控制我的憤怒。
The control of the machine is easy. = 操作這台機器很簡單。
She spoke in a polite manner. = 她以禮貌的方式說話。
◎Vocabulary #11-#20
manners (n) = 禮貌；舉止
amateur (adj) = 業餘的
amateur (n) = 業餘愛好者
burst (v) = 破裂；爆炸
burst into laughter = 突然大笑
burst into tears = 突然大哭
flame (n) = 火焰
prosper (v) = 繁榮；興旺
universally (adv) = 普遍地；全體地
ray (n) = 光線
◎Example sentences #11-#20
Good manners are important at the table. = 餐桌上的禮貌很重要。
She is an amateur painter. = 她是一位業餘畫家。
He is an amateur at tennis. = 他是一個網球業餘愛好者。
The balloon will burst soon. = 氣球很快就會爆裂。
The children burst into laughter. = 孩子們突然大笑起來。
She burst into tears after hearing the news. = 聽到這個消息後，她突然大哭。
The candle has a small flame. = 蠟燭有一個小火焰。
The business began to prosper. = 生意開始繁榮。
This idea is universally accepted. = 這個想法被普遍接受。
A ray of light shone through the window. = 一道光線透過窗戶照進來。
◎Vocabulary #21-#31
a ray of hope = 一線希望
object (n) = 物體；目標
to object to… = 反對…
contribution (n) = 貢獻；捐獻
medal (n) = 獎牌
earnings (n) = 收入；收益
deserted (adj) = 荒廢的；空無一人的
a culture of cells = 細胞培養
apparently (adv) = 顯然地；表面上
modestly (adv) = 謙虛地；適度地
clumsy (adj) = 笨拙的；不靈巧的

◎Example sentences #21-#31
There is a ray of hope for the sick child. = 對那個生病的孩子有一線希望。
The object on the table is a vase. = 桌上的物體是一個花瓶。
I object to this plan. = 我反對這個計畫。
Her contribution helped the team succeed. = 她的貢獻幫助團隊成功。
He won a gold medal. = 他贏得了一枚金牌。
His earnings are higher this year. = 他的收入今年更高。
The village was deserted after the storm. = 暴風雨後，村莊變得荒廢。
The scientists grew a culture of cells. = 科學家培養了一個細胞培養物。
Apparently, she is very busy today. = 顯然，她今天非常忙。
He modestly accepted the praise. = 他謙虛地接受了讚美。
He is clumsy and often drops things. = 他很笨拙，經常掉東西。
 `,
            other1: ` `,
            other2: ` `
        };

        function isContentEmpty(content) {
            const cleaned = content.replace(/\s+/g, '').replace(/[◎=]/g, '');
            return cleaned.length === 0;
        }

        function showNoContentMessage() {
            const messageOverlay = document.createElement('div');
            messageOverlay.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background-color: rgba(0, 0, 0, 0.8); display: flex;
                justify-content: center; align-items: center; z-index: 1000;
            `;

            const messageBox = document.createElement('div');
            messageBox.style.cssText = `
                background-color: white; padding: 30px; border-radius: 15px;
                text-align: center; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                max-width: 400px; margin: 0 20px;
            `;

            messageBox.innerHTML = `
                <h3 style="color: var(--primary); margin-bottom: 15px;">⚠️ No Content Available</h3>
                <p style="font-size: 18px; margin-bottom: 10px;">Please wait for updates.</p>
                <p style="font-size: 16px; color: var(--mid); margin-bottom: 20px;">目前暫無內容,請等待更新</p>
                <button id="close-no-content-msg" style="
                    background-color: var(--accent1); color: white; padding: 10px 20px;
                    border: none; border-radius: 6px; cursor: pointer; font-size: 16px;">OK</button>
            `;

            messageOverlay.appendChild(messageBox);
            document.body.appendChild(messageOverlay);

            document.getElementById('close-no-content-msg').addEventListener('click', () => {
                document.body.removeChild(messageOverlay);
            });

            messageOverlay.addEventListener('click', (e) => {
                if (e.target === messageOverlay) {
                    document.body.removeChild(messageOverlay);
                }
            });
        }

        document.querySelectorAll('.preset-btn').forEach(button => {
            button.addEventListener('click', () => {
                const presetKey = button.dataset.preset;
                if (presetVocabulary[presetKey]) {
                    const content = presetVocabulary[presetKey];
                    if (isContentEmpty(content)) {
                        showNoContentMessage();
                        return;
                    }

                    processTextImport(content);
                    textImportModal.style.display = 'none';

                    const successMessage = document.createElement('div');
                    successMessage.style.cssText = `
                        position: fixed; top: 20px; right: 20px; background-color: var(--accent2);
                        color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold;
                        z-index: 1000; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                    `;
                    successMessage.textContent = `✅ ${button.textContent} loaded successfully!`;
                    document.body.appendChild(successMessage);

                    setTimeout(() => {
                        if (document.body.contains(successMessage)) {
                            document.body.removeChild(successMessage);
                        }
                    }, 3000);
                }
            });
        });

        textImportSubmitBtn.addEventListener('click', () => {
            const text = textImportContent.value.trim();
            if (!text) {
                alert('Please choose a lesson or enter vocabulary pairs. (請選擇單元或輸入"English vocabulary = 中文翻譯")');
                return;
            }
            processTextImport(text);
            textImportModal.style.display = 'none';
        });

        textImportClearBtn.addEventListener('click', () => {
            textImportContent.value = '';
        });

        textImportCopyBtn.addEventListener('click', () => {
            const textToCopy = textImportContent.value;
            if (!textToCopy) {
                alert('No text to copy.');
                return;
            }

            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    const originalText = textImportCopyBtn.textContent;
                    textImportCopyBtn.textContent = 'Copied!';
                    setTimeout(() => {
                        textImportCopyBtn.textContent = originalText;
                    }, 1500);
                })
                .catch(err => {
                    console.error('Failed to copy text: ', err);
                    alert('Failed to copy text. Please try again.');
                });
        });

        // ===== TEXT IMPORT AND TABLE RENDERING =====
        function processTextImport(text) {
            vocabularyData = [];
            sectionOrder = [];
            const lines = text.split('\n');
            let currentSection = "Default";

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                if (!line) continue;

                if (line.includes('◎') || line.includes('@') || line.startsWith('※')) {
                    currentSection = line.replace('◎', '').replace('@', '').replace('※', '').trim();
                    if (!sectionOrder.includes(currentSection)) {
                        sectionOrder.push(currentSection);
                    }
                    continue;
                }

                const parts = line.split('=');
                if (parts.length < 2) continue;

                const vocabulary = parts[0].trim();
                const translation = parts[1].trim();

                if (vocabulary && translation) {
                    vocabularyData.push({
                        vocabulary: vocabulary,
                        translation: translation,
                        selected: true,
                        section: currentSection
                    });
                }
            }

            renderVocabularyTable();
            if (vocabularyData.length > 0) {
                startBtn.disabled = false;
                englishToChineseBtn.disabled = false;
                listenChooseBtn.disabled = false;
            }
        }

        function toggleSection(sectionName) {
            const sectionRows = document.querySelectorAll(`.section-row[data-section="${sectionName}"]`);
            const collapseBtn = document.querySelector(`[data-section-toggle="${sectionName}"]`);

            if (!collapseBtn) return;

            const isCollapsed = collapseBtn.textContent === '🔽';

            if (isCollapsed) {
                sectionRows.forEach(row => row.style.display = 'table-row');
                collapseBtn.textContent = '🔼';
                collapseBtn.title = 'Collapse (收起)';
            } else {
                sectionRows.forEach(row => row.style.display = 'none');
                collapseBtn.textContent = '🔽';
                collapseBtn.title = 'Expand (展開)';
            }
        }

        function renderVocabularyTable() {
            if (vocabularyData.length === 0) {
                vocabularyBody.innerHTML = '<tr><td colspan="3" class="no-data">Import your vocabulary list to get started</td></tr>';
                return;
            }

            vocabularyBody.innerHTML = '';
            const sectionMap = {};

            vocabularyData.forEach(item => {
                if (!sectionMap[item.section]) {
                    sectionMap[item.section] = [];
                }
                sectionMap[item.section].push(item);
            });

            Object.keys(sectionMap).forEach(sectionName => {
                const sectionItems = sectionMap[sectionName];

                const sectionRow = document.createElement('tr');
                sectionRow.className = 'section-header';
                const sectionCell = document.createElement('td');
                sectionCell.colSpan = 2;

                const sectionTitle = document.createElement('div');
                sectionTitle.className = 'section-title';

                const collapseBtn = document.createElement('button');
                collapseBtn.className = 'collapse-btn';
                collapseBtn.textContent = '🔼';
                collapseBtn.title = 'Collapse (收起)';
                collapseBtn.setAttribute('data-section-toggle', sectionName);
                collapseBtn.addEventListener('click', () => toggleSection(sectionName));

                const titleText = document.createElement('span');
                titleText.textContent = sectionName;

                sectionTitle.appendChild(collapseBtn);
                sectionTitle.appendChild(titleText);
                sectionCell.appendChild(sectionTitle);

                const sectionCheckCell = document.createElement('td');
                const sectionCheckbox = document.createElement('input');
                sectionCheckbox.type = 'checkbox';
                sectionCheckbox.checked = sectionItems.every(item => item.selected);
                sectionCheckbox.dataset.section = sectionName;

                sectionCheckbox.addEventListener('change', (e) => {
                    const isChecked = e.target.checked;
                    const section = e.target.dataset.section;

                    vocabularyData.forEach((item, index) => {
                        if (item.section === section) {
                            item.selected = isChecked;
                            const checkbox = document.querySelector(`input[data-index="${index}"]`);
                            if (checkbox) checkbox.checked = isChecked;
                        }
                    });

                    updateSelectAllCheckbox();
                });

                sectionCheckCell.appendChild(sectionCheckbox);
                sectionRow.appendChild(sectionCell);
                sectionRow.appendChild(sectionCheckCell);
                vocabularyBody.appendChild(sectionRow);

                sectionItems.forEach((item, localIndex) => {
                    const index = vocabularyData.findIndex(vItem =>
                        vItem.vocabulary === item.vocabulary &&
                        vItem.translation === item.translation);

                    const row = document.createElement('tr');
                    row.className = 'section-row';
                    row.setAttribute('data-section', sectionName);

                    const wordCell = document.createElement('td');
                    const cleanWord = item.vocabulary.replace(/\(.*\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                    wordCell.innerHTML = `
                        ${item.vocabulary}
                        <span class="speaker-icon" title="Listen" data-word="${cleanWord}">🔊</span>
                    `;

                    const translationCell = document.createElement('td');
                    translationCell.textContent = item.translation;

                    const checkboxCell = document.createElement('td');
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.checked = item.selected;
                    checkbox.dataset.index = index;
                    checkbox.dataset.section = item.section;

                    checkbox.addEventListener('change', (e) => {
                        vocabularyData[index].selected = e.target.checked;
                        updateSectionCheckbox(item.section);
                        updateSelectAllCheckbox();
                    });

                    checkboxCell.appendChild(checkbox);
                    row.appendChild(wordCell);
                    row.appendChild(translationCell);
                    row.appendChild(checkboxCell);
                    vocabularyBody.appendChild(row);
                });
            });

            document.querySelectorAll('.speaker-icon').forEach(icon => {
                icon.addEventListener('click', (e) => {
                    const word = e.target.dataset.word;
                    speak(word);
                });
            });

            updateSelectAllCheckbox();
        }

        function updateSectionCheckbox(sectionName) {
            const sectionItems = vocabularyData.filter(item => item.section === sectionName);
            const allSelected = sectionItems.every(item => item.selected);
            const noneSelected = sectionItems.every(item => !item.selected);
            const sectionCheckbox = document.querySelector(`input[data-section="${sectionName}"]`);

            if (sectionCheckbox) {
                sectionCheckbox.checked = allSelected;
                sectionCheckbox.indeterminate = !allSelected && !noneSelected;
            }
        }

        function updateSelectAllCheckbox() {
            if (vocabularyData.length === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
                return;
            }

            const selectedCount = vocabularyData.filter(item => item.selected).length;
            if (selectedCount === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            } else if (selectedCount === vocabularyData.length) {
                selectAllCheckbox.checked = true;
                selectAllCheckbox.indeterminate = false;
            } else {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = true;
            }
        }

        selectAllCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            vocabularyData.forEach(item => {
                item.selected = isChecked;
            });

            document.querySelectorAll('#vocabulary-body input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = isChecked;
                if (checkbox.dataset.section) {
                    checkbox.indeterminate = false;
                }
            });
        });

        // ===== PROGRESS TRACKING =====
        function initializeSectionProgress() {
            sectionProgress = {};
            const sectionMap = {};

            vocabularyData.forEach(item => {
                if (!sectionMap[item.section]) {
                    sectionMap[item.section] = [];
                }
                sectionMap[item.section].push(item);
            });

            Object.keys(sectionMap).forEach(sectionName => {
                const sectionItems = sectionMap[sectionName].filter(item => item.selected);
                if (sectionItems.length > 0) {
                    sectionProgress[sectionName] = {
                        currentIndex: -1,
                        totalCount: sectionItems.length,
                        items: sectionItems
                    };
                }
            });
        }

        function getCurrentProgressInfo() {
            if (quizMode !== 'sequential' || !currentEnglishWord) {
                return null;
            }

            const currentSection = currentEnglishWord.section;
            if (!sectionProgress[currentSection]) {
                return null;
            }

            const progress = sectionProgress[currentSection];
            const currentPosition = progress.currentIndex + 1;
            const totalInSection = progress.totalCount;

            return {
                current: currentPosition,
                total: totalInSection,
                section: currentSection
            };
        }

        function updateProgressDisplay() {
            if (quizMode !== 'sequential') {
                englishProgressInfo.style.display = 'none';
                return;
            }

            const progressInfo = getCurrentProgressInfo();
            if (!progressInfo) {
                englishProgressInfo.style.display = 'none';
                return;
            }

            englishProgressText.textContent = `${progressInfo.current} of ${progressInfo.total} (${progressInfo.section})`;
            englishProgressInfo.style.display = 'block';
        }

        // ===== LISTEN AND CHOOSE QUIZ =====
        function startListenAndChooseQuiz() {
            currentListenQuizWords = vocabularyData.filter(item => item.selected);

            if (currentListenQuizWords.length === 0) {
                alert('Please select at least 8 vocabulary words for this quiz. (請選擇至少8個單字以進行此測驗)');
                return;
            }

            if (currentListenQuizWords.length < 8) {
                alert('Please select at least 8 vocabulary words for this quiz. (請選擇至少8個單字以進行此測驗)');
                return;
            }

            resetListenAndChooseQuiz();
            listenChooseModal.style.display = 'flex';
            nextListenQuestion();
        }

        function resetListenAndChooseQuiz() {
            currentListenWordIndex = -1;
            currentListenWord = null;
            questionStartTime = null;
            isAnswered = false;
            listenAnswerDisplay.textContent = 'Click the speaker';
            timerFeedback.textContent = '';
        }

        function nextListenQuestion() {
            isAnswered = false;
            questionStartTime = null;
            listenAnswerDisplay.textContent = 'Click the speaker';
            timerFeedback.textContent = '';

            if (quizMode === 'sequential') {
                currentListenWordIndex = (currentListenWordIndex + 1) % currentListenQuizWords.length;
            } else {
                const previousIndex = currentListenWordIndex;
                if (currentListenQuizWords.length === 1) {
                    currentListenWordIndex = 0;
                } else {
                    do {
                        currentListenWordIndex = Math.floor(Math.random() * currentListenQuizWords.length);
                    } while (currentListenWordIndex === previousIndex && currentListenQuizWords.length > 1);
                }
            }

            currentListenWord = currentListenQuizWords[currentListenWordIndex];
            generateChoices();
        }

        function generateChoices() {
            if (!currentListenWord) return;

            const otherTranslations = currentListenQuizWords
                .filter(item => item.translation !== currentListenWord.translation)
                .map(item => item.translation);

            const shuffled = otherTranslations.sort(() => 0.5 - Math.random());
            const selectedChoices = shuffled.slice(0, 7);
            const allChoices = [...selectedChoices, currentListenWord.translation];
            const finalChoices = allChoices.sort(() => 0.5 - Math.random());

            choicesGrid.innerHTML = '';
            finalChoices.forEach(choice => {
                const button = document.createElement('button');
                button.className = 'choice-button';
                button.textContent = choice;
                button.addEventListener('click', () => handleChoiceClick(button, choice));
                choicesGrid.appendChild(button);
            });
        }

        function handleChoiceClick(button, selectedChoice) {
            if (isAnswered) return;

            isAnswered = true;
            const responseTime = questionStartTime ? (Date.now() - questionStartTime) / 1000 : 0;

            document.querySelectorAll('.choice-button').forEach(btn => {
                btn.disabled = true;
            });

            const isCorrect = selectedChoice === currentListenWord.translation;

            if (isCorrect) {
                button.classList.add('correct');
                listenAnswerDisplay.textContent = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();

                let feedbackMessage = '';
                if (responseTime < 2) {
                    feedbackMessage = 'Perfect! ⚡';
                    speak('Perfect!');
                } else if (responseTime < 3.5) {
                    feedbackMessage = 'Good! 👍';
                    speak('Good!');
                } else if (responseTime < 6) {
                    feedbackMessage = 'Faster! ⏰';
                    speak('Faster!');
                } else {
                    feedbackMessage = 'Too late... 😴';
                    speak('Too late...');
                }

                timerFeedback.textContent = `${feedbackMessage} (It took you ${responseTime.toFixed(1)} seconds.)`;
                timerFeedback.className = 'timer-feedback correct';
            } else {
                button.classList.add('incorrect');
                document.querySelectorAll('.choice-button').forEach(btn => {
                    if (btn.textContent === currentListenWord.translation) {
                        btn.classList.add('correct');
                    }
                });

                timerFeedback.textContent = 'You missed! 😓❌';
                timerFeedback.className = 'timer-feedback incorrect';
                speak('You missed!');
                listenAnswerDisplay.textContent = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
            }
        }

        listenChooseBtn.addEventListener('click', startListenAndChooseQuiz);

        listenSpeaker.addEventListener('click', () => {
            if (currentListenWord && !isAnswered) {
                const cleanWord = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                speak(cleanWord);
                if (!questionStartTime) {
                    questionStartTime = Date.now();
                }
            }
        });

        listenNextBtn.addEventListener('click', nextListenQuestion);

        listenCloseBtn.addEventListener('click', () => {
            listenChooseModal.style.display = 'none';
        });

        // ===== ENGLISH TO CHINESE QUIZ =====
        englishToChineseBtn.addEventListener('click', () => {
            currentEnglishQuizWords = vocabularyData.filter(item => item.selected);
            if (currentEnglishQuizWords.length === 0) {
                alert('Please select at least one vocabulary word to start the quiz. (請選擇至少一個單字以進行測驗)');
                return;
            }
            startEnglishToChineseQuiz();
        });

        checkAnswerBtn.addEventListener('click', showChineseAnswer);
        englishNextBtn.addEventListener('click', nextEnglishQuestion);

        englishCloseBtn.addEventListener('click', () => {
            englishToChineseModal.style.display = 'none';
        });

        englishWordSpeaker.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (isSpeaking) {
                console.log('Already speaking, ignoring click');
                return;
            }

            if (currentEnglishWord) {
                isSpeaking = true;
                const cleanWord = currentEnglishWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                console.log('About to speak:', cleanWord);
                speak(cleanWord);

                setTimeout(() => {
                    isSpeaking = false;
                }, 3000);
            }
        });

        function startEnglishToChineseQuiz() {
            console.log('Starting English to Chinese quiz');
            console.log('Voices loaded:', voicesLoaded, 'Voice count:', voices.length);

            if (!voicesLoaded || voices.length === 0) {
                console.log('Loading voices before starting quiz...');
                loadVoices().then(() => {
                    console.log('Voices loaded, starting quiz');
                    resetEnglishToChineseQuiz();
                    englishToChineseModal.style.display = 'flex';
                    nextEnglishQuestion();
                });
            } else {
                resetEnglishToChineseQuiz();
                englishToChineseModal.style.display = 'flex';
                nextEnglishQuestion();
            }
        }

        function resetEnglishToChineseQuiz() {
            currentEnglishWordIndex = -1;
            currentEnglishWord = null;
            chineseAnswerDisplay.style.display = 'none';
            checkQuestion.style.display = 'none';
            checkAnswerBtn.style.display = 'block';

            if (quizMode === 'sequential') {
                initializeSectionProgress();
            }
        }

        function nextEnglishQuestion() {
            chineseAnswerDisplay.style.display = 'none';
            checkQuestion.style.display = 'none';
            checkAnswerBtn.style.display = 'block';

            if (quizMode === 'sequential') {
                if (currentEnglishWordIndex === -1) {
                    const firstSection = sectionOrder.find(section =>
                        sectionProgress[section] && sectionProgress[section].totalCount > 0
                    );
                    if (firstSection) {
                        sectionProgress[firstSection].currentIndex = 0;
                        currentEnglishWord = sectionProgress[firstSection].items[0];
                        currentEnglishWordIndex = 0;
                    } else {
                        currentEnglishWordIndex = 0;
                        currentEnglishWord = currentEnglishQuizWords[0];
                    }
                } else {
                    const currentSection = currentEnglishWord.section;
                    const sectionData = sectionProgress[currentSection];

                    if (sectionData && sectionData.currentIndex + 1 < sectionData.totalCount) {
                        sectionData.currentIndex++;
                        currentEnglishWord = sectionData.items[sectionData.currentIndex];
                    } else {
                        const currentSectionIndex = sectionOrder.indexOf(currentSection);
                        let nextSectionIndex = currentSectionIndex + 1;

                        while (nextSectionIndex < sectionOrder.length) {
                            const nextSection = sectionOrder[nextSectionIndex];
                            if (sectionProgress[nextSection] && sectionProgress[nextSection].totalCount > 0) {
                                sectionProgress[nextSection].currentIndex = 0;
                                currentEnglishWord = sectionProgress[nextSection].items[0];
                                break;
                            }
                            nextSectionIndex++;
                        }

                        if (nextSectionIndex >= sectionOrder.length) {
                            const firstSection = sectionOrder.find(section =>
                                sectionProgress[section] && sectionProgress[section].totalCount > 0
                            );
                            if (firstSection) {
                                sectionProgress[firstSection].currentIndex = 0;
                                currentEnglishWord = sectionProgress[firstSection].items[0];
                            }
                        }
                    }

                    currentEnglishWordIndex = currentEnglishQuizWords.findIndex(item =>
                        item.vocabulary === currentEnglishWord.vocabulary &&
                        item.translation === currentEnglishWord.translation
                    );
                }
            } else {
                const previousIndex = currentEnglishWordIndex;
                if (currentEnglishQuizWords.length === 1) {
                    currentEnglishWordIndex = 0;
                } else {
                    do {
                        currentEnglishWordIndex = Math.floor(Math.random() * currentEnglishQuizWords.length);
                    } while (currentEnglishWordIndex === previousIndex && currentEnglishQuizWords.length > 1);
                }
                currentEnglishWord = currentEnglishQuizWords[currentEnglishWordIndex];
            }

            const cleanWord = currentEnglishWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            englishWordDisplay.textContent = cleanWord;
            updateProgressDisplay();
        }

        function showChineseAnswer() {
            if (!currentEnglishWord) return;

            chineseAnswerDisplay.textContent = currentEnglishWord.translation;
            chineseAnswerDisplay.style.display = 'block';
            checkQuestion.style.display = 'block';
            checkAnswerBtn.style.display = 'none';
        }

        // ===== MAIN QUIZ =====
        startBtn.addEventListener('click', () => {
            currentQuizWords = vocabularyData.filter(item => item.selected);
            if (currentQuizWords.length === 0) {
                alert('Please select at least one vocabulary word to start the quiz. (請選擇至少一個單字以進行測驗)');
                return;
            }
            startQuiz();
        });

        function startQuiz() {
            resetQuiz();
            quizModal.style.display = 'flex';
            nextQuestion();
        }

        function resetQuiz() {
            currentWordIndex = -1;
            currentWord = null;
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
        }

        function nextQuestion() {
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';

            if (quizMode === 'sequential') {
                currentWordIndex = (currentWordIndex + 1) % currentQuizWords.length;
            } else {
                const previousIndex = currentWordIndex;
                if (currentQuizWords.length === 1) {
                    currentWordIndex = 0;
                } else {
                    do {
                        currentWordIndex = Math.floor(Math.random() * currentQuizWords.length);
                    } while (currentWordIndex === previousIndex && currentQuizWords.length > 1);
                }
            }

            currentWord = currentQuizWords[currentWordIndex];
            translationPrompt.textContent = currentWord.translation;
        }

        function submitAnswer() {
            if (!currentWord) return;

            const userAnswer = answerInput.value.trim().toLowerCase();
            const correctAnswers = currentWord.vocabulary
                .split('/')
                .map(ans => ans.replace(/\(.*?\)/g, '').trim().toLowerCase());

            const normalizedUserAnswer = userAnswer.replace(/[.,?'''.../#!$%\^&\*;:{}=\-_`~()]/g, "");

            const isCorrect = correctAnswers.some(answer => {
                const normalizedAnswer = answer.replace(/[.,?'''.../#!$%\^&\*;:{}=\-_`~()]/g, "");
                return normalizedUserAnswer === normalizedAnswer;
            });

            if (isCorrect) {
                feedbackEl.textContent = 'Well done! 🏆😊👍';
                feedbackEl.className = 'feedback correct';
                speak('Well done!');
            } else {
                feedbackEl.textContent = 'Try again! 🔥🔥🔥';
                feedbackEl.className = 'feedback incorrect';
                speak('Try again!');
            }
        }

        function showHint() {
            if (!currentWord) return;
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            const firstLetter = correctAnswer.charAt(0).toUpperCase();
            hintTextEl.textContent = `It starts with the letter ${firstLetter}.`;
        }

        function showAnswer() {
            if (!currentWord) return;
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
            revealAnswerEl.textContent = `${correctAnswer}`;
            speak(correctAnswer);
        }

        submitBtn.addEventListener('click', submitAnswer);

        answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                submitAnswer();
            }
        });

        speakBtn.addEventListener('click', () => {
            if (!recognition) {
                alert('Speech recognition is not supported in your browser.');
                return;
            }

            try {
                if (speakBtn.textContent === '🎤 Speak') {
                    recognition.start();
                    speakBtn.textContent = 'Recording';
                    speakBtn.classList.add('recording');
                } else {
                    recognition.stop();
                    speakBtn.textContent = '🎤 Speak';
                    speakBtn.classList.remove('recording');
                }
            } catch (error) {
                console.error('Speech recognition error:', error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            }
        });

        hintBtn.addEventListener('click', showHint);
        answerBtn.addEventListener('click', showAnswer);
        nextBtn.addEventListener('click', nextQuestion);

        closeBtn.addEventListener('click', () => {
            quizModal.style.display = 'none';
            if (recognition) {
                recognition.stop();
            }
        });

        // ===== DATE INFORMATION =====
        function updateDateInfo() {
            const dateInfoEl = document.getElementById('date-info');
            const options = {
                timeZone: 'Asia/Taipei',
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            };

            const today = new Date();
            const taiwanDate = today.toLocaleDateString('en-US', options);

            const examDate = new Date('October 14, 2025');
            examDate.setHours(0, 0, 0, 0);
            const todayNoTime = new Date(today);
            todayNoTime.setHours(0, 0, 0, 0);
            const daysUntilExam = Math.ceil((examDate - todayNoTime) / (1000 * 60 * 60 * 24));

            const collegeExamDate = new Date('January 16, 2026');
            collegeExamDate.setHours(0, 0, 0, 0);
            const daysUntilCollegeExam = Math.ceil((collegeExamDate - todayNoTime) / (1000 * 60 * 60 * 24));

            dateInfoEl.innerHTML = `
                <span><span class="emoji">📅</span>${taiwanDate}</span><br>
                <span><span class="emoji">⏰</span><span class="countdown">${daysUntilExam}</span> days until 段考</span>
                <span><span class="emoji">📚</span><span class="countdown">${daysUntilCollegeExam}</span> days until 115年學測</span>
            `;
        }

        updateDateInfo();
        setInterval(updateDateInfo, 60000);

        // ===== INITIALIZATION =====
        document.addEventListener('DOMContentLoaded', () => {
            initializeTTS();

            const refreshReminderPopup = document.getElementById('refresh-reminder-popup');
            setTimeout(() => {
                refreshReminderPopup.style.display = 'flex';
            }, 1000);

            const closeReminderBtn = document.getElementById('close-reminder-btn');
            closeReminderBtn.addEventListener('click', () => {
                refreshReminderPopup.style.display = 'none';
            });
        });

        document.addEventListener('click', function initOnFirstClick() {
            initializeTTS();
            document.removeEventListener('click', initOnFirstClick);
        }, { once: true });

        // ===== FIREBASE VISITOR COUNTER =====
        function initVisitorCounter() {
            const firebaseConfig = {
                apiKey: "AIzaSyBFhmaAZmBtsM5DKoxgy1G-RouRKsrjYsA",
                authDomain: "vocab-builder-visitor-counter.firebaseapp.co",
                databaseURL: "https://vocab-builder-visitor-counter-default-rtdb.asia-southeast1.firebasedatabase.app/",
                projectId: "vocab-builder-visitor-counter",
                storageBucket: "vocab-builder-visitor-counter.firebasestorage.app",
                messagingSenderId: "648587683861",
                appId: "1:648587683861:web:dcb777160dabb4cbf8c61c"
            };

            firebase.initializeApp(firebaseConfig);
            const database = firebase.database();

            const today = new Date();
            const taiwanDate = new Date(today.toLocaleString('en-US', { timeZone: 'Asia/Taipei' }));
            const dateStr = taiwanDate.getFullYear() + '-' +
                (taiwanDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                taiwanDate.getDate().toString().padStart(2, '0');

            const visitorCountRef = database.ref('visitorCount/' + dateStr);

            function updateVisitorDisplay(count) {
                const visitorCountEl = document.getElementById('visitor-count');
                if (count === 1) {
                    visitorCountEl.innerHTML = `👋 ${count} person has visited this website today.`;
                } else {
                    visitorCountEl.innerHTML = `👋 ${count} people have visited this website today.`;
                }
            }

            const hasVisitedToday = localStorage.getItem('visited_' + dateStr);

            if (!hasVisitedToday) {
                visitorCountRef.transaction((currentCount) => {
                    return (currentCount || 0) + 1;
                }, (error, committed, snapshot) => {
                    if (error) {
                        console.error('Transaction failed:', error);
                    } else if (committed) {
                        localStorage.setItem('visited_' + dateStr, 'true');
                        updateVisitorDisplay(snapshot.val());
                    }
                });
            } else {
                visitorCountRef.once('value', (snapshot) => {
                    const count = snapshot.val() || 0;
                    updateVisitorDisplay(count);
                });
            }

            visitorCountRef.on('value', (snapshot) => {
                const count = snapshot.val() || 0;
                updateVisitorDisplay(count);
            });
        }

        try {
            initVisitorCounter();
        } catch (e) {
            console.error("Error initializing visitor counter:", e);
            document.getElementById('visitor-count').innerHTML = "😅 Visitor count unavailable";
        }
    </script>
</body>
</html>
