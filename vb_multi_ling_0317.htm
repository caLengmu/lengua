<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multilingual Vocabulary Quiz</title>
    <style>
        :root {
            --primary: #D16B54; /* Vermilion */
            --secondary: #8C4030; /* Rust */
            --accent1: #80B4A3; /* Celadon */
            --accent2: #F9BF45; /* Mustard */
            --accent3: #645280; /* Lavender */
            --background: #F2E8DC; /* Rice paper */
            --text: #483729; /* Walnut */
            --light-text: #7D6B57; /* Cedar */
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--background);
            color: var(--text);
            line-height: 1.6;
            padding: 20px;
            max-width: 1200px;
            margin: 0 auto;
        }

        h1 {
            text-align: center;
            color: var(--secondary);
            margin-bottom: 30px;
            font-size: 32px;
        }

        .container {
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 8px;
            padding: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .download-link {
            color: var(--accent3);
            text-decoration: none;
            padding: 8px 16px;
            background-color: rgba(100, 82, 128, 0.1);
            border-radius: 4px;
            transition: all 0.3s ease;
        }

        .download-link:hover {
            background-color: rgba(100, 82, 128, 0.2);
        }

        button {
            cursor: pointer;
            border: none;
            border-radius: 4px;
            padding: 10px 20px;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        #import-btn {
            background-color: var(--accent1);
            color: white;
        }

        #import-btn:hover {
            background-color: #6D9A8A;
        }

        #start-btn {
            background-color: var(--primary);
            color: white;
            font-size: 18px;
            padding: 12px 24px;
            margin: 20px auto;
            display: block;
        }

        #start-btn:hover {
            background-color: #BC5A45;
        }

        .vocabulary-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .vocabulary-table th {
            background-color: var(--secondary);
            color: white;
            padding: 12px;
            text-align: left;
        }

        .vocabulary-table td {
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }

        .vocabulary-table tr:hover {
            background-color: rgba(249, 191, 69, 0.1);
        }

        .language-select {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid var(--light-text);
            background-color: white;
            margin-bottom: 10px;
            color: var(--text);
        }

        .speed-select {
            padding: 6px;
            border-radius: 4px;
            border: 1px solid var(--light-text);
            background-color: white;
            color: var(--text);
            margin-left: 10px;
            font-size: 14px;
        }

        .speaker-icon {
            cursor: pointer;
            background: none;
            border: none;
            color: var(--accent3);
            font-size: 20px;
            padding: 0;
            margin-left: 10px;
            vertical-align: middle;
        }

        .speaker-icon:hover {
            color: var(--primary);
        }

        /* Select all checkbox styling */
        #select-all {
            margin-right: 8px;
        }

        .checkbox-container {
            display: flex;
            align-items: center;
        }

        .word-checkbox {
            width: 18px;
            height: 18px;
            cursor: pointer;
        }

        /* Modal/Quiz Popup Styling */
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: var(--background);
            margin: 10% auto;
            padding: 30px;
            border-radius: 8px;
            max-width: 500px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        .prompt {
            font-size: 24px;
            margin-bottom: 25px;
            text-align: center;
            color: var(--secondary);
        }

        .answer-container {
            margin-bottom: 20px;
        }

        #answer-input {
            width: 100%;
            padding: 12px;
            border-radius: 4px;
            border: 1px solid var(--light-text);
            font-size: 18px;
            margin-bottom: 15px;
        }

        .quiz-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        #submit-btn {
            background-color: var(--primary);
            color: white;
            grid-column: span 2;
        }

        #submit-btn:hover {
            background-color: #BC5A45;
        }

        #speak-btn {
            background-color: var(--accent2);
            color: var(--text);
        }

        #speak-btn:hover {
            background-color: #E0AC3E;
        }

        #hint-btn {
            background-color: var(--accent1);
            color: white;
        }

        #hint-btn:hover {
            background-color: #6D9A8A;
        }

        #next-btn {
            background-color: var(--accent3);
            color: white;
        }

        #next-btn:hover {
            background-color: #564470;
        }

        #close-btn {
            background-color: var(--light-text);
            color: white;
        }

        #close-btn:hover {
            background-color: #6C5C4A;
        }

        .result {
            margin-top: 15px;
            text-align: center;
            font-size: 20px;
            font-weight: bold;
            height: 30px;
        }

        .hint-text {
            margin-top: 10px;
            font-style: italic;
            color: var(--accent3);
            text-align: center;
            min-height: 24px;
        }

        /* File input hidden but accessible */
        #file-input {
            display: none;
        }

        /* Hide table initially */
        #vocabulary-container {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Multilingual Vocabulary Builder</h1>
        
        <div class="controls">
            <a href="https://drive.google.com/drive/folders/1m--fVtzTCv7bLUCduCBoja6K8-8LOy6q?usp=drive_link" class="download-link" target="_blank">Download Excel</a>
            <div>
                <input type="file" id="file-input" accept=".xlsx, .xls">
                <button id="import-btn">Import Excel</button>
            </div>
        </div>
        
        <div id="vocabulary-container">
            <button id="start-btn">Start Learning!</button>
            
            <table class="vocabulary-table">
                <thead>
                    <tr>
                        <th>
                            <select id="vocabulary-language" class="language-select">
                                <option value="ja-JP">日本語 (ja-JP)</option>
                                <option value="ko-KR">한국어 (ko-KR)</option>
                                <option value="es-ES">español (es-ES)</option>
                                <option value="en-US">English (en-US)</option>
                            </select>
                            <select id="tts-speed" class="speed-select">
                                <option value="1">1x</option>
                                <option value="0.8">0.8x</option>
                                <option value="0.6">0.6x</option>
                            </select>
                            Vocabulary
                        </th>
                        <th>
                            <select id="translation-language" class="language-select">
                                <option value="en-US">English (en-US)</option>
                                <option value="ja-JP">日本語 (ja-JP)</option>
                                <option value="ko-KR">한국어 (ko-KR)</option>
                                <option value="es-ES">español (es-ES)</option>
                            </select>
                            Translation
                        </th>
                        <th>
                            <div class="checkbox-container">
                                <input type="checkbox" id="select-all" class="word-checkbox">
                                <label for="select-all">Select All</label>
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody id="vocabulary-body">
                    <!-- Data will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Quiz Modal -->
    <div id="quiz-modal" class="modal">
        <div class="modal-content">
            <div class="prompt" id="prompt-text">Say "..." in another language</div>
            
            <div class="answer-container">
                <input type="text" id="answer-input" placeholder="Type your answer here">
            </div>
            
            <div class="quiz-buttons">
                <button id="submit-btn">Submit</button>
                <button id="speak-btn">Speak</button>
                <button id="hint-btn">Hint</button>
                <button id="next-btn">Next</button>
                <button id="close-btn">Close</button>
            </div>
            
            <div class="result" id="result-text"></div>
            <div class="hint-text" id="hint-text"></div>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        // Global variables
        let vocabData = [];
        let selectedWords = [];
        let currentWordIndex = -1;
        let recognition = null;
        
        // DOM elements
        const fileInput = document.getElementById('file-input');
        const importBtn = document.getElementById('import-btn');
        const startBtn = document.getElementById('start-btn');
        const vocabContainer = document.getElementById('vocabulary-container');
        const vocabBody = document.getElementById('vocabulary-body');
        const selectAll = document.getElementById('select-all');
        const quizModal = document.getElementById('quiz-modal');
        const promptText = document.getElementById('prompt-text');
        const answerInput = document.getElementById('answer-input');
        const submitBtn = document.getElementById('submit-btn');
        const speakBtn = document.getElementById('speak-btn');
        const hintBtn = document.getElementById('hint-btn');
        const nextBtn = document.getElementById('next-btn');
        const closeBtn = document.getElementById('close-btn');
        const resultText = document.getElementById('result-text');
        const hintText = document.getElementById('hint-text');
        const vocabLanguage = document.getElementById('vocabulary-language');
        const translationLanguage = document.getElementById('translation-language');
        const ttsSpeed = document.getElementById('tts-speed');
        
        // Event listeners
        importBtn.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', handleFileUpload);
        startBtn.addEventListener('click', startQuiz);
        selectAll.addEventListener('change', toggleSelectAll);
        submitBtn.addEventListener('click', checkAnswer);
        speakBtn.addEventListener('click', toggleSpeechRecognition);
        hintBtn.addEventListener('click', showHint);
        nextBtn.addEventListener('click', nextWord);
        closeBtn.addEventListener('click', closeQuiz);
        answerInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                checkAnswer();
            }
        });
        
        // Function to handle file upload - FIXED VERSION
        function handleFileUpload(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];
                    
                    // Convert Excel data to array of objects with specific columns
                    // This is more reliable than sheet_to_json for handling various Excel formats
                    const range = XLSX.utils.decode_range(worksheet['!ref']);
                    vocabData = [];
                    
                    // Get header row for column identification
                    const headers = [];
                    for (let C = range.s.c; C <= range.e.c; ++C) {
                        const cell = worksheet[XLSX.utils.encode_cell({r: range.s.r, c: C})];
                        headers[C] = cell ? cell.v : undefined;
                    }
                    
                    // Process data rows
                    for (let R = range.s.r + 1; R <= range.e.r; ++R) {
                        const vocab = worksheet[XLSX.utils.encode_cell({r: R, c: 0})];
                        const translation = worksheet[XLSX.utils.encode_cell({r: R, c: 1})];
                        
                        if (vocab && translation) {
                            vocabData.push({
                                vocabulary: vocab.v.toString(),
                                translation: translation.v.toString()
                            });
                        }
                    }
                    
                    // Display data in table
                    renderVocabulary();
                    vocabContainer.style.display = 'block';
                    
                    console.log("Imported vocabulary data:", vocabData);
                } catch (error) {
                    console.error("Error processing Excel file:", error);
                    alert("Error processing the Excel file. Please check the format and try again.");
}
            };
            reader.readAsArrayBuffer(file);
        }
        
        // Function to render vocabulary table - FIXED VERSION
        function renderVocabulary() {
            vocabBody.innerHTML = '';
            
            vocabData.forEach((item, index) => {
                // Extract vocabulary and translation directly from our fixed data structure
                const vocab = item.vocabulary || '';
                const translation = item.translation || '';
                
                const row = document.createElement('tr');
                
                // Vocabulary column
                const vocabCell = document.createElement('td');
                vocabCell.textContent = vocab;
                const speakerIcon = document.createElement('button');
                speakerIcon.innerHTML = '🔊';
                speakerIcon.className = 'speaker-icon';
                speakerIcon.setAttribute('data-text', removeBracketContent(vocab));
                speakerIcon.addEventListener('click', function() {
                    speakText(this.getAttribute('data-text'), vocabLanguage.value, parseFloat(ttsSpeed.value));
                });
                vocabCell.appendChild(speakerIcon);
                row.appendChild(vocabCell);
                
                // Translation column
                const translationCell = document.createElement('td');
                translationCell.textContent = translation;
                const translationSpeakerIcon = document.createElement('button');
                translationSpeakerIcon.innerHTML = '🔊';
                translationSpeakerIcon.className = 'speaker-icon';
                translationSpeakerIcon.setAttribute('data-text', removeBracketContent(translation));
                translationSpeakerIcon.addEventListener('click', function() {
                    speakText(this.getAttribute('data-text'), translationLanguage.value, parseFloat(ttsSpeed.value));
                });
                translationCell.appendChild(translationSpeakerIcon);
                row.appendChild(translationCell);
                
                // Checkbox column
                const checkboxCell = document.createElement('td');
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'word-checkbox';
                checkbox.setAttribute('data-index', index);
                checkboxCell.appendChild(checkbox);
                row.appendChild(checkboxCell);
                
                vocabBody.appendChild(row);
            });
        }
        
        // Function to remove content in parentheses for TTS
        function removeBracketContent(text) {
            return text.replace(/\([^)]*\)/g, '').trim();
        }
        
        // Function to speak text using Web Speech API
        function speakText(text, language, rate = 1) {
            if (!text) return;
            
            // Cancel any ongoing speech
            window.speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = language;
            utterance.rate = rate;
            
            window.speechSynthesis.speak(utterance);
        }
        
        // Function to toggle select all checkboxes
        function toggleSelectAll() {
            const checkboxes = document.querySelectorAll('.word-checkbox');
            checkboxes.forEach(checkbox => {
                if (checkbox !== selectAll) {
                    checkbox.checked = selectAll.checked;
                }
            });
        }
        
        // Function to start quiz
        function startQuiz() {
            // Get selected words
            selectedWords = [];
            const checkboxes = document.querySelectorAll('.word-checkbox');
            
            checkboxes.forEach(checkbox => {
                if (checkbox !== selectAll && checkbox.checked) {
                    const index = parseInt(checkbox.getAttribute('data-index'));
                    if (!isNaN(index) && index >= 0 && index < vocabData.length) {
                        selectedWords.push(index);
                    }
                }
            });
            
            if (selectedWords.length === 0) {
                alert("Please select at least one vocabulary word.");
                return;
            }
            
            // Shuffle selected words
            shuffleArray(selectedWords);
            currentWordIndex = 0;
            
            // Show quiz modal and reset state
            quizModal.style.display = 'block';
            answerInput.value = '';
            resultText.textContent = '';
            hintText.textContent = '';
            
            // Display first word
            displayCurrentWord();
        }
        
        // Function to display current word - FIXED VERSION
        function displayCurrentWord() {
            if (selectedWords.length === 0) return;
            
            const wordIndex = selectedWords[currentWordIndex];
            const wordData = vocabData[wordIndex];
            
            // Use our fixed data structure
            const vocabulary = wordData.vocabulary || '';
            const translation = wordData.translation || '';
            
            // Update prompt with current translation
            const cleanTranslation = removeBracketContent(translation);
            promptText.textContent = `Say "${cleanTranslation}" in another language.`;
            
            // Reset input and results
            answerInput.value = '';
            resultText.textContent = '';
            hintText.textContent = '';
            
            // Focus on the answer input
            setTimeout(() => {
                answerInput.blur(); // Ensure focus doesn't automatically go to input field
            }, 0);
        }
        
        // Function to check answer - FIXED VERSION
        function checkAnswer() {
            if (selectedWords.length === 0) return;
            
            const wordIndex = selectedWords[currentWordIndex];
            const wordData = vocabData[wordIndex];
            
            // Use our fixed data structure
            const vocabulary = removeBracketContent(wordData.vocabulary || '').toLowerCase();
            const userAnswer = answerInput.value.trim().toLowerCase();
            
            // Handle slash-separated answers (accept either part)
            let correctAnswers = vocabulary.split('/').map(ans => ans.trim());
            let isCorrect = correctAnswers.some(ans => 
                normalizeAnswer(ans) === normalizeAnswer(userAnswer)
            );
            
            if (isCorrect) {
                resultText.textContent = "Well done!";
                resultText.style.color = "#4CAF50";
                speakText("Well done!", "en-US");
            } else {
                resultText.textContent = "Try again!";
                resultText.style.color = "#F44336";
                speakText("Try again!", "en-US");
            }
        }
        
        // Normalize answer by removing punctuation and converting to lowercase
        function normalizeAnswer(text) {
            return text.toLowerCase().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, "").trim();
        }
        
        // Function to show hint - FIXED VERSION
        function showHint() {
            if (selectedWords.length === 0) return;
            
            const wordIndex = selectedWords[currentWordIndex];
            const wordData = vocabData[wordIndex];
            
            // Use our fixed data structure
            const vocabulary = removeBracketContent(wordData.vocabulary || '');
            
            // Get first letter (handling slash-separated alternatives)
            let firstWord = vocabulary.split('/')[0].trim();
            let firstLetter = firstWord.charAt(0).toUpperCase();
            
            hintText.textContent = `The answer starts with ${firstLetter}.`;
        }
        
        // Function to go to next word
        function nextWord() {
            if (selectedWords.length === 0) return;
            
            currentWordIndex = (currentWordIndex + 1) % selectedWords.length;
            displayCurrentWord();
        }
        
        // Function to close quiz
        function closeQuiz() {
            quizModal.style.display = 'none';
            stopSpeechRecognition();
        }
        
        // Function to toggle speech recognition
        function toggleSpeechRecognition() {
            if (recognition && recognition.recording) {
                stopSpeechRecognition();
            } else {
                startSpeechRecognition();
            }
        }
        
        // Function to start speech recognition
        function startSpeechRecognition() {
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                alert("Sorry, your browser doesn't support speech recognition.");
                return;
            }
            
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            recognition = new SpeechRecognition();
            recognition.lang = vocabLanguage.value;
            recognition.continuous = false;
            recognition.interimResults = false;
            recognition.recording = true;
            
            speakBtn.textContent = "Recording...";
            speakBtn.style.backgroundColor = "#F44336";
            
            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript.toLowerCase();
                answerInput.value = transcript;
                checkAnswer();
            };
            
            recognition.onend = function() {
                stopSpeechRecognition();
            };
            
            recognition.onerror = function(event) {
                console.error("Speech recognition error", event.error);
                stopSpeechRecognition();
            };
            
            recognition.start();
        }
        
        // Function to stop speech recognition
        function stopSpeechRecognition() {
            if (recognition) {
                recognition.stop();
                recognition.recording = false;
                speakBtn.textContent = "Speak";
                speakBtn.style.backgroundColor = "";
            }
        }
        
        // Utility function to shuffle array
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }
        
        // Update speaker icons when language selection changes
        vocabLanguage.addEventListener('change', function() {
            const speakerIcons = document.querySelectorAll('#vocabulary-body tr td:first-child .speaker-icon');
            speakerIcons.forEach(icon => {
                icon.onclick = function() {
                    speakText(this.getAttribute('data-text'), vocabLanguage.value, parseFloat(ttsSpeed.value));
                };
            });
        });
        
        translationLanguage.addEventListener('change', function() {
            const speakerIcons = document.querySelectorAll('#vocabulary-body tr td:nth-child(2) .speaker-icon');
            speakerIcons.forEach(icon => {
                icon.onclick = function() {
                    speakText(this.getAttribute('data-text'), translationLanguage.value, parseFloat(ttsSpeed.value));
                };
            });
        });
    </script>
</body>
</html>