<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vocab Builder</title>
    <style>
        :root {
            --primary: #D33E43;
            --secondary: #F8B500;
            --accent1: #5D9CEC;
            --accent2: #77B28C;
            --accent3: #A06CD5;
--accent4: #51A8DD;  /* 群青 */
            --dark: #2D2D2A;
            --light: #F8F3E6;
            --mid: #888888;
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--light);
            color: var(--dark);
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.5;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
        }

        .tts-system-selector {
            margin-top: 15px;
            font-size: 16px;
            color: var(--dark);
        }

        .tts-system-selector label {
            font-weight: bold;
            margin-right: 8px;
        }

        .tts-system-selector select {
            padding: 8px 12px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            background-color: white;
            color: var(--dark);
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: border-color 0.2s ease;
        }

        .tts-system-selector select:hover {
            border-color: var(--accent1);
        }

        .tts-system-selector select:focus {
            outline: none;
            border-color: var(--primary);
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            position: relative;
            z-index: 1;
            flex-wrap: wrap;
            gap: 10px;
        }

        .left-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        button {
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        .text-import-btn {
            background-color: var(--secondary);
            color: black;
        }

        .english-to-chinese-btn {
            background-color: var(--accent3);
            color: white;
            padding: 16px 25px;
            font-size: 20px;
        }

        .listen-choose-btn {
            background-color: var(--accent2);
            color: white;
            padding: 16px 25px;
            font-size: 20px;
        }

        .start-btn {
            background-color: var(--primary);
            color: white;
            padding: 16px 25px;
            font-size: 20px;
        }

        .ai-support-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        .quiz-mode-selector {
            background-color: white;
            border: 2px solid var(--mid);
            border-radius: 10px;
            padding: 3px;
            margin: 3px 0;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
        }

        .mode-options {
            display: flex;
            justify-content: space-around;
            gap: 20px;
        }

        .mode-option {
            display: flex;
            align-items: center;
            cursor: pointer;
            padding: 10px 15px;
            border: 2px solid transparent;
            border-radius: 8px;
            transition: all 0.3s ease;
            flex: 1;
            text-align: center;
        }

        .mode-option:hover {
            background-color: rgba(93, 156, 236, 0.1);
            border-color: var(--accent1);
        }

        .mode-option input[type="radio"] {
            margin: 0 8px 0 0;
            transform: scale(1.2);
        }

        .mode-option .option-text {
            font-weight: bold;
            font-size: 16px;
            color: var(--dark);
        }

        .mode-option input[type="radio"]:checked + .option-text {
            color: var(--primary);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            clear: both;
            display: table;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
        }

        tr:nth-child(even) {
            background-color: rgba(0, 0, 0, 0.03);
        }

        tr:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .speaker-icon {
            cursor: pointer;
            color: var(--secondary);
            margin-left: 8px;
            font-size: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--light);
            width: 90%;
            max-width: 500px;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
        }

        .modal h2 {
            margin-top: 0;
            color: var(--primary);
            font-size: 1.8rem;
        }

        .prompt {
            font-size: 24px;
            margin: 20px 0;
            color: var(--dark);
            font-weight: bold;
        }

        .answer-input {
            width: 100%;
            padding: 12px;
            font-size: 18px;
            margin-bottom: 15px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
        }

        .feedback {
            margin: 15px 0;
            font-size: 25px;
            font-weight: bold;
            min-height: 27px;
        }

        .correct {
            color: var(--accent2);
        }

        .incorrect {
            color: var(--primary);
        }

        .hint {
            color: var(--accent1);
            font-style: italic;
            font-size: 25px;
            margin: 10px 0;
            min-height: 24px;
        }

        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .submit-btn {
            background-color: var(--primary);
            color: white;
        }

        .speak-btn {
            background-color: var(--accent1);
            color: white;
        }

        .hint-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        .answer-btn {
            background-color: var(--accent3);
            color: white;
        }

        .next-btn {
            background-color: var(--accent2);
            color: white;
        }

        .close-btn {
            background-color: var(--mid);
            color: white;
        }

        .memory-btn {
            background-color: var(--accent4);
            color: white;
        }

 #edit-custom-content {
            height: 400px;
            font-family: 'Hiragino Sans', 'Meiryo', 'MS Gothic', sans-serif;
        }

        .recording {
            background-color: var(--primary);
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .hidden {
            display: none;
        }

        #file-input {
            display: none;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: var(--mid);
                    }

        .tts-speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .tts-speed-control select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid var(--mid);
            background-color: white;
            font-size: 14px;
        }

        .tts-speed-control label {
            font-weight: bold;
            color: white;
        }

        .reveal-answer {
            color: var(--primary);
            font-weight: bold;
            font-size: 30px;
            margin: 10px 0;
            min-height: 27px;
        }

        .section-header {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
            position: relative;
        }

        .section-header td {
            background-color: var(--dark);
            color: var(--light);
            padding: 10px 15px;
        }

        .collapse-btn {
            background: none;
            border: none;
            color: var(--light);
            font-size: 18px;
            cursor: pointer;
            padding: 0 8px 0 0;
            margin: 0;
            transition: transform 0.2s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 30px;
            box-shadow: none;
        }

        .collapse-btn:hover {
            transform: scale(1.1);
            box-shadow: none;
        }

        .section-collapsed .collapse-btn {
            transform: rotate(-90deg);
        }

        .section-row {
            display: table-row;
            transition: all 0.3s ease;
        }

        .section-row.section-collapsed {
            display: none;
        }

        .section-header .section-title {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .progress-info {
            background-color: var(--accent1);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 16px;
            font-weight: bold;
            margin-bottom: 15px;
            display: inline-block;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .progress-section {
            opacity: 0.8;
            font-size: 14px;
        }

        #text-import-content {
            width: 100%;
            height: 100px;
            padding: 12px;
            margin: 15px 0;
            font-size: 16px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
            resize: vertical;
        }

        #text-import-modal .modal-content {
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .preset-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .button-set {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
            background-color: rgba(0, 0, 0, 0.02);
        }

        .button-set-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .button-set h3 {
            margin: 0;
            font-size: 16px;
            color: var(--dark);
        }

        .preset-btn {
            margin: 5px;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 14px;
            border: none;
            cursor: pointer;
            font-weight: normal;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .textbook-btn {
            background-color: var(--accent1);
            color: white;
        }

        .live-btn {
            background-color: var(--accent2);
            color: white;
        }

        .core-btn {
            background-color: var(--accent3);
            color: white;
        }

        .other-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        #ai-support-modal .modal-content {
            max-width: 600px;
        }

        .ai-support-links {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }

        .ai-support-link {
            background-color: var(--accent1);
            color: white;
            text-decoration: none;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .ai-support-link:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        #listen-choose-modal .modal-content {
            max-width: 100%;
            width: 95%;
            max-height: 95vh;
            padding: 15px;
        }

        .listen-answer-section {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            gap: 15px;
        }

        .listen-answer-display {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary);
            min-height: 30px;
            padding: 10px 15px;
            border: 2px solid var(--mid);
            border-radius: 8px;
            background-color: white;
            flex-grow: 1;
            text-align: center;
        }

        .listen-speaker {
            cursor: pointer;
            color: var(--secondary);
            font-size: 28px;
            padding: 8px;
            border-radius: 50%;
            background-color: rgba(248, 181, 0, 0.1);
            transition: all 0.2s ease;
        }

        .listen-speaker:hover {
            background-color: rgba(248, 181, 0, 0.2);
            transform: scale(1.1);
        }

        .timer-feedback-section {
            margin-bottom: 25px;
            min-height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .timer-feedback {
            font-size: 20px;
            font-weight: bold;
            text-align: center;
        }

        .choices-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-bottom: 25px;
            max-width: 100%;
        }

        .choice-button {
            padding: 15px 10px;
            border: 2px solid var(--mid);
            border-radius: 8px;
            background-color: white;
            color: var(--dark);
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            line-height: 1.3;
        }

        .choice-button:hover {
            background-color: var(--accent1);
            color: white;
            border-color: var(--accent1);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .choice-button.correct {
            background-color: var(--accent2);
            color: white;
            border-color: var(--accent2);
        }

        .choice-button.incorrect {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .choice-button:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

        .listen-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .listen-next-btn {
            background-color: var(--accent2);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        .listen-close-btn {
            background-color: var(--mid);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        .date-info {
            position: absolute;
            top: 20px;
            right: 20px;
            text-align: right;
            font-size: 14px;
            line-height: 1.6;
            color: var(--dark);
            background-color: rgba(255, 255, 255, 0.9);
            padding: 10px 15px;
            border-radius: 8px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            gap: 5px;
            font-weight: bold;
            max-width: 90%;
            z-index: 10;
        }

        .date-info span {
            display: flex;
            align-items: center;
            white-space: nowrap;
        }

        .date-info .emoji {
            margin-right: 8px;
            font-size: 16px;
        }

        .date-info .countdown {
            color: var(--primary);
            margin: 0 3px;
        }

        .visitor-counter {
            margin-top: 40px;
            text-align: center;
            padding: 15px;
            color: var(--dark);
            font-size: 16px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        #visitor-count {
            font-weight: bold;
        }

        .popup-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-content {
            background-color: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 500px;
            text-align: center;
        }

        .popup-layout {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .pikachu-image {
            width: 150px;
            flex-shrink: 0;
        }

        .pikachu-image img {
            width: 100%;
            height: auto;
        }

        .speech-bubble {
            position: relative;
            background-color: #FFFDE7;
            border: 2px solid var(--secondary);
            border-radius: 15px;
            padding: 15px;
            margin-left: 15px;
        }

        .speech-bubble:before {
            content: "";
            position: absolute;
            left: -15px;
            top: 50%;
            transform: translateY(-50%);
            border-width: 15px 15px 15px 0;
            border-style: solid;
            border-color: transparent var(--secondary) transparent transparent;
        }

        .speech-bubble:after {
            content: "";
            position: absolute;
            left: -12px;
            top: 50%;
            transform: translateY(-50%);
            border-width: 12px 12px 12px 0;
            border-style: solid;
            border-color: transparent #FFFDE7 transparent transparent;
        }

        .english-text {
            font-size: 18px;
            font-weight: bold;
            color: var(--primary);
            margin-bottom: 8px;
        }

        .chinese-text {
            font-size: 16px;
            color: var(--dark);
        }

        .close-reminder-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .close-reminder-btn:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

              @media (max-width: 600px) {
            .button-group {
                flex-direction: column;
            }

            button {
                width: 100%;
            }
                  
            .left-controls {
                justify-content: space-between;
                width: 100%;
            }

            .right-controls {
                justify-content: space-between;
                width: 100%;
            }

            .choices-grid {
                gap: 10px;
            }

            .choice-button {
                padding: 12px 8px;
                font-size: 14px;
                min-height: 50px;
            }

            .listen-answer-display {
                font-size: 20px;
            }

            .listen-speaker {
                font-size: 24px;
            }

            .timer-feedback {
                font-size: 18px;
            }

            .mode-option {
                padding: 10px;
            }

            .preset-buttons {
                grid-template-columns: 1fr;
            }

            .ai-support-links {
                grid-template-columns: 1fr;
            }

            #listen-choose-modal .modal-content {
                width: 98%;
                padding: 10px;
            }

            .popup-layout {
                flex-direction: column;
            }

            .speech-bubble {
                margin-left: 0;
                margin-top: 15px;
            }

            .speech-bubble:before, .speech-bubble:after {
                left: 50%;
                top: -15px;
                transform: translateX(-50%) rotate(90deg);
            }

            .speech-bubble:after {
                top: -12px;
            }

        .toggle-icon {
            cursor: pointer;
            font-size: 20px;
            padding: 5px;
            user-select: none;
        }

.button-set-content {
            display: none;
            gap: 8px;
        }

        .button-set-content.visible {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        }

 .custom-list-item {
            display: flex;
            gap: 8px;
            margin-bottom: 8px;
        }

        .custom-list-item .preset-btn {
            flex: 1;
            background-color: var(--accent4);
            color: white;
        }

        .edit-custom-btn {
            flex: 0 0 50px;
            background-color: var(--light);
            border: 1px solid var(--mid);
            color: var(--dark);
            font-size: 14px;
            padding: 8px;
        }

        .no-custom-lists {
            color: var(--mid);
            font-size: 14px;
            text-align: center;
            padding: 10px;
        }

        @media (max-width: 600px) {
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            button {
                width: 100%;
            }
        }

    </style>
</head>

<body>
    <header>
        <div id="date-info" class="date-info"></div>
        <h1>🎯 Vocabulary Builder (10.13 新功能測試)</h1>
        <div class="tts-system-selector">
            <label for="tts-system">System: </label>
            <select id="tts-system">
                <option value="android" selected>Android</option>
                <option value="ios">iOS</option>
            </select>
        </div>
    </header>

    <div class="controls">
        <div class="left-controls">
            <button class="text-import-btn" id="text-import-btn">📝 Load Vocab</button>
        </div>
        <button class="english-to-chinese-btn" id="english-to-chinese-btn" disabled>👀 看英想中</button>
        <button class="listen-choose-btn" id="listen-choose-btn" disabled>🎧 聽英選中</button>
        <button class="start-btn" id="start-btn" disabled>🎤 看中唸英</button>
        <button class="ai-support-btn" id="ai-support-btn">💡 AI Support</button>
    </div>

    <div class="quiz-mode-selector">
        <div class="mode-options">
            <label class="mode-option">
                <input type="radio" name="quiz-mode" value="sequential" checked>
                <span class="option-text">➡️ Sequential (按順序)</span>
            </label>
            <label class="mode-option">
                <input type="radio" name="quiz-mode" value="random">
                <span class="option-text">🔀 Random (隨機)</span>
            </label>
        </div>
    </div>

    <table id="vocabulary-table">
        <thead>
            <tr>
                <th>
                    <div class="tts-speed-control">
                        <label for="tts-speed">Vocabulary</label>
                        <select id="tts-speed">
                            <option value="0.6">0.6x</option>
                            <option value="0.8" selected>0.8x</option>
                            <option value="1">1x</option>
                        </select>
                    </div>
                </th>
                <th>Translation</th>
                <th>
                    <label>
                        <input type="checkbox" id="select-all"> Select All
                    </label>
                </th>
            </tr>
        </thead>
        <tbody id="vocabulary-body">
            <tr>
                <td colspan="3" class="no-data">Load the vocabulary to get started (載入字彙以開始學習)</td>
            </tr>
        </tbody>
    </table>

    <!-- Text Import Modal -->
    <div id="text-import-modal" class="modal">
        <div class="modal-content">

            <h2>Load Vocabulary</h2>
                       <div class="button-set">
                <div class="button-set-header">

                    <h3>Textbook</h3>
<span class="toggle-icon" data-toggle="textbook-content">▼</span>
                </div>
                <div class="button-set-content" id="textbook-content">
                    <button class="preset-btn textbook-btn" data-preset="b3l1">B3 L1 (自読)</button>
                    <button class="preset-btn textbook-btn" data-preset="b3l2">B3 L2</button>
                    <button class="preset-btn textbook-btn" data-preset="b3l3">B3 L3</button>
                </div>
</div>
                
            <div class="button-set">
                <div class="button-set-header">

                    <h3>Magazine</h3>
<span class="toggle-icon" data-toggle="magazine-buttons">▼</span>
        </div>
        <div class="button-set-content" id="magazine-buttons">
                    <button class="preset-btn live-btn" data-preset="maga1">U9</button>
                    <button class="preset-btn live-btn" data-preset="maga2">U11</button>
                    <button class="preset-btn live-btn" data-preset="maga3">U4 (自読)</button>
                    <button class="preset-btn live-btn" data-preset="maga4">U13 (自読)</button>
                </div>
</div>

            <div class="button-set">
                <div class="button-set-header">
               
                    <h3>核心字彙</h3>
<span class="toggle-icon" data-toggle="core-buttons">▼</span>
        </div>
        <div class="button-set-content" id="core-buttons">
                    <button class="preset-btn core-btn" data-preset="coreP2U1">P2 U1</button>
                    <button class="preset-btn core-btn" data-preset="coreP2U2">P2 U2</button>
                    <button class="preset-btn core-btn" data-preset="coreP2U3">P2 U3</button>
                </div>
</div>

                <div class="button-set">
                <div class="button-set-header">

                    <h3>🌟 完美體驗</h3>
<span class="toggle-icon" data-toggle="other-buttons">▼</span>
        </div>
        <div class="button-set-content" id="other-buttons">
<button class="preset-btn other-btn" data-preset="other1">Level 4</button>
                    <button class="preset-btn other-btn" data-preset="other2">Level 5</button>
                    <button class="preset-btn other-btn" data-preset="other3">Level 6</button>
                </div>
            </div>

            <div class="button-set">
                <div class="button-set-header">

<h3>📜 Custom Lists</h3>
                    <span class="toggle-icon" data-toggle="custom-content">▼</span>
                </div>
                <div class="button-set-content" id="custom-content">
                    <div id="custom-buttons-container">
                        <p class="no-custom-lists">No custom lists yet</p>
                    </div>
                </div>
            </div>

            <textarea id="text-import-content" placeholder="Enter your vocabulary pairs here..."></textarea>
            <div class="button-group">
                <button id="text-import-submit-btn" class="submit-btn">📂 Load</button>
                <button id="text-import-memory-btn" class="memory-btn">📌 Create Custom</button>
                <button id="text-import-clear-btn" class="hint-btn">🈳 Clear</button>
                <button id="text-import-close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

    <!-- AI Support Modal -->
    <div id="ai-support-modal" class="modal">
        <div class="modal-content">
            <h2>💡 AI Support</h2>
            <div class="ai-support-links">
                <a href="https://chatgpt.com/share/68db5397-e390-800a-88d2-e323314c7e5c" class="ai-support-link" target="_blank">🀄 生成中譯</a>
                <a href="https://chatgpt.com/share/68de901e-41c8-800a-ae85-676758634593" class="ai-support-link" target="_blank">🌟 生成例句+中譯+定義+填空</a>
                <a href="https://chatgpt.com/share/67da57c1-afa4-800a-956f-41b344ca587c" class="ai-support-link" target="_blank">💬 互動問答</a>
                <a href="https://chatgpt.com/share/67f896d4-e3a4-800a-9169-b0f385820e3e" class="ai-support-link" target="_blank">[Quiz] 填空題 ✏️</a>
                <a href="https://chatgpt.com/share/67f7329b-e008-800a-9c06-df50ec1bb977" class="ai-support-link" target="_blank">[Quiz] 中譯英 (入門) 😃</a>
                <a href="https://chatgpt.com/share/67f619dd-d668-800a-af6e-696897e751e7" class="ai-support-link" target="_blank">[Quiz] 中譯英 (學測難度) 😖</a>
            </div>
            <div class="button-group">
                <button id="ai-support-close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

    <!-- English to Chinese Quiz Modal -->
    <div id="english-to-chinese-modal" class="modal">
        <div class="modal-content">
            <div id="english-progress-info" class="progress-info" style="display: none;">
                <span id="english-progress-text"></span>
            </div>
            <div class="prompt">What does this mean?</div>
            <div style="font-size: 28px; font-weight: bold; color: var(--primary); margin: 20px 0; display: flex; align-items: center; justify-content: center; gap: 15px;">
                <span id="english-word-display"></span>
                <span class="speaker-icon" id="english-word-speaker" title="Listen" style="cursor: pointer; color: var(--secondary); font-size: 24px;">🔊</span>
            </div>
            <div id="chinese-answer-display" class="reveal-answer" style="display: none; font-size: 25px"></div>
            <div id="check-question" style="display: none; font-size: 23px; color: var(--accent1); margin-top: 10px;"><b>Did you get it right?</b></div>
            <div style="margin-top: 30px;">
                <button id="check-answer-btn" class="submit-btn" style="width: 100%; margin-bottom: 15px; padding: 15px;">Check Answer</button>
                <div class="button-group">
                    <button id="english-next-btn" class="next-btn">Next</button>
                    <button id="english-close-btn" class="close-btn">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Listen and Choose Modal -->
    <div id="listen-choose-modal" class="modal">
        <div class="modal-content">
            <h2>🎧 Listen and Choose</h2>
            <div class="listen-answer-section">
                <div id="listen-answer-display" class="listen-answer-display">Click the speaker</div>
                <div class="listen-speaker" id="listen-speaker" title="Play Audio">🔊</div>
            </div>
            <div class="timer-feedback-section">
                <div id="timer-feedback" class="timer-feedback"></div>
            </div>
            <div id="choices-grid" class="choices-grid"></div>
            <div class="listen-controls">
                <button id="listen-next-btn" class="listen-next-btn">Next</button>
                <button id="listen-close-btn" class="listen-close-btn">Close</button>
            </div>
        </div>
    </div>

    <!-- Quiz Modal -->
    <div id="quiz-modal" class="modal">
        <div class="modal-content">
            <div id="prompt" class="prompt">Say "<span id="translation-prompt" style="color: var(--primary);"></span>" in English.</div>
            <input type="text" id="answer-input" class="answer-input" placeholder="Type your answer here...">
            <div id="feedback" class="feedback"></div>
            <div id="hint-text" class="hint"></div>
            <div id="reveal-answer" class="reveal-answer"></div>
            <div class="button-group">
                <button id="submit-btn" class="submit-btn">✅ or ❎</button>
                <button id="speak-btn" class="speak-btn">🎤 Speak</button>
                <button id="hint-btn" class="hint-btn">❓ Hint</button>
                <button id="answer-btn" class="answer-btn">🔑 Answer</button>
                <button id="next-btn" class="next-btn">Next</button>
                <button id="close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

<!-- Edit Custom List Modal -->
<div id="edit-custom-modal" class="modal">
<div class="modal-content" style="max-width: 800px; max-height: 90vh; overflow-y: auto;">
<h2>✏️ Edit Custom List Entry</h2>
<textarea id="edit-custom-content" style="width: 100%; height: 400px; padding: 12px; margin: 15px 0; font-size: 16px; border: 2px solid var(--mid); border-radius: 6px; box-sizing: border-box; resize: vertical; font-family: 'Hiragino Sans', 'Meiryo', 'MS Gothic', sans-serif;"></textarea>
<div class="button-group">
<button id="edit-custom-save-btn" class="next-btn">💾 Save</button>
<button id="edit-custom-abort-btn" class="close-btn">🚫 Cancel</button>
<button id="edit-custom-delete-btn" class="hint-btn" style="background-color: var(--primary); color: white;">🗑️ Delete</button>
</div>
</div>
</div>

    <footer class="visitor-counter">
        <div id="visitor-count">👥 Loading visitor count...</div>
    </footer>

    <!-- Refresh Reminder Popup -->
    <div id="refresh-reminder-popup" class="popup-container">
        <div class="popup-content">
            <div class="popup-layout">
                <div class="pikachu-image">
                    <img src="dinotaeng_walking.png" alt="Image Not Found" width="150">
                </div>
                <div class="speech-bubble">
                    <p class="english-text">1.每次使用請點擊「重新整理(refresh)🔄」以獲取更新！</p>
                    <p class="chinese-text">2.iPhone及iPad使用者需將system(系統)切換成iOS，🔊才能正常運作。</p>
                    <p class="chinese-text">3.手機有時會更新「文字轉語音」功能，導致🔊無法運作，重開機即可解決。</p>
                </div>
            </div>
            <button id="close-reminder-btn" class="close-reminder-btn">OK. I got it.</button>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>

    <script>
        // ===== DOM ELEMENTS =====
const customButtonsContainer = document.getElementById('custom-buttons-container');
        const englishToChineseBtn = document.getElementById('english-to-chinese-btn');
        const englishToChineseModal = document.getElementById('english-to-chinese-modal');
        const englishWordDisplay = document.getElementById('english-word-display');
        const englishWordSpeaker = document.getElementById('english-word-speaker');
        const chineseAnswerDisplay = document.getElementById('chinese-answer-display');
        const checkQuestion = document.getElementById('check-question');
        const checkAnswerBtn = document.getElementById('check-answer-btn');
        const englishNextBtn = document.getElementById('english-next-btn');
        const englishCloseBtn = document.getElementById('english-close-btn');
        const englishProgressInfo = document.getElementById('english-progress-info');
        const englishProgressText = document.getElementById('english-progress-text');

        const listenChooseBtn = document.getElementById('listen-choose-btn');
        const listenChooseModal = document.getElementById('listen-choose-modal');
        const listenAnswerDisplay = document.getElementById('listen-answer-display');
        const listenSpeaker = document.getElementById('listen-speaker');
        const timerFeedback = document.getElementById('timer-feedback');
        const choicesGrid = document.getElementById('choices-grid');
        const listenNextBtn = document.getElementById('listen-next-btn');
        const listenCloseBtn = document.getElementById('listen-close-btn');

        const textImportBtn = document.getElementById('text-import-btn');
        const startBtn = document.getElementById('start-btn');
        const aiSupportBtn = document.getElementById('ai-support-btn');
        const vocabularyTable = document.getElementById('vocabulary-table');
        const vocabularyBody = document.getElementById('vocabulary-body');
        const selectAllCheckbox = document.getElementById('select-all');
        const quizModal = document.getElementById('quiz-modal');
        const translationPrompt = document.getElementById('translation-prompt');
        const answerInput = document.getElementById('answer-input');
        const feedbackEl = document.getElementById('feedback');
        const hintTextEl = document.getElementById('hint-text');
        const revealAnswerEl = document.getElementById('reveal-answer');
        const submitBtn = document.getElementById('submit-btn');
        const speakBtn = document.getElementById('speak-btn');
        const hintBtn = document.getElementById('hint-btn');
        const answerBtn = document.getElementById('answer-btn');
        const nextBtn = document.getElementById('next-btn');
        const closeBtn = document.getElementById('close-btn');
        const ttsSpeedSelect = document.getElementById('tts-speed');
        const ttsSystemSelect = document.getElementById('tts-system');

        const textImportModal = document.getElementById('text-import-modal');
        const textImportContent = document.getElementById('text-import-content');
        const textImportSubmitBtn = document.getElementById('text-import-submit-btn');
        const textImportCloseBtn = document.getElementById('text-import-close-btn');
        const textImportClearBtn = document.getElementById('text-import-clear-btn');
        const textImportCopyBtn = document.getElementById('text-import-copy-btn');

        const aiSupportModal = document.getElementById('ai-support-modal');
        const aiSupportCloseBtn = document.getElementById('ai-support-close-btn');
const editCustomModal = document.getElementById('edit-custom-modal');
const editCustomContent = document.getElementById('edit-custom-content');
const editCustomSaveBtn = document.getElementById('edit-custom-save-btn');
const editCustomAbortBtn = document.getElementById('edit-custom-abort-btn');
const editCustomDeleteBtn = document.getElementById('edit-custom-delete-btn');
const textImportMemoryBtn = document.getElementById('text-import-memory-btn');

        // ===== VARIABLES =====
        let isSpeaking = false;
        let vocabularyData = [];
        let currentQuizWords = [];
        let currentWordIndex = -1;
        let currentWord = null;
        let recognition = null;
        let speechRate = 0.8;
        let quizMode = 'sequential';
        let currentEnglishQuizWords = [];
        let currentEnglishWordIndex = -1;
        let currentEnglishWord = null;
        let sectionProgress = {};
        let sectionOrder = [];
        let currentListenQuizWords = [];
        let currentListenWordIndex = -1;
        let currentListenWord = null;
        let questionStartTime = null;
        let isAnswered = false;
        let voices = [];
        let voicesLoaded = false;
        let currentTTSSystem = 'android';
let db = null;
let currentEditingListId = null;

// ===== INDEXEDDB FUNCTIONS =====
function initIndexedDB() {
return new Promise((resolve, reject) => {
const request = indexedDB.open('VocabBuilderDB', 1);

request.onerror = () => {
console.error('IndexedDB error:', request.error);
reject(request.error);
};

request.onsuccess = () => {
db = request.result;
console.log('IndexedDB initialized successfully');
resolve(db);
};

request.onupgradeneeded = (event) => {
db = event.target.result;
if (!db.objectStoreNames.contains('customLists')) {
const objectStore = db.createObjectStore('customLists', { keyPath: 'id', autoIncrement: true });
objectStore.createIndex('name', 'name', { unique: true });
objectStore.createIndex('timestamp', 'timestamp', { unique: false });
}
console.log('IndexedDB object store created');
};
});
}

function saveCustomList(name, content) {
return new Promise((resolve, reject) => {
if (!db) {
reject('Database not initialized');
return;
}

const transaction = db.transaction(['customLists'], 'readwrite');
const objectStore = transaction.objectStore('customLists');

const data = {
name: name,
content: content,
timestamp: Date.now()
};

const request = objectStore.add(data);

request.onsuccess = () => {
console.log('Custom list saved:', name);
resolve(request.result);
};

request.onerror = () => {
console.error('Error saving custom list:', request.error);
reject(request.error);
};
});
}

function getAllCustomLists() {
return new Promise((resolve, reject) => {
if (!db) {
reject('Database not initialized');
return;
}

const transaction = db.transaction(['customLists'], 'readonly');
const objectStore = transaction.objectStore('customLists');
const request = objectStore.getAll();

request.onsuccess = () => {
resolve(request.result);
};

request.onerror = () => {
reject(request.error);
};
});
}

function deleteCustomList(id) {
return new Promise((resolve, reject) => {
if (!db) {
reject('Database not initialized');
return;
}

const transaction = db.transaction(['customLists'], 'readwrite');
const objectStore = transaction.objectStore('customLists');
const request = objectStore.delete(id);

request.onsuccess = () => {
console.log('Custom list deleted:', id);
resolve();
};

request.onerror = () => {
reject(request.error);
};
});
}

function updateCustomList(id, content) {
    return new Promise((resolve, reject) => {
        if (!db) {
            reject('Database not initialized');
            return;
        }

        const transaction = db.transaction(['customLists'], 'readwrite');
        const objectStore = transaction.objectStore('customLists');
        const getRequest = objectStore.get(id);

        getRequest.onsuccess = () => {
            const data = getRequest.result;
            if (data) {
                data.content = content;
                data.timestamp = Date.now();
                const updateRequest = objectStore.put(data);

                updateRequest.onsuccess = () => {
                    console.log('Custom list updated:', id);
                    resolve();
                };

                updateRequest.onerror = () => {
                    reject(updateRequest.error);
                };
            } else {
                reject('List not found');
            }
        };

        getRequest.onerror = () => {
            reject(getRequest.error);
        };
    });
}

async function renderCustomButtons() {
    try {
        const customLists = await getAllCustomLists();
        customButtonsContainer.innerHTML = '';

        if (customLists.length === 0) {
            customButtonsContainer.innerHTML = '<p class="no-custom-lists">There is no entry on the custom list yet.</p>';
            return;
        }

        customLists.forEach(list => {
            const container = document.createElement('div');
            container.className = 'custom-list-item';

            const button = document.createElement('button');
            button.className = 'preset-btn';
            button.textContent = list.name;
            button.addEventListener('click', () => {
                processTextImport(list.content);
                textImportModal.style.display = 'none';

                const successMessage = document.createElement('div');
                successMessage.style.cssText = `
                    position: fixed; top: 20px; right: 20px; background-color: var(--accent2);
                    color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold;
                    z-index: 1000; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                `;
                successMessage.textContent = `✅ ${list.name} is loaded！`;
                document.body.appendChild(successMessage);

                setTimeout(() => {
                    if (document.body.contains(successMessage)) {
                        document.body.removeChild(successMessage);
                    }
                }, 3000);
            });

            const editBtn = document.createElement('button');
            editBtn.className = 'edit-custom-btn';
            editBtn.textContent = 'Edit';
            editBtn.title = 'Edit';
            editBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openEditModal(list.id, list.name, list.content);
            });

            container.appendChild(button);
            container.appendChild(editBtn);
            customButtonsContainer.appendChild(container);
        });
    } catch (error) {
        console.error('Error rendering custom buttons:', error);
        customButtonsContainer.innerHTML = '<p style="color: var(--primary);">An error occurred. </p>';
    }
}

function openEditModal(id, name, content) {
    currentEditingListId = id;
    editCustomContent.value = content;
    textImportModal.style.display = 'none';
    editCustomModal.style.display = 'flex';
}

editCustomSaveBtn.addEventListener('click', async () => {
    if (!currentEditingListId) return;

    const newContent = editCustomContent.value.trim();
    if (!newContent) {
        alert('No content available');
        return;
    }

    try {
        await updateCustomList(currentEditingListId, newContent);
        await renderCustomButtons();

        editCustomModal.style.display = 'none';
        textImportModal.style.display = 'flex';
        currentEditingListId = null;
        editCustomContent.value = '';

        const successMessage = document.createElement('div');
        successMessage.style.cssText = `
            position: fixed; top: 20px; right: 20px; background-color: var(--accent2);
            color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold;
            z-index: 1000; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        `;
        successMessage.textContent = '💾 Saved！';
        document.body.appendChild(successMessage);

        setTimeout(() => {
            if (document.body.contains(successMessage)) {
                document.body.removeChild(successMessage);
            }
        }, 2000);
    } catch (error) {
        console.error('Error updating custom list:', error);
        alert('Saving unsuccessful!');
    }
});

editCustomAbortBtn.addEventListener('click', () => {
    editCustomModal.style.display = 'none';
    textImportModal.style.display = 'flex';
    currentEditingListId = null;
    editCustomContent.value = '';
});

editCustomDeleteBtn.addEventListener('click', async () => {
    if (!currentEditingListId) return;

    if (confirm('Are you sure you want to delete this entry?')) {
        try {
            await deleteCustomList(currentEditingListId);
            await renderCustomButtons();

            editCustomModal.style.display = 'none';
            textImportModal.style.display = 'flex';
            currentEditingListId = null;
            editCustomContent.value = '';

            const deleteMessage = document.createElement('div');
            deleteMessage.style.cssText = `
                position: fixed; top: 20px; right: 20px; background-color: var(--primary);
                color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold;
                z-index: 1000; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            `;
            deleteMessage.textContent = '🗑️ Deleted';
            document.body.appendChild(deleteMessage);

            setTimeout(() => {
                if (document.body.contains(deleteMessage)) {
                    document.body.removeChild(deleteMessage);
                }
            }, 2000);
        } catch (error) {
            console.error('Error deleting custom list:', error);
            alert('Deleting unsuccessful!');
        }
    }
});


        // ===== TTS FUNCTIONS =====
        function loadVoices() {
            return new Promise((resolve) => {
                voices = speechSynthesis.getVoices();
                if (voices.length > 0) {
                    voicesLoaded = true;
                    console.log('Voices loaded:', voices.length);
                    resolve(voices);
                } else {
                    const utterance = new SpeechSynthesisUtterance('');
                    utterance.volume = 0;
                    speechSynthesis.speak(utterance);
                    setTimeout(() => {
                        voices = speechSynthesis.getVoices();
                        voicesLoaded = true;
                        console.log('Voices loaded after trigger:', voices.length);
                        resolve(voices);
                    }, 100);
                }
            });
        }

        function getEnglishVoice() {
            if (!voicesLoaded || voices.length === 0) return null;

            if (currentTTSSystem === 'ios') {
                const iosPreferredVoices = ['Samantha', 'Tom', 'Alex', 'Karen', 'Moira'];
                for (const voiceName of iosPreferredVoices) {
                    const voice = voices.find(v => v.name.includes(voiceName));
                    if (voice) {
                        console.log('Using iOS voice:', voice.name);
                        return voice;
                    }
                }
            } else {
                const androidPreferredVoices = [
                    'Google US English',
                    'English (United States)',
                    'en-US-language',
                    'English United States',
                    'Chrome OS US English'
                ];
                for (const voiceName of androidPreferredVoices) {
                    const voice = voices.find(v =>
                        v.name.includes(voiceName) ||
                        v.name.toLowerCase().includes(voiceName.toLowerCase())
                    );
                    if (voice) {
                        console.log('Using Android voice:', voice.name);
                        return voice;
                    }
                }
            }

            const englishVoice = voices.find(v =>
                v.lang === 'en-US' ||
                v.lang.startsWith('en-') ||
                v.name.toLowerCase().includes('english')
            );
            if (englishVoice) {
                console.log(`Using fallback English voice for ${currentTTSSystem}:`, englishVoice.name);
                return englishVoice;
            }

            console.log(`Using first available voice for ${currentTTSSystem}:`, voices[0]?.name);
            return voices[0] || null;
        }

        function speak(text) {
            console.log('Speak function called with:', text, 'System:', currentTTSSystem);
            if (!('speechSynthesis' in window)) {
                console.warn('Speech synthesis not supported');
                return;
            }

            const cleanText = text.replace(/[()[\\]*]/g, '').trim();
            if (!cleanText) return;

            speechSynthesis.cancel();

            setTimeout(() => {
                const utterance = new SpeechSynthesisUtterance(cleanText);
                const preferredVoice = getEnglishVoice();
                if (preferredVoice) {
                    utterance.voice = preferredVoice;
                }

                utterance.lang = 'en-US';
                utterance.pitch = 1.0;
                utterance.volume = 1.0;

                if (currentTTSSystem === 'ios') {
                    utterance.rate = Math.max(0.5, speechRate * 0.9);
                } else {
                    utterance.rate = speechRate;
                    utterance.pitch = 0.95;
                }

                utterance.onstart = function() {
                    console.log('Speech started successfully');
                };

                utterance.onend = function() {
                    console.log('Speech ended normally');
                    isSpeaking = false;
                };

                utterance.onerror = function(event) {
                    console.error('Speech error:', event.error);
                    isSpeaking = false;
                };

                try {
                    speechSynthesis.speak(utterance);
                } catch (error) {
                    console.error('Failed to start speech synthesis:', error);
                }
            }, 100);
        }

        async function initializeTTS() {
            console.log('Initializing TTS...');
            const testUtterance = new SpeechSynthesisUtterance('');
            testUtterance.volume = 0;
            speechSynthesis.speak(testUtterance);
            await new Promise(resolve => setTimeout(resolve, 200));
            await loadVoices();

            if (voices.length === 0) {
                console.log('No voices found, trying again...');
                await new Promise(resolve => setTimeout(resolve, 500));
                await loadVoices();
            }

            console.log('TTS initialization complete. Voices:', voices.length);
            speechSynthesis.addEventListener('voiceschanged', () => {
                console.log('Voices changed event fired');
                loadVoices();
            });
        }

        // ===== SPEECH RECOGNITION =====
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.continuous = false;
            recognition.interimResults = false;

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript.toLowerCase().trim();
                answerInput.value = transcript;
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onend = function() {
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error', event.error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };
        }

        // ===== EVENT LISTENERS =====
        ttsSpeedSelect.addEventListener('change', (e) => {
            speechRate = parseFloat(e.target.value);
        });

        ttsSystemSelect.addEventListener('change', (e) => {
            currentTTSSystem = e.target.value;
            console.log(`Switched to ${currentTTSSystem} TTS system`);
            loadVoices().then(() => {
                console.log(`Voice loading complete for ${currentTTSSystem}`);
            });
        });

        document.addEventListener('change', (e) => {
            if (e.target.name === 'quiz-mode') {
                quizMode = e.target.value;
                console.log(`Quiz mode changed to: ${quizMode}`);
            }
        });

        aiSupportBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'flex';
        });

        aiSupportCloseBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'none';
        });

        textImportBtn.addEventListener('click', () => {
            textImportModal.style.display = 'flex';
        });

        textImportCloseBtn.addEventListener('click', () => {
            textImportModal.style.display = 'none';
        });

        // ===== PRESET VOCABULARY DATA =====
        const presetVocabulary = {
            b3l1: `


            `,
            b3l2: `
◎Vocabulary---First Half (#1-#11)
innovate (v) =創新(v)
promise (v) =承諾(v)
material (n) =材料、原料
mention (v) =提到、說到(v)
structure (n) =結構
◎Vocabulary--Second Half (#12-#20)
rank (v) =排名(v)
unique (adj) =獨特的
adjust (v) =調整(v)
rely (v) =依靠
feedback (n) =回饋、意見
`,
            b3l3: `

 `,
            maga1: `


 `,
            maga2: `


 `,
            maga3: `


 `,
            maga4: `

 `,
            coreP2U1: `

 `,
            coreP2U2: `

 `,
            coreP2U3: `

 `,

            other1: `


`,
            other2: `
           

            `
        };

        function isContentEmpty(content) {
            const cleaned = content.replace(/\s+/g, '').replace(/[◎=]/g, '');
            return cleaned.length === 0;
        }

        function showNoContentMessage() {
            const messageOverlay = document.createElement('div');
            messageOverlay.style.cssText = `
                position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                background-color: rgba(0, 0, 0, 0.8); display: flex;
                justify-content: center; align-items: center; z-index: 1000;
            `;

            const messageBox = document.createElement('div');
            messageBox.style.cssText = `
                background-color: white; padding: 30px; border-radius: 15px;
                text-align: center; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
                max-width: 400px; margin: 0 20px;
            `;

            messageBox.innerHTML = `
                <h3 style="color: var(--primary); margin-bottom: 15px;">⚠️ No Content Available</h3>
                <p style="font-size: 18px; margin-bottom: 10px;">Please wait for updates.</p>
                <p style="font-size: 16px; color: var(--mid); margin-bottom: 20px;">目前暫無內容,請等待更新</p>
                <button id="close-no-content-msg" style="
                    background-color: var(--accent1); color: white; padding: 10px 20px;
                    border: none; border-radius: 6px; cursor: pointer; font-size: 16px;">OK</button>
            `;

            messageOverlay.appendChild(messageBox);
            document.body.appendChild(messageOverlay);

            document.getElementById('close-no-content-msg').addEventListener('click', () => {
                document.body.removeChild(messageOverlay);
            });

            messageOverlay.addEventListener('click', (e) => {
                if (e.target === messageOverlay) {
                    document.body.removeChild(messageOverlay);
                }
            });
        }

        document.querySelectorAll('.preset-btn').forEach(button => {
            button.addEventListener('click', () => {
                const presetKey = button.dataset.preset;
                if (presetVocabulary[presetKey]) {
                    const content = presetVocabulary[presetKey];
                    if (isContentEmpty(content)) {
                        showNoContentMessage();
                        return;
                    }

                    processTextImport(content);
                    textImportModal.style.display = 'none';

                    const successMessage = document.createElement('div');
                    successMessage.style.cssText = `
                        position: fixed; top: 20px; right: 20px; background-color: var(--accent2);
                        color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold;
                        z-index: 1000; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                    `;
                    successMessage.textContent = `✅ ${button.textContent} loaded successfully!`;
                    document.body.appendChild(successMessage);

                    setTimeout(() => {
                        if (document.body.contains(successMessage)) {
                            document.body.removeChild(successMessage);
                        }
                    }, 3000);
                }
            });
        });

        textImportSubmitBtn.addEventListener('click', () => {
            const text = textImportContent.value.trim();
            if (!text) {
                alert('Please choose a lesson or enter vocabulary pairs. (請選擇單元或輸入"English vocabulary = 中文翻譯")');
                return;
            }
            processTextImport(text);
            textImportModal.style.display = 'none';
        });

        textImportClearBtn.addEventListener('click', () => {
            textImportContent.value = '';
        });

       textImportMemoryBtn.addEventListener('click', async () => {
const content = textImportContent.value.trim();
if (!content) {
alert('No created content.');
return;
}

const namePrompt = prompt('Please enter a name for this created entry.');
if (!namePrompt) {
return;
}

const name = namePrompt.trim();
if (!name) {
alert('Please enter a name.');
return;
}

try {
await saveCustomList(name, content);
await renderCustomButtons();

const successMessage = document.createElement('div');
successMessage.style.cssText = `
position: fixed; top: 20px; right: 20px; background-color: var(--accent2);
color: white; padding: 15px 20px; border-radius: 8px; font-weight: bold;
z-index: 1000; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
`;
successMessage.textContent = `📌 ${name} entry created!`;
document.body.appendChild(successMessage);

setTimeout(() => {
if (document.body.contains(successMessage)) {
document.body.removeChild(successMessage);
}
}, 3000);

textImportContent.value = '';
} catch (error) {
console.error('Error saving custom list:', error);
if (error.name === 'ConstraintError') {
alert('This name has been used. Please choose another name.');
} else {
alert('Saving unsuccessful. Please try again.');
}
}
});


        // ===== TEXT IMPORT AND TABLE RENDERING =====
        function processTextImport(text) {
            vocabularyData = [];
            sectionOrder = [];
            const lines = text.split('\n');
            let currentSection = "Default";

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                if (!line) continue;

                if (line.includes('◎') || line.includes('@') || line.startsWith('※')) {
                    currentSection = line.replace('◎', '').replace('@', '').replace('※', '').trim();
                    if (!sectionOrder.includes(currentSection)) {
                        sectionOrder.push(currentSection);
                    }
                    continue;
                }

                const parts = line.split('=');
                if (parts.length < 2) continue;

                const vocabulary = parts[0].trim();
                const translation = parts[1].trim();

                if (vocabulary && translation) {
                    vocabularyData.push({
                        vocabulary: vocabulary,
                        translation: translation,
                        selected: true,
                        section: currentSection
                    });
                }
            }

            renderVocabularyTable();
            if (vocabularyData.length > 0) {
                startBtn.disabled = false;
                englishToChineseBtn.disabled = false;
                listenChooseBtn.disabled = false;
            }
        }

        function toggleSection(sectionName) {
            const sectionRows = document.querySelectorAll(`.section-row[data-section="${sectionName}"]`);
            const collapseBtn = document.querySelector(`[data-section-toggle="${sectionName}"]`);

            if (!collapseBtn) return;

            const isCollapsed = collapseBtn.textContent === '🔽';

            if (isCollapsed) {
                sectionRows.forEach(row => row.style.display = 'table-row');
                collapseBtn.textContent = '🔼';
                collapseBtn.title = 'Collapse (收起)';
            } else {
                sectionRows.forEach(row => row.style.display = 'none');
                collapseBtn.textContent = '🔽';
                collapseBtn.title = 'Expand (展開)';
            }
        }

        function renderVocabularyTable() {
            if (vocabularyData.length === 0) {
                vocabularyBody.innerHTML = '<tr><td colspan="3" class="no-data">Import your vocabulary list to get started</td></tr>';
                return;
            }

            vocabularyBody.innerHTML = '';
            const sectionMap = {};

            vocabularyData.forEach(item => {
                if (!sectionMap[item.section]) {
                    sectionMap[item.section] = [];
                }
                sectionMap[item.section].push(item);
            });

            Object.keys(sectionMap).forEach(sectionName => {
                const sectionItems = sectionMap[sectionName];

                const sectionRow = document.createElement('tr');
                sectionRow.className = 'section-header';
                const sectionCell = document.createElement('td');
                sectionCell.colSpan = 2;

                const sectionTitle = document.createElement('div');
                sectionTitle.className = 'section-title';

                const collapseBtn = document.createElement('button');
                collapseBtn.className = 'collapse-btn';
                collapseBtn.textContent = '🔼';
                collapseBtn.title = 'Collapse (收起)';
                collapseBtn.setAttribute('data-section-toggle', sectionName);
                collapseBtn.addEventListener('click', () => toggleSection(sectionName));

                const titleText = document.createElement('span');
                titleText.textContent = sectionName;

                sectionTitle.appendChild(collapseBtn);
                sectionTitle.appendChild(titleText);
                sectionCell.appendChild(sectionTitle);

                const sectionCheckCell = document.createElement('td');
                const sectionCheckbox = document.createElement('input');
                sectionCheckbox.type = 'checkbox';
                sectionCheckbox.checked = sectionItems.every(item => item.selected);
                sectionCheckbox.dataset.section = sectionName;

                sectionCheckbox.addEventListener('change', (e) => {
                    const isChecked = e.target.checked;
                    const section = e.target.dataset.section;

                    vocabularyData.forEach((item, index) => {
                        if (item.section === section) {
                            item.selected = isChecked;
                            const checkbox = document.querySelector(`input[data-index="${index}"]`);
                            if (checkbox) checkbox.checked = isChecked;
                        }
                    });

                    updateSelectAllCheckbox();
                });

                sectionCheckCell.appendChild(sectionCheckbox);
                sectionRow.appendChild(sectionCell);
                sectionRow.appendChild(sectionCheckCell);
                vocabularyBody.appendChild(sectionRow);

                sectionItems.forEach((item, localIndex) => {
                    const index = vocabularyData.findIndex(vItem =>
                        vItem.vocabulary === item.vocabulary &&
                        vItem.translation === item.translation);

                    const row = document.createElement('tr');
                    row.className = 'section-row';
                    row.setAttribute('data-section', sectionName);

                    const wordCell = document.createElement('td');
                    const cleanWord = item.vocabulary.replace(/\(.*\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                    wordCell.innerHTML = `
                        ${item.vocabulary}
                        <span class="speaker-icon" title="Listen" data-word="${cleanWord}">🔊</span>
                    `;

                    const translationCell = document.createElement('td');
                    translationCell.textContent = item.translation;

                    const checkboxCell = document.createElement('td');
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.checked = item.selected;
                    checkbox.dataset.index = index;
                    checkbox.dataset.section = item.section;

                    checkbox.addEventListener('change', (e) => {
                        vocabularyData[index].selected = e.target.checked;
                        updateSectionCheckbox(item.section);
                        updateSelectAllCheckbox();
                    });

                    checkboxCell.appendChild(checkbox);
                    row.appendChild(wordCell);
                    row.appendChild(translationCell);
                    row.appendChild(checkboxCell);
                    vocabularyBody.appendChild(row);
                });
            });

            document.querySelectorAll('.speaker-icon').forEach(icon => {
                icon.addEventListener('click', (e) => {
                    const word = e.target.dataset.word;
                    speak(word);
                });
            });

            updateSelectAllCheckbox();
        }

        function updateSectionCheckbox(sectionName) {
            const sectionItems = vocabularyData.filter(item => item.section === sectionName);
            const allSelected = sectionItems.every(item => item.selected);
            const noneSelected = sectionItems.every(item => !item.selected);
            const sectionCheckbox = document.querySelector(`input[data-section="${sectionName}"]`);

            if (sectionCheckbox) {
                sectionCheckbox.checked = allSelected;
                sectionCheckbox.indeterminate = !allSelected && !noneSelected;
            }
        }

        function updateSelectAllCheckbox() {
            if (vocabularyData.length === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
                return;
            }

            const selectedCount = vocabularyData.filter(item => item.selected).length;
            if (selectedCount === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            } else if (selectedCount === vocabularyData.length) {
                selectAllCheckbox.checked = true;
                selectAllCheckbox.indeterminate = false;
            } else {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = true;
            }
        }

        selectAllCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            vocabularyData.forEach(item => {
                item.selected = isChecked;
            });

            document.querySelectorAll('#vocabulary-body input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = isChecked;
                if (checkbox.dataset.section) {
                    checkbox.indeterminate = false;
                }
            });
        });

        // ===== PROGRESS TRACKING =====
        function initializeSectionProgress() {
            sectionProgress = {};
            const sectionMap = {};

            vocabularyData.forEach(item => {
                if (!sectionMap[item.section]) {
                    sectionMap[item.section] = [];
                }
                sectionMap[item.section].push(item);
            });

            Object.keys(sectionMap).forEach(sectionName => {
                const sectionItems = sectionMap[sectionName].filter(item => item.selected);
                if (sectionItems.length > 0) {
                    sectionProgress[sectionName] = {
                        currentIndex: -1,
                        totalCount: sectionItems.length,
                        items: sectionItems
                    };
                }
            });
        }

        function getCurrentProgressInfo() {
            if (quizMode !== 'sequential' || !currentEnglishWord) {
                return null;
            }

            const currentSection = currentEnglishWord.section;
            if (!sectionProgress[currentSection]) {
                return null;
            }

            const progress = sectionProgress[currentSection];
            const currentPosition = progress.currentIndex + 1;
            const totalInSection = progress.totalCount;

            return {
                current: currentPosition,
                total: totalInSection,
                section: currentSection
            };
        }

        function updateProgressDisplay() {
            if (quizMode !== 'sequential') {
                englishProgressInfo.style.display = 'none';
                return;
            }

            const progressInfo = getCurrentProgressInfo();
            if (!progressInfo) {
                englishProgressInfo.style.display = 'none';
                return;
            }

            englishProgressText.textContent = `${progressInfo.current} of ${progressInfo.total} (${progressInfo.section})`;
            englishProgressInfo.style.display = 'block';
        }

        // ===== LISTEN AND CHOOSE QUIZ =====
        function startListenAndChooseQuiz() {
            currentListenQuizWords = vocabularyData.filter(item => item.selected);

            if (currentListenQuizWords.length === 0) {
                alert('Please select at least 8 vocabulary words for this quiz. (請選擇至少8個單字以進行此測驗)');
                return;
            }

            if (currentListenQuizWords.length < 8) {
                alert('Please select at least 8 vocabulary words for this quiz. (請選擇至少8個單字以進行此測驗)');
                return;
            }

            resetListenAndChooseQuiz();
            listenChooseModal.style.display = 'flex';
            nextListenQuestion();
        }

        function resetListenAndChooseQuiz() {
            currentListenWordIndex = -1;
            currentListenWord = null;
            questionStartTime = null;
            isAnswered = false;
            listenAnswerDisplay.textContent = 'Click the speaker';
            timerFeedback.textContent = '';
        }

        function nextListenQuestion() {
            isAnswered = false;
            questionStartTime = null;
            listenAnswerDisplay.textContent = 'Click the speaker';
            timerFeedback.textContent = '';

            if (quizMode === 'sequential') {
                currentListenWordIndex = (currentListenWordIndex + 1) % currentListenQuizWords.length;
            } else {
                const previousIndex = currentListenWordIndex;
                if (currentListenQuizWords.length === 1) {
                    currentListenWordIndex = 0;
                } else {
                    do {
                        currentListenWordIndex = Math.floor(Math.random() * currentListenQuizWords.length);
                    } while (currentListenWordIndex === previousIndex && currentListenQuizWords.length > 1);
                }
            }

            currentListenWord = currentListenQuizWords[currentListenWordIndex];
            generateChoices();
        }

        function generateChoices() {
            if (!currentListenWord) return;

            const otherTranslations = currentListenQuizWords
                .filter(item => item.translation !== currentListenWord.translation)
                .map(item => item.translation);

            const shuffled = otherTranslations.sort(() => 0.5 - Math.random());
            const selectedChoices = shuffled.slice(0, 7);
            const allChoices = [...selectedChoices, currentListenWord.translation];
            const finalChoices = allChoices.sort(() => 0.5 - Math.random());

            choicesGrid.innerHTML = '';
            finalChoices.forEach(choice => {
                const button = document.createElement('button');
                button.className = 'choice-button';
                button.textContent = choice;
                button.addEventListener('click', () => handleChoiceClick(button, choice));
                choicesGrid.appendChild(button);
            });
        }

        function handleChoiceClick(button, selectedChoice) {
            if (isAnswered) return;

            isAnswered = true;
            const responseTime = questionStartTime ? (Date.now() - questionStartTime) / 1000 : 0;

            document.querySelectorAll('.choice-button').forEach(btn => {
                btn.disabled = true;
            });

            const isCorrect = selectedChoice === currentListenWord.translation;

            if (isCorrect) {
                button.classList.add('correct');
                listenAnswerDisplay.textContent = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();

                let feedbackMessage = '';
                if (responseTime < 2) {
                    feedbackMessage = 'Perfect! ⚡';
                    speak('Perfect!');
                } else if (responseTime < 3.5) {
                    feedbackMessage = 'Good! 👍';
                    speak('Good!');
                } else if (responseTime < 6) {
                    feedbackMessage = 'Faster! ⏰';
                    speak('Faster!');
                } else {
                    feedbackMessage = 'Too late... 😴';
                    speak('Too late...');
                }

                timerFeedback.textContent = `${feedbackMessage} (It took you ${responseTime.toFixed(1)} seconds.)`;
                timerFeedback.className = 'timer-feedback correct';
            } else {
                button.classList.add('incorrect');
                document.querySelectorAll('.choice-button').forEach(btn => {
                    if (btn.textContent === currentListenWord.translation) {
                        btn.classList.add('correct');
                    }
                });

                timerFeedback.textContent = 'You missed! 😓❌';
                timerFeedback.className = 'timer-feedback incorrect';
                speak('You missed!');
                listenAnswerDisplay.textContent = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
            }
        }

        listenChooseBtn.addEventListener('click', startListenAndChooseQuiz);

        listenSpeaker.addEventListener('click', () => {
            if (currentListenWord && !isAnswered) {
                const cleanWord = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                speak(cleanWord);
                if (!questionStartTime) {
                    questionStartTime = Date.now();
                }
            }
        });

        listenNextBtn.addEventListener('click', nextListenQuestion);

        listenCloseBtn.addEventListener('click', () => {
            listenChooseModal.style.display = 'none';
        });

        // ===== ENGLISH TO CHINESE QUIZ =====
        englishToChineseBtn.addEventListener('click', () => {
            currentEnglishQuizWords = vocabularyData.filter(item => item.selected);
            if (currentEnglishQuizWords.length === 0) {
                alert('Please select at least one vocabulary word to start the quiz. (請選擇至少一個單字以進行測驗)');
                return;
            }
            startEnglishToChineseQuiz();
        });

        checkAnswerBtn.addEventListener('click', showChineseAnswer);
        englishNextBtn.addEventListener('click', nextEnglishQuestion);

        englishCloseBtn.addEventListener('click', () => {
            englishToChineseModal.style.display = 'none';
        });

        englishWordSpeaker.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();

            if (isSpeaking) {
                console.log('Already speaking, ignoring click');
                return;
            }

            if (currentEnglishWord) {
                isSpeaking = true;
                const cleanWord = currentEnglishWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                console.log('About to speak:', cleanWord);
                speak(cleanWord);

                setTimeout(() => {
                    isSpeaking = false;
                }, 3000);
            }
        });

        function startEnglishToChineseQuiz() {
            console.log('Starting English to Chinese quiz');
            console.log('Voices loaded:', voicesLoaded, 'Voice count:', voices.length);

            if (!voicesLoaded || voices.length === 0) {
                console.log('Loading voices before starting quiz...');
                loadVoices().then(() => {
                    console.log('Voices loaded, starting quiz');
                    resetEnglishToChineseQuiz();
                    englishToChineseModal.style.display = 'flex';
                    nextEnglishQuestion();
                });
            } else {
                resetEnglishToChineseQuiz();
                englishToChineseModal.style.display = 'flex';
                nextEnglishQuestion();
            }
        }

        function resetEnglishToChineseQuiz() {
            currentEnglishWordIndex = -1;
            currentEnglishWord = null;
            chineseAnswerDisplay.style.display = 'none';
            checkQuestion.style.display = 'none';
            checkAnswerBtn.style.display = 'block';

            if (quizMode === 'sequential') {
                initializeSectionProgress();
            }
        }

        function nextEnglishQuestion() {
            chineseAnswerDisplay.style.display = 'none';
            checkQuestion.style.display = 'none';
            checkAnswerBtn.style.display = 'block';

            if (quizMode === 'sequential') {
                if (currentEnglishWordIndex === -1) {
                    const firstSection = sectionOrder.find(section =>
                        sectionProgress[section] && sectionProgress[section].totalCount > 0
                    );
                    if (firstSection) {
                        sectionProgress[firstSection].currentIndex = 0;
                        currentEnglishWord = sectionProgress[firstSection].items[0];
                        currentEnglishWordIndex = 0;
                    } else {
                        currentEnglishWordIndex = 0;
                        currentEnglishWord = currentEnglishQuizWords[0];
                    }
                } else {
                    const currentSection = currentEnglishWord.section;
                    const sectionData = sectionProgress[currentSection];

                    if (sectionData && sectionData.currentIndex + 1 < sectionData.totalCount) {
                        sectionData.currentIndex++;
                        currentEnglishWord = sectionData.items[sectionData.currentIndex];
                    } else {
                        const currentSectionIndex = sectionOrder.indexOf(currentSection);
                        let nextSectionIndex = currentSectionIndex + 1;

                        while (nextSectionIndex < sectionOrder.length) {
                            const nextSection = sectionOrder[nextSectionIndex];
                            if (sectionProgress[nextSection] && sectionProgress[nextSection].totalCount > 0) {
                                sectionProgress[nextSection].currentIndex = 0;
                                currentEnglishWord = sectionProgress[nextSection].items[0];
                                break;
                            }
                            nextSectionIndex++;
                        }

                        if (nextSectionIndex >= sectionOrder.length) {
                            const firstSection = sectionOrder.find(section =>
                                sectionProgress[section] && sectionProgress[section].totalCount > 0
                            );
                            if (firstSection) {
                                sectionProgress[firstSection].currentIndex = 0;
                                currentEnglishWord = sectionProgress[firstSection].items[0];
                            }
                        }
                    }

                    currentEnglishWordIndex = currentEnglishQuizWords.findIndex(item =>
                        item.vocabulary === currentEnglishWord.vocabulary &&
                        item.translation === currentEnglishWord.translation
                    );
                }
            } else {
                const previousIndex = currentEnglishWordIndex;
                if (currentEnglishQuizWords.length === 1) {
                    currentEnglishWordIndex = 0;
                } else {
                    do {
                        currentEnglishWordIndex = Math.floor(Math.random() * currentEnglishQuizWords.length);
                    } while (currentEnglishWordIndex === previousIndex && currentEnglishQuizWords.length > 1);
                }
                currentEnglishWord = currentEnglishQuizWords[currentEnglishWordIndex];
            }

            const cleanWord = currentEnglishWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            englishWordDisplay.textContent = cleanWord;
            updateProgressDisplay();
        }

        function showChineseAnswer() {
            if (!currentEnglishWord) return;

            chineseAnswerDisplay.textContent = currentEnglishWord.translation;
            chineseAnswerDisplay.style.display = 'block';
            checkQuestion.style.display = 'block';
            checkAnswerBtn.style.display = 'none';
        }

        // ===== MAIN QUIZ =====
        startBtn.addEventListener('click', () => {
            currentQuizWords = vocabularyData.filter(item => item.selected);
            if (currentQuizWords.length === 0) {
                alert('Please select at least one vocabulary word to start the quiz. (請選擇至少一個單字以進行測驗)');
                return;
            }
            startQuiz();
        });

        function startQuiz() {
            resetQuiz();
            quizModal.style.display = 'flex';
            nextQuestion();
        }

        function resetQuiz() {
            currentWordIndex = -1;
            currentWord = null;
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
        }

        function nextQuestion() {
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';

            if (quizMode === 'sequential') {
                currentWordIndex = (currentWordIndex + 1) % currentQuizWords.length;
            } else {
                const previousIndex = currentWordIndex;
                if (currentQuizWords.length === 1) {
                    currentWordIndex = 0;
                } else {
                    do {
                        currentWordIndex = Math.floor(Math.random() * currentQuizWords.length);
                    } while (currentWordIndex === previousIndex && currentQuizWords.length > 1);
                }
            }

            currentWord = currentQuizWords[currentWordIndex];
            translationPrompt.textContent = currentWord.translation;
        }

        function submitAnswer() {
            if (!currentWord) return;

            const userAnswer = answerInput.value.trim().toLowerCase();
            const correctAnswers = currentWord.vocabulary
                .split('/')
                .map(ans => ans.replace(/\(.*?\)/g, '').trim().toLowerCase());

            const normalizedUserAnswer = userAnswer.replace(/[.,?'''.../…#!$%\^&\*;:{}=\-_`~()]/g, "");

            const isCorrect = correctAnswers.some(answer => {
                const normalizedAnswer = answer.replace(/[.,?'''.../…#!$%\^&\*;:{}=\-_`~()]/g, "");
                return normalizedUserAnswer === normalizedAnswer;
            });

            if (isCorrect) {
                feedbackEl.textContent = 'Well done! 🏆😊👍';
                feedbackEl.className = 'feedback correct';
                speak('Well done!');
            } else {
                feedbackEl.textContent = 'Try again! 🔥🔥🔥';
                feedbackEl.className = 'feedback incorrect';
                speak('Try again!');
            }
        }

        function showHint() {
            if (!currentWord) return;
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            const firstLetter = correctAnswer.charAt(0).toUpperCase();
            hintTextEl.textContent = `It starts with the letter ${firstLetter}.`;
        }

        function showAnswer() {
            if (!currentWord) return;
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
            revealAnswerEl.textContent = `${correctAnswer}`;
            speak(correctAnswer);
        }

        submitBtn.addEventListener('click', submitAnswer);

        answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                submitAnswer();
            }
        });

        speakBtn.addEventListener('click', () => {
            if (!recognition) {
                alert('Speech recognition is not supported in your browser.');
                return;
            }

            try {
                if (speakBtn.textContent === '🎤 Speak') {
                    recognition.start();
                    speakBtn.textContent = 'Recording';
                    speakBtn.classList.add('recording');
                } else {
                    recognition.stop();
                    speakBtn.textContent = '🎤 Speak';
                    speakBtn.classList.remove('recording');
                }
            } catch (error) {
                console.error('Speech recognition error:', error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            }
        });

        hintBtn.addEventListener('click', showHint);
        answerBtn.addEventListener('click', showAnswer);
        nextBtn.addEventListener('click', nextQuestion);

        closeBtn.addEventListener('click', () => {
            quizModal.style.display = 'none';
            if (recognition) {
                recognition.stop();
            }
        });

        // ===== DATE INFORMATION =====
        function updateDateInfo() {
            const dateInfoEl = document.getElementById('date-info');
            const options = {
                timeZone: 'Asia/Taipei',
                weekday: 'long',
                month: 'long',
                day: 'numeric',
                year: 'numeric'
            };

            const today = new Date();
            const taiwanDate = today.toLocaleDateString('en-US', options);

            const examDate = new Date('October 14, 2025');
            examDate.setHours(0, 0, 0, 0);
            const todayNoTime = new Date(today);
            todayNoTime.setHours(0, 0, 0, 0);
            const daysUntilExam = Math.ceil((examDate - todayNoTime) / (1000 * 60 * 60 * 24));

            const collegeExamDate = new Date('January 16, 2026');
            collegeExamDate.setHours(0, 0, 0, 0);
            const daysUntilCollegeExam = Math.ceil((collegeExamDate - todayNoTime) / (1000 * 60 * 60 * 24));

            dateInfoEl.innerHTML = `
                <span><span class="emoji">📅</span>${taiwanDate}</span><br>
                <span><span class="emoji">⏰</span><span class="countdown">${daysUntilExam}</span> days until 段考</span>
                <span><span class="emoji">📚</span><span class="countdown">${daysUntilCollegeExam}</span> days until 115年學測</span>
            `;
        }

        updateDateInfo();
        setInterval(updateDateInfo, 60000);

        // ===== INITIALIZATION =====

document.addEventListener('DOMContentLoaded', async () => {
    try {
        await initIndexedDB();
        await renderCustomButtons();
    } catch (error) {
        console.error('Error initializing IndexedDB:', error);
    }

    initializeTTS();

    // Add toggle functionality for button sets
    document.querySelectorAll('.toggle-icon').forEach(icon => {
        icon.addEventListener('click', function() {
            const targetId = this.getAttribute('data-toggle');
            const targetContent = document.getElementById(targetId);
            
            if (targetContent) {
                targetContent.classList.toggle('visible');
                
                // Change icon direction
                if (targetContent.classList.contains('visible')) {
                    this.textContent = '▲';
                } else {
                    this.textContent = '▼';
                }
            }
        });
    });


            const refreshReminderPopup = document.getElementById('refresh-reminder-popup');
            setTimeout(() => {
                refreshReminderPopup.style.display = 'flex';
            }, 1000);

            const closeReminderBtn = document.getElementById('close-reminder-btn');
            closeReminderBtn.addEventListener('click', () => {
                refreshReminderPopup.style.display = 'none';
            });
        });

        document.addEventListener('click', function initOnFirstClick() {
            initializeTTS();
            document.removeEventListener('click', initOnFirstClick);
        }, { once: true });

        // ===== FIREBASE VISITOR COUNTER =====
        function initVisitorCounter() {
            const firebaseConfig = {
                apiKey: "AIzaSyBFhmaAZmBtsM5DKoxgy1G-RouRKsrjYsA",
                authDomain: "vocab-builder-visitor-counter.firebaseapp.co",
                databaseURL: "https://vocab-builder-visitor-counter-default-rtdb.asia-southeast1.firebasedatabase.app/",
                projectId: "vocab-builder-visitor-counter",
                storageBucket: "vocab-builder-visitor-counter.firebasestorage.app",
                messagingSenderId: "648587683861",
                appId: "1:648587683861:web:dcb777160dabb4cbf8c61c"
            };

            firebase.initializeApp(firebaseConfig);
            const database = firebase.database();

            const today = new Date();
            const taiwanDate = new Date(today.toLocaleString('en-US', { timeZone: 'Asia/Taipei' }));
            const dateStr = taiwanDate.getFullYear() + '-' +
                (taiwanDate.getMonth() + 1).toString().padStart(2, '0') + '-' +
                taiwanDate.getDate().toString().padStart(2, '0');

            const visitorCountRef = database.ref('visitorCount/' + dateStr);

            function updateVisitorDisplay(count) {
                const visitorCountEl = document.getElementById('visitor-count');
                if (count === 1) {
                    visitorCountEl.innerHTML = `👋 ${count} person has visited this website today.`;
                } else {
                    visitorCountEl.innerHTML = `👋 ${count} people have visited this website today.`;
                }
            }

            const hasVisitedToday = localStorage.getItem('visited_' + dateStr);

            if (!hasVisitedToday) {
                visitorCountRef.transaction((currentCount) => {
                    return (currentCount || 0) + 1;
                }, (error, committed, snapshot) => {
                    if (error) {
                        console.error('Transaction failed:', error);
                    } else if (committed) {
                        localStorage.setItem('visited_' + dateStr, 'true');
                        updateVisitorDisplay(snapshot.val());
                    }
                });
            } else {
                visitorCountRef.once('value', (snapshot) => {
                    const count = snapshot.val() || 0;
                    updateVisitorDisplay(count);
                });
            }

            visitorCountRef.on('value', (snapshot) => {
                const count = snapshot.val() || 0;
                updateVisitorDisplay(count);
            });
        }

        try {
            initVisitorCounter();
        } catch (e) {
            console.error("Error initializing visitor counter:", e);
            document.getElementById('visitor-count').innerHTML = "😅 Visitor count unavailable";
        }
    </script>
</body>
</html>
