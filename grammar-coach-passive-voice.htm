<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Learn Passive Voice</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        h1, h2 {
            color: #2c3e50;
            text-align: center;
        }
        .container {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        .example {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 15px;
        }
        .example img {
            width: 180px;
            height: 150px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 20px;
        }
        .example-text {
            flex-grow: 1;
        }
        .sentence {
            font-size: 18px;
            margin-bottom: 10px;
        }
        .explanation {
            color: #7f8c8d;
            font-style: italic;
        }
        .btn {
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin: 5px;
            transition: background-color 0.3s;
        }
        .btn-record {
            background-color: #9b59b6;
        }
        .btn-record:hover {
            background-color: #8e44ad;
        }
        .btn-check {
            background-color: #3498db;
        }
        .btn-check:hover {
            background-color: #2980b9;
        }
        .btn-show {
            background-color: #f39c12;
        }
        .btn-show:hover {
            background-color: #d35400;
        }
        .btn-next {
            background-color: #2ecc71;
        }
        .btn-next:hover {
            background-color: #27ae60;
        }
        .btn-restart {
            background-color: #1abc9c;
        }
        .btn-restart:hover {
            background-color: #16a085;
        }
        .btn-end {
            background-color: #e74c3c;
        }
        .btn-end:hover {
            background-color: #c0392b;
        }
        .speaker-icon {
            cursor: pointer;
            color: #3498db;
            margin-left: 10px;
        }
        .quiz-container {
            display: none;
            text-align: center;
        }
        .quiz-image {
            width: 300px;
            height: 250px;
            object-fit: cover;
            border-radius: 8px;
            margin: 20px auto;
            display: block;
        }
        .quiz-question {
            font-size: 20px;
            margin-bottom: 20px;
        }
        .controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }
        .mic-status {
            font-style: italic;
            color: #7f8c8d;
            margin: 10px 0;
        }
        .user-answer {
            margin: 15px 0;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            min-height: 40px;
            background-color: #f9f9f9;
        }
        .answer-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            margin-top: 10px;
        }
        .progress-container {
            width: 100%;
            height: 20px;
            background-color: #f1f1f1;
            border-radius: 10px;
            margin: 20px 0;
            overflow: hidden;
        }
        .progress-bar {
            height: 100%;
            background-color: #4CAF50;
            text-align: center;
            line-height: 20px;
            color: white;
            transition: width 0.5s;
        }
        .result-container {
            display: none;
            text-align: center;
            margin: 20px 0;
            padding: 20px;
            background-color: #f9f9f9;
            border-radius: 10px;
        }
        .result-text {
            font-size: 20px;
            margin-bottom: 15px;
        }
        .feedback {
            font-weight: bold;
            font-size: 20px;
            margin: 15px 0;
            min-height: 30px;
        }
        .correct {
            color: #2ecc71;
        }
        .incorrect {
            color: #e74c3c;
        }
        .hidden {
            display: none;
        }
        .intro-text {
            font-size: 18px;
            line-height: 1.6;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <h1>Learning Passive Voice</h1>
    
    <div class="container" id="explanationSection">
        <div class="intro-text">
            <p><strong>被動語態</strong>（passive voice）是一種文法結構，在句子中主詞接受動作而不是執行動作。在被動語態中，我們關注的是某人或某物發生了什麼，而不是誰或什麼在執行動作。</p>
            <p><strong>公式：</strong> 主詞 + to be (am/is/are/was/were) + 過去分詞 + (by + 執行者)</p>
        </div>
        
        <h2>Examples of Passive Voice</h2>
        
        <div class="example">
            <img src="vase-broken-by-boy.jpg" alt="A vase broken by a boy">
            <div class="example-text">
                <div class="sentence">
                    The vase was broken by the boy. 
                    <span class="speaker-icon" onclick="speakText('The vase was broken by the boy.')">🔊</span>
                </div>
                <div class="explanation">
                    主動語態: The boy broke the vase.<br>
                    被動語態: The vase was broken by the boy.
                </div>
            </div>
        </div>
        
        <div class="example">
            <img src="letter-written-by-mary.jpeg" alt="A letter being written">
            <div class="example-text">
                <div class="sentence">
                    The letter is being written by Mary. 
                    <span class="speaker-icon" onclick="speakText('The letter is being written by Mary.')">🔊</span>
                </div>
                <div class="explanation">
                    主動語態: Mary is writing the letter.<br>
                    被動語態: The letter is being written by Mary.
                </div>
            </div>
        </div>
        
        <div class="example">
            <img src="cake-eaten-at-party.jpg" alt="A cake being eaten">
            <div class="example-text">
                <div class="sentence">
                    The cake was eaten at the party. 
                    <span class="speaker-icon" onclick="speakText('The cake was eaten at the party.')">🔊</span>
                </div>
                <div class="explanation">
                    主動語態: People ate the cake at the party.<br>
                    被動語態: The cake was eaten at the party.
                </div>
            </div>
        </div>
        
        <div class="controls">
            <button class="btn btn-primary btn-record" id="startQuizBtn">Start Quiz</button>
        </div>
    </div>
    
    <div class="container quiz-container" id="quizSection">
        <h2>Passive Voice Quiz</h2>
        
        <div class="progress-container">
            <div class="progress-bar" id="progressBar">0%</div>
        </div>
        
        <img id="quizImage" class="quiz-image" src="/api/placeholder/400/320" alt="Quiz image">
        
        <div class="quiz-question" id="quizQuestion">What happened to...?</div>
        
        <div class="mic-status" id="micStatus">Press the microphone button to speak your answer, or type below.</div>
        
        <div class="user-answer" id="userAnswer"></div>
        <input type="text" class="answer-input" id="textInput" placeholder="Type your answer here...">
        
        <div class="feedback" id="feedback"></div>
        
        <div class="controls">
            <button class="btn btn-record" id="recordBtn">🎤 Record Answer</button>
            <button class="btn btn-check" id="checkAnswerBtn">Check Answer</button>
            <button class="btn btn-show" id="showAnswerBtn">Show Answer</button>
            <button class="btn btn-next" id="nextQuestionBtn" disabled>Next Question</button>
            <button class="btn btn-end" id="endQuizBtn">End Quiz</button>
        </div>
        
        <div class="result-container" id="resultContainer">
            <div class="result-text" id="resultText"></div>
            <button class="btn btn-restart" id="restartQuizBtn">Try Again</button>
            <button class="btn btn-end" id="endResultQuizBtn">End Quiz</button>
        </div>
    </div>
    
    <script>
        // Quiz data - Collection of images and their corresponding passive sentences
        const quizData = [
            {
                image: "vase-broken-by-boy.jpg",
                question: "What happened to the vase?",
                answer: "The vase was broken by the boy.",
                subject: "vase"
            },
            {
                image: "letter-written-by-mary.jpeg",
                question: "What happened to the letter?",
                answer: "The letter was written by the girl.",
                subject: "letter"
            },
            {
                image: "window-cleaned-by-woman.jpg",
                question: "What happened to the window?",
                answer: "The window was cleaned by the woman.",
                subject: "window"
            },
            {
                image: "car-washed-by-man.jpeg",
                question: "What happened to the car?",
                answer: "The car was washed by the man.",
                subject: "car"
            },
            {
                image: "cake-baked-by-chef.jpg",
                question: "What happened to the cake?",
                answer: "The cake was baked by the chef.",
                subject: "cake"
            },
            {
                image: "house-built-by-workers.jpg",
                question: "What happened to the house?",
                answer: "The house was built by the workers.",
                subject: "house"
            },
            {
                image: "picture-painted-by-artist.jpg",
                question: "What happened to the picture?",
                answer: "The picture was painted by the artist.",
                subject: "picture"
            },
            {
                image: "books-read-by-students.jpeg",
                question: "What happened to the books?",
                answer: "The books were read by the students.",
                subject: "book"
            },
            {
                image: "food-eaten-by-daniel.jpg",
                question: "What happened to the food? (P.S. The boy's name is Daniel.)",
                answer: "The food was eaten by Daniel",
                subject: "food"
            },
            {
                image: "tree-planted-by-gardeners.jpg",
                question: "What happened to the tree? (P.S. They are gardeners.)",
                answer: "The tree was planted by the gardeners.",
                subject: "tree"
            }
        ];
        
        // Variables for quiz functionality
        let currentQuestionIndex = 0;
        let recognition;
        let isRecording = false;
        let shuffledQuestions = [];
        let answeredQuestions = 0;
        let correctAnswers = 0;
        
        // DOM Elements
        const startQuizBtn = document.getElementById('startQuizBtn');
        const endQuizBtn = document.getElementById('endQuizBtn');
        const explanationSection = document.getElementById('explanationSection');
        const quizSection = document.getElementById('quizSection');
        const quizImage = document.getElementById('quizImage');
        const quizQuestion = document.getElementById('quizQuestion');
        const recordBtn = document.getElementById('recordBtn');
        const micStatus = document.getElementById('micStatus');
        const userAnswer = document.getElementById('userAnswer');
        const feedback = document.getElementById('feedback');
        const checkAnswerBtn = document.getElementById('checkAnswerBtn');
        const showAnswerBtn = document.getElementById('showAnswerBtn');
        const nextQuestionBtn = document.getElementById('nextQuestionBtn');
        const textInput = document.getElementById('textInput');
        const progressBar = document.getElementById('progressBar');
        const resultContainer = document.getElementById('resultContainer');
        const resultText = document.getElementById('resultText');
        const restartQuizBtn = document.getElementById('restartQuizBtn');
        const endResultQuizBtn = document.getElementById('endResultQuizBtn');
        
        // Setup speech recognition
        function setupSpeechRecognition() {
            window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            
            if (window.SpeechRecognition) {
                recognition = new SpeechRecognition();
                recognition.lang = 'en-US';
                recognition.interimResults = false;
                recognition.maxAlternatives = 1;
                
                recognition.onresult = function(event) {
                    const transcript = event.results[0][0].transcript;
                    userAnswer.textContent = transcript;
                    micStatus.textContent = "Speech recognized! Click 'Check Answer' to verify.";
                    checkAnswerBtn.disabled = false;
                    isRecording = false;
                    recordBtn.textContent = "🎤 Record Answer";
                };
                
                recognition.onspeechend = function() {
                    recognition.stop();
                    isRecording = false;
                    recordBtn.textContent = "🎤 Record Answer";
                };
                
                recognition.onerror = function(event) {
                    micStatus.textContent = "Error occurred in recognition: " + event.error;
                    isRecording = false;
                    recordBtn.textContent = "🎤 Record Answer";
                };
            } else {
                micStatus.textContent = "Speech recognition not supported by your browser. Try using Chrome.";
                recordBtn.disabled = true;
            }
        }
        
        // Text-to-Speech function
        function speakText(text) {
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'en-US';
                utterance.rate = 0.8;  // Changed from 0.9 to 0.8 per requirement
                window.speechSynthesis.speak(utterance);
            } else {
                alert("Text-to-speech is not supported by your browser.");
            }
        }
        
        // Load a question
        function loadQuestion() {
            const currentQuestion = shuffledQuestions[currentQuestionIndex];
            quizImage.src = currentQuestion.image;
            quizImage.alt = `Image for: ${currentQuestion.question}`;
            quizQuestion.textContent = currentQuestion.question;
            
            // Read the question aloud
            speakText(currentQuestion.question);
            
            // Reset UI elements
            userAnswer.textContent = "";
            textInput.value = "";
            feedback.textContent = "";
            feedback.className = "feedback";
            micStatus.textContent = "Press the microphone button to speak your answer, or type below.";
            nextQuestionBtn.disabled = true;
            
            // Update progress bar
            const progress = (answeredQuestions / shuffledQuestions.length) * 100;
            progressBar.style.width = progress + "%";
            progressBar.textContent = Math.round(progress) + "%";
        }
        
        // Show the correct answer
        function showAnswer() {
            const currentQuestion = shuffledQuestions[currentQuestionIndex];
            feedback.textContent = "Correct answer: " + currentQuestion.answer;
            feedback.className = "feedback";
            speakText(currentQuestion.answer);
            nextQuestionBtn.disabled = false;
        }
        
        // Check the answer
        function checkAnswer() {
            const currentQuestion = shuffledQuestions[currentQuestionIndex];
            // Get answer from either voice input or text input
            let userResponseText = userAnswer.textContent.toLowerCase().trim();
            if (userResponseText === "" && textInput.value.trim() !== "") {
                userResponseText = textInput.value.toLowerCase().trim();
                userAnswer.textContent = textInput.value.trim();
            }
            
            const correctAnswerText = currentQuestion.answer.toLowerCase();
            
            // Check if the answer contains the key elements of passive voice
            let isCorrect = false;
            
            // Make sure the answer includes the subject, was/were, and past participle
            if (userResponseText.includes(currentQuestion.subject.toLowerCase()) && 
                (userResponseText.includes(" was ") || userResponseText.includes(" were ")) && 
                userResponseText.includes("by")) {
                    
                // Check if there's a reasonable match
                isCorrect = true;
            }
            
            if (isCorrect) {
                feedback.textContent = "Good job!";
                feedback.className = "feedback correct";
                speakText("Good job!");
                nextQuestionBtn.disabled = false;
                correctAnswers++;
            } else {
                feedback.textContent = "Try again!";
                feedback.className = "feedback incorrect";
                speakText("Try again!");
            }
            
            // Count this question as answered
            answeredQuestions++;
            
            // Update progress bar
            const progress = (answeredQuestions / shuffledQuestions.length) * 100;
            progressBar.style.width = progress + "%";
            progressBar.textContent = Math.round(progress) + "%";
            
            // Check if all questions have been answered
            if (answeredQuestions >= shuffledQuestions.length) {
                // Show result after a short delay
                setTimeout(showResults, 1500);
            }
        }
        
        // Show quiz results
        function showResults() {
            const quizContent = document.querySelector('.quiz-container > *:not(#resultContainer)');
            quizContent.style.display = 'none';
            resultContainer.style.display = 'block';
            
            // Create result message
            const resultMessage = `You got ${correctAnswers} out of ${shuffledQuestions.length} questions correct! ${getEncouragementMessage(correctAnswers, shuffledQuestions.length)}`;
            resultText.textContent = resultMessage;
            speakText(resultMessage);
        }
        
        // Get encouragement message based on score
        function getEncouragementMessage(correct, total) {
            const percentage = (correct / total) * 100;
            if (percentage >= 90) {
                return "Excellent work! You've mastered passive voice!";
            } else if (percentage >= 70) {
                return "Great job! Keep practicing to master passive voice completely!";
            } else if (percentage >= 50) {
                return "Good effort! With more practice, you'll improve even more!";
            } else {
                return "Keep practicing! Passive voice takes time to master!";
            }
        }
        
        // Shuffle array (Fisher-Yates algorithm)
        function shuffleArray(array) {
            let currentIndex = array.length, randomIndex;
            
            // While there remain elements to shuffle
            while (currentIndex != 0) {
                // Pick a remaining element
                randomIndex = Math.floor(Math.random() * currentIndex);
                currentIndex--;
                
                // And swap it with the current element
                [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
            }
            
            return array;
        }
        
        // Move to next question
        function nextQuestion() {
            currentQuestionIndex = (currentQuestionIndex + 1) % shuffledQuestions.length;
            loadQuestion();
        }
        
        // Start the quiz
        function startQuiz() {
            explanationSection.style.display = "none";
            quizSection.style.display = "block";
            resultContainer.style.display = 'none';
            document.querySelector('.quiz-container > *:not(#resultContainer)').style.display = '';
            
            // Reset quiz state
            currentQuestionIndex = 0;
            answeredQuestions = 0;
            correctAnswers = 0;
            
            // Shuffle questions
            shuffledQuestions = [...quizData];
            shuffleArray(shuffledQuestions);
            
            // Setup speech recognition
            setupSpeechRecognition();
            
            // Reset progress bar
            progressBar.style.width = "0%";
            progressBar.textContent = "0%";
            
            // Load first question
            loadQuestion();
        }
        
        // Restart quiz
        function restartQuiz() {
            resultContainer.style.display = 'none';
            document.querySelector('.quiz-container > *:not(#resultContainer)').style.display = '';
            
            // Reset quiz state
            currentQuestionIndex = 0;
            answeredQuestions = 0;
            correctAnswers = 0;
            
            // Shuffle questions again
            shuffleArray(shuffledQuestions);
            
            // Reset progress bar
            progressBar.style.width = "0%";
            progressBar.textContent = "0%";
            
            // Load first question
            loadQuestion();
        }
        
        // End the quiz
        function endQuiz() {
            quizSection.style.display = "none";
            explanationSection.style.display = "block";
            if (recognition) {
                recognition.stop();
            }
        }
        
        // Event Listeners
        startQuizBtn.addEventListener('click', startQuiz);
        endQuizBtn.addEventListener('click', endQuiz);
        restartQuizBtn.addEventListener('click', restartQuiz);
        endResultQuizBtn.addEventListener('click', endQuiz);
        
        recordBtn.addEventListener('click', function() {
            if (!isRecording) {
                userAnswer.textContent = "";
                textInput.value = "";
                feedback.textContent = "";
                
                recognition.start();
                isRecording = true;
                recordBtn.textContent = "🔴 Recording...";
                micStatus.textContent = "Listening... Speak now!";
            } else {
                recognition.stop();
                isRecording = false;
                recordBtn.textContent = "🎤 Record Answer";
                micStatus.textContent = "Recording stopped. Click record again to retry.";
            }
        });
        
        // Enable checking answer with text input
        textInput.addEventListener('input', function() {
            userAnswer.textContent = this.value;
        });
        
        checkAnswerBtn.addEventListener('click', checkAnswer);
        showAnswerBtn.addEventListener('click', showAnswer);
        nextQuestionBtn.addEventListener('click', nextQuestion);
    </script>
</body>
</html>