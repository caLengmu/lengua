<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Japanese Vocab Builder</title>
    <style>
        :root {
            --primary: #E53935;      /* Japanese Red */
            --secondary: #FF9800;    /* Orange */
            --accent1: #2196F3;      /* Blue */
            --accent2: #4CAF50;      /* Green */
            --accent3: #9C27B0;      /* Purple */
            --dark: #2C2C2C;         /* Dark Gray */
            --light: #F8F8F8;        /* Light Gray */
            --mid: #757575;          /* Mid Gray */
            --japanese: #1976D2;     /* Japanese Blue */
        }

        body {
            font-family: 'Hiragino Sans', 'Yu Gothic', 'Meiryo', 'Arial', sans-serif;
            background-color: var(--light);
            color: var(--dark);
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        .tts-system-selector {
            margin-top: 15px;
            font-size: 16px;
            color: var(--dark);
        }

        .tts-system-selector label {
            font-weight: bold;
            margin-right: 8px;
        }

        .tts-system-selector select {
            padding: 8px 12px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            background-color: white;
            color: var(--dark);
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: border-color 0.2s ease;
        }

        .tts-system-selector select:hover {
            border-color: var(--accent1);
        }

        .tts-system-selector select:focus {
            outline: none;
            border-color: var(--primary);
        }

        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
        }

        .controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            position: relative;
            z-index: 1;
            flex-wrap: wrap;
            gap: 10px;
        }

        .left-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        button {
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        .text-import-btn {
            background-color: var(--secondary);
            color: black;
        }

        .japanese-to-english-btn {
            background-color: var(--accent3);
            color: white;
            padding: 16px 25px;
            font-size: 18px;
        }

        .listen-choose-btn {
            background-color: var(--accent2);
            color: white;
            padding: 16px 25px;
            font-size: 18px;
        }

        .start-btn {
            background-color: var(--primary);
            color: white;
            padding: 16px 25px;
            font-size: 20px;
        }

        .ai-support-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
            background-color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            clear: both;
            display: table;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
        }

        tr:nth-child(even) {
            background-color: rgba(0, 0, 0, 0.03);
        }

        tr:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .speaker-icon {
            cursor: pointer;
            color: var(--secondary);
            margin-left: 8px;
            font-size: 20px;
        }

        .japanese-text {
            font-size: 18px;
            font-weight: bold;
            color: var(--japanese);
        }

        .reading-text {
            font-size: 14px;
            color: var(--mid);
            font-style: italic;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--light);
            width: 90%;
            max-width: 500px;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
        }

        .modal h2 {
            margin-top: 0;
            color: var(--primary);
            font-size: 1.8rem;
        }

        .prompt {
            font-size: 24px;
            margin: 20px 0;
            color: var(--dark);
            font-weight: bold;
        }

        .answer-input {
            width: 100%;
            padding: 12px;
            font-size: 18px;
            margin-bottom: 15px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
        }

        .feedback {
            margin: 15px 0;
            font-size: 25px;
            font-weight: bold;
            min-height: 27px;
        }

        .correct {
            color: var(--accent2);
        }

        .incorrect {
            color: var(--primary);
        }

        .hint {
            color: var(--accent1);
            font-style: italic;
            font-size: 25px;
            margin: 10px 0;
            min-height: 24px;
        }

        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .submit-btn {
            background-color: var(--primary);
            color: white;
        }

        .speak-btn {
            background-color: var(--accent1);
            color: white;
        }

        .hint-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        .answer-btn {
            background-color: var(--accent3);
            color: white;
        }

        .next-btn {
            background-color: var(--accent2);
            color: white;
        }

        .close-btn {
            background-color: var(--mid);
            color: white;
        }

        .copy-btn {
            background-color: var(--accent3);
            color: white;
        }

        .recording {
            background-color: var(--primary);
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .hidden {
            display: none;
        }

        #file-input {
            display: none;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: var(--mid);
            font-style: italic;
        }

        .tts-speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .tts-speed-control select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid var(--mid);
            background-color: white;
            font-size: 14px;
        }

        .tts-speed-control label {
            font-weight: bold;
            color: white;
        }

        .reveal-answer {
            color: var(--primary);
            font-weight: bold;
            font-size: 30px;
            margin: 10px 0;
            min-height: 27px;
        }

        .section-header {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
        }

        .section-header td {
            background-color: var(--dark);
            color: var(--light);
            padding: 10px 15px;
        }

        /* Text Import Modal Styles */
        #text-import-content {
            width: 100%;
            height: 200px;
            padding: 12px;
            margin: 15px 0;
            font-size: 14px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
            resize: vertical;
            white-space: pre-wrap;
            font-family: 'Hiragino Sans', 'Yu Gothic', monospace;
            overflow-y: auto;
        }

        #text-import-modal .modal-content {
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .preset-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .button-set {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            background-color: rgba(0, 0, 0, 0.02);
        }

        .button-set h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
            color: var(--dark);
        }

        .preset-btn {
            margin: 5px;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 14px;
            border: none;
            cursor: pointer;
            font-weight: normal;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .jlpt-btn {
            background-color: var(--accent1);
            color: white;
        }

        .kanji-btn {
            background-color: var(--accent2);
            color: white;
        }

        .grammar-btn {
            background-color: var(--accent3);
            color: white;
        }

        .other-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        /* AI Support Modal Styles */
        #ai-support-modal .modal-content {
            max-width: 600px;
        }

        .ai-support-links {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }

        .ai-support-link {
            background-color: var(--accent1);
            color: white;
            text-decoration: none;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .ai-support-link:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        /* Listen and Choose Modal Styles */
        #listen-choose-modal .modal-content {
            max-width: 100%;
            width: 95%;
            max-height: 95vh;
            padding: 15px;
        }

        .listen-answer-section {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            gap: 15px;
        }

        .listen-answer-display {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary);
            min-height: 30px;
            padding: 10px 15px;
            border: 2px solid var(--mid);
            border-radius: 8px;
            background-color: white;
            flex-grow: 1;
            text-align: center;
        }

        .listen-speaker {
            cursor: pointer;
            color: var(--secondary);
            font-size: 28px;
            padding: 8px;
            border-radius: 50%;
            background-color: rgba(255, 152, 0, 0.1);
            transition: all 0.2s ease;
        }

        .listen-speaker:hover {
            background-color: rgba(255, 152, 0, 0.2);
            transform: scale(1.1);
        }

        .timer-feedback-section {
            margin-bottom: 25px;
            min-height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .timer-feedback {
            font-size: 20px;
            font-weight: bold;
            text-align: center;
        }

        .choices-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 12px;
            margin-bottom: 25px;
            max-width: 100%;
        }

        .choice-button {
            padding: 15px 10px;
            border: 2px solid var(--mid);
            border-radius: 8px;
            background-color: white;
            color: var(--dark);
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            line-height: 1.3;
        }

        .choice-button:hover {
            background-color: var(--accent1);
            color: white;
            border-color: var(--accent1);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .choice-button.correct {
            background-color: var(--accent2);
            color: white;
            border-color: var(--accent2);
        }

        .choice-button.incorrect {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .choice-button:disabled {
            cursor: not-allowed;
            opacity: 0.7;
        }

        .listen-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
        }

        .listen-next-btn {
            background-color: var(--accent2);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        .listen-close-btn {
            background-color: var(--mid);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        .date-info {
            position: absolute;
            top: 20px;
            right: 20px;
            text-align: right;
            font-size: 14px;
            line-height: 1.6;
            color: var(--dark);
            background-color: rgba(255, 255, 255, 0.9);
            padding: 10px 15px;
            border-radius: 8px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            gap: 5px;
            font-weight: bold;
            max-width: 90%;
            z-index: 10;
        }

        .date-info span {
            display: flex;
            align-items: center;
            white-space: nowrap;
        }

        .date-info .emoji {
            margin-right: 8px;
            font-size: 16px;
        }

        .date-info .countdown {
            color: var(--primary);
            margin: 0 3px;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .date-info {
                position: static;
                margin: 0 auto 15px auto;
                width: 100%;
                max-width: 100%;
                text-align: center;
                right: auto;
                top: auto;
            }
            
            .date-info span {
                justify-content: center;
            }
            
            header {
                display: flex;
                flex-direction: column;
            }

            .controls {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .left-controls {
                justify-content: space-between;
                width: 100%;
            }

            .preset-buttons {
                grid-template-columns: 1fr;
            }

            .ai-support-links {
                grid-template-columns: 1fr;
            }

            .choices-grid {
                gap: 10px;
            }

            .choice-button {
                padding: 12px 8px;
                font-size: 14px;
                min-height: 50px;
            }

            #listen-choose-modal .modal-content {
                width: 98%;
                padding: 10px;
            }
        }

        .visitor-counter {
            margin-top: 40px;
            text-align: center;
            padding: 15px;
            color: var(--dark);
            font-size: 16px;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        #visitor-count {
            font-weight: bold;
        }

        /* Refresh Reminder Popup Styles */
        .popup-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-content {
            background-color: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 500px;
            text-align: center;
        }

        .popup-layout {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .mascot-image {
            width: 150px;
            flex-shrink: 0;
        }

        .mascot-image img {
            width: 100%;
            height: auto;
        }

        .speech-bubble {
            position: relative;
            background-color: #FFF3E0;
            border: 2px solid var(--secondary);
            border-radius: 15px;
            padding: 15px;
            margin-left: 15px;
        }

        .speech-bubble:before {
            content: "";
            position: absolute;
            left: -15px;
            top: 50%;
            transform: translateY(-50%);
            border-width: 15px 15px 15px 0;
            border-style: solid;
            border-color: transparent var(--secondary) transparent transparent;
        }

        .speech-bubble:after {
            content: "";
            position: absolute;
            left: -12px;
            top: 50%;
            transform: translateY(-50%);
            border-width: 12px 12px 12px 0;
            border-style: solid;
            border-color: transparent #FFF3E0 transparent transparent;
        }

        .japanese-text-popup {
            font-size: 18px;
            font-weight: bold;
            color: var(--primary);
            margin-bottom: 8px;
        }

        .english-text-popup {
            font-size: 16px;
            color: var(--dark);
        }

        .close-reminder-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .close-reminder-btn:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        @media (max-width: 600px) {
            .popup-layout {
                flex-direction: column;
            }
            
            .speech-bubble {
                margin-left: 0;
                margin-top: 15px;
            }
            
            .speech-bubble:before, .speech-bubble:after {
                left: 50%;
                top: -15px;
                transform: translateX(-50%) rotate(90deg);
            }
            
            .speech-bubble:after {
                top: -12px;
            }
        }
    </style>
</head>
<body>
    <header>
        <div id="date-info" class="date-info"></div>
        <h1>🎌 Japanese Vocab Builder (1.0)</h1>
        <div class="tts-system-selector">
            <label for="tts-system">音声システム: </label>
            <select id="tts-system">
                <option value="android" selected>Android</option>
                <option value="ios">iOS</option>
            </select>
        </div>
    </header>

    <div class="controls">
        <div class="left-controls">
            <button class="text-import-btn" id="text-import-btn">📝 単語をインポート</button>
        </div>
        <button class="japanese-to-english-btn" id="japanese-to-english-btn" disabled>👀 日本語→英語</button>
        <button class="listen-choose-btn" id="listen-choose-btn" disabled>🎧 聞いて選択</button>
        <button class="start-btn" id="start-btn" disabled>🎤 英語→日本語</button>
        <button class="ai-support-btn" id="ai-support-btn">💡 AI支援</button>
    </div>

    <table id="vocabulary-table">
        <thead>
            <tr>
                <th>
                    <div class="tts-speed-control">
                        <label for="tts-speed">日本語単語</label>
                        <select id="tts-speed">
                            <option value="0.6">0.6x</option>
                            <option value="0.8">0.8x</option>
                            <option value="1">1x</option>                                                       
                        </select>
                    </div>
                </th>
                <th>英語/意味</th>
                <th>
                    <label>
                        <input type="checkbox" id="select-all"> すべて選択
                    </label>
                </th>
            </tr>
        </thead>
        <tbody id="vocabulary-body">
            <tr>
                <td colspan="3" class="no-data">単語リストをインポートして開始してください</td>
            </tr>
        </tbody>
    </table>

    <!-- Text Import Modal -->
    <div id="text-import-modal" class="modal">
        <div class="modal-content">
            <h2>単語をインポート</h2>
            
            <!-- Button Sets -->
            <div class="preset-buttons">
                <!-- JLPT Buttons -->
                <div class="button-set jlpt-buttons">
                    <h3>JLPT レベル</h3>
                    <button class="preset-btn jlpt-btn" data-preset="jlptN5">N5 基本</button>
                    <button class="preset-btn jlpt-btn" data-preset="jlptN4">N4 中級</button>
                    <button class="preset-btn jlpt-btn" data-preset="jlptN3">N3 上級</button>
                </div>
                
                <!-- Kanji Buttons -->
                <div class="button-set kanji-buttons">
                    <h3>漢字学習</h3>
                    <button class="preset-btn kanji-btn" data-preset="kanji1">小学1年</button>
                    <button class="preset-btn kanji-btn" data-preset="kanji2">小学2年</button>
                    <button class="preset-btn kanji-btn" data-preset="kanji3">小学3年</button>
                </div>
                
                <!-- Grammar Buttons -->
                <div class="button-set grammar-buttons">
                    <h3>文法パターン</h3>
                    <button class="preset-btn grammar-btn" data-preset="grammar1">基本文法</button>
                    <button class="preset-btn grammar-btn" data-preset="grammar2">敬語</button>
                    <button class="preset-btn grammar-btn" data-preset="grammar3">助詞</button>
                </div>
                
                <!-- Other Button -->
                <div class="button-set other-buttons">
                    <h3>その他</h3>
                    <button class="preset-btn other-btn" data-preset="other1">日常会話</button>
                    <button class="preset-btn other-btn" data-preset="other2">ビジネス</button>
                </div>
            </div>
            
            <!-- Text Import Field -->
            <textarea id="text-import-content" placeholder="日本語=英語の形式で単語を入力してください..."></textarea>
            
            <!-- Action Buttons -->
            <div class="button-group">
                <button id="text-import-submit-btn" class="submit-btn">インポート</button>
                <button id="text-import-copy-btn" class="copy-btn">コピー</button>
                <button id="text-import-clear-btn" class="hint-btn">クリア</button>
                <button id="text-import-close-btn" class="close-btn">閉じる</button>
            </div>        
        </div>
    </div>

    <!-- AI Support Modal -->
    <div id="ai-support-modal" class="modal">
        <div class="modal-content">
            <h2>💡 AI支援ツール</h2>
            <div class="ai-support-links">
                <a href="https://jisho.org/" class="ai-support-link" target="_blank">🔍 Jisho辞書</a>
                <a href="https://chatgpt.com/" class="ai-support-link" target="_blank">🌟 例文生成</a>
                <a href="https://chatgpt.com/" class="ai-support-link" target="_blank">💬 会話練習</a>
                <a href="https://chatgpt.com/" class="ai-support-link" target="_blank">📚 文法説明</a>
                <a href="https://chatgpt.com/" class="ai-support-link" target="_blank">✏️ 漢字練習</a>
                <a href="https://chatgpt.com/" class="ai-support-link" target="_blank">🎯 JLPT対策</a>
                <a href="https://chatgpt.com/" class="ai-support-link" target="_blank">🗾 文化学習</a>
                <a href="https://chatgpt.com/" class="ai-support-link" target="_blank">📖 読解練習</a>
            </div>
            <div class="button-group">
                <button id="ai-support-close-btn" class="close-btn">閉じる</button>
            </div>
        </div>
    </div>

    <!-- Japanese to English Quiz Modal -->
    <div id="japanese-to-english-modal" class="modal">
        <div class="modal-content">
            <div class="prompt">この日本語の意味を考えて、答えを確認してください。</div>
            
            <div style="font-size: 32px; font-weight: bold; color: var(--japanese); margin: 20px 0; display: flex; align-items: center; justify-content: center; gap: 15px;">
                <span id="japanese-word-display" class="japanese-text"></span>
                <span class="speaker-icon" id="japanese-word-speaker" title="聞く" style="cursor: pointer; color: var(--secondary); font-size: 24px;">🔊</span>
            </div>
            
            <div id="english-answer-display" class="reveal-answer" style="display: none;"></div>
            <div id="check-question" style="display: none; font-size: 23px; color: var(--accent1); margin-top: 10px;">正解でしたか？</div>
            
            <div style="margin-top: 30px;">
                <button id="check-answer-btn" class="submit-btn" style="width: 100%; margin-bottom: 15px; padding: 15px;">答えを確認</button>
                
                <div class="button-group">
                    <button id="japanese-next-btn" class="next-btn">次へ</button>
                    <button id="japanese-close-btn" class="close-btn">閉じる</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Listen and Choose Modal -->
    <div id="listen-choose-modal" class="modal">
        <div class="modal-content">
            <h2>🎧 聞いて選択</h2>
            
            <!-- Answer Display Section -->
            <div class="listen-answer-section">
                <div id="listen-answer-display" class="listen-answer-display">スピーカーをクリック</div>
                <div class="listen-speaker" id="listen-speaker" title="音声再生">🔊</div>
            </div>
            
            <!-- Timer and Feedback Section -->
            <div class="timer-feedback-section">
                <div id="timer-feedback" class="timer-feedback"></div>
            </div>
            
            <!-- Choices Grid -->
            <div id="choices-grid" class="choices-grid">
                <!-- Choices will be dynamically generated -->
            </div>
            
            <!-- Control Buttons -->
            <div class="listen-controls">
                <button id="listen-next-btn" class="listen-next-btn">次へ</button>
                <button id="listen-close-btn" class="listen-close-btn">閉じる</button>
            </div>
        </div>
    </div>

    <!-- Quiz Modal -->
    <div id="quiz-modal" class="modal">
        <div class="modal-content">
            <div id="prompt" class="prompt">"<span id="translation-prompt"></span>" を日本語で言ってください。</div>
            <input type="text" id="answer-input" class="answer-input" placeholder="ここに答えを入力してください...">
            <div id="feedback" class="feedback"></div>
            <div id="hint-text" class="hint"></div>
            <div id="reveal-answer" class="reveal-answer"></div>
            <div class="button-group">
                <button id="submit-btn" class="submit-btn">✅ or ❎</button>
                <button id="speak-btn" class="speak-btn">🎤 音声入力</button>
                <button id="hint-btn" class="hint-btn">❓ ヒント</button>
                <button id="answer-btn" class="answer-btn">🔑 答え</button>
                <button id="next-btn" class="next-btn">次へ</button>
                <button id="close-btn" class="close-btn">閉じる</button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const japaneseToEnglishBtn = document.getElementById('japanese-to-english-btn');
        const japaneseToEnglishModal = document.getElementById('japanese-to-english-modal');
        const japaneseWordDisplay = document.getElementById('japanese-word-display');
        const japaneseWordSpeaker = document.getElementById('japanese-word-speaker');
        const englishAnswerDisplay = document.getElementById('english-answer-display');
        const checkQuestion = document.getElementById('check-question');
        const checkAnswerBtn = document.getElementById('check-answer-btn');
        const japaneseNextBtn = document.getElementById('japanese-next-btn');
        const japaneseCloseBtn = document.getElementById('japanese-close-btn');

        // Listen and Choose Modal Elements
        const listenChooseBtn = document.getElementById('listen-choose-btn');
        const listenChooseModal = document.getElementById('listen-choose-modal');
        const listenAnswerDisplay = document.getElementById('listen-answer-display');
        const listenSpeaker = document.getElementById('listen-speaker');
        const timerFeedback = document.getElementById('timer-feedback');
        const choicesGrid = document.getElementById('choices-grid');
        const listenNextBtn = document.getElementById('listen-next-btn');
        const listenCloseBtn = document.getElementById('listen-close-btn');

        const textImportBtn = document.getElementById('text-import-btn');
        const startBtn = document.getElementById('start-btn');
        const aiSupportBtn = document.getElementById('ai-support-btn');
        const vocabularyTable = document.getElementById('vocabulary-table');
        const vocabularyBody = document.getElementById('vocabulary-body');
        const selectAllCheckbox = document.getElementById('select-all');
        const quizModal = document.getElementById('quiz-modal');
        const translationPrompt = document.getElementById('translation-prompt');
        const answerInput = document.getElementById('answer-input');
        const feedbackEl = document.getElementById('feedback');
        const hintTextEl = document.getElementById('hint-text');
        const revealAnswerEl = document.getElementById('reveal-answer');
        const submitBtn = document.getElementById('submit-btn');
        const speakBtn = document.getElementById('speak-btn');
        const hintBtn = document.getElementById('hint-btn');
        const answerBtn = document.getElementById('answer-btn');
        const nextBtn = document.getElementById('next-btn');
        const closeBtn = document.getElementById('close-btn');
        const ttsSpeedSelect = document.getElementById('tts-speed');
        const ttsSystemSelect = document.getElementById('tts-system');
        
        // Text Import Modal Elements
        const textImportModal = document.getElementById('text-import-modal');
        const textImportContent = document.getElementById('text-import-content');
        const textImportSubmitBtn = document.getElementById('text-import-submit-btn');
        const textImportCloseBtn = document.getElementById('text-import-close-btn');
        const textImportClearBtn = document.getElementById('text-import-clear-btn');

        // AI Support Modal Elements
        const aiSupportModal = document.getElementById('ai-support-modal');
        const aiSupportCloseBtn = document.getElementById('ai-support-close-btn');

        // Variables
        let isSpeaking = false;
        let vocabularyData = [];
        let currentQuizWords = [];
        let currentWordIndex = -1;
        let currentWord = null;
        let recognition = null;
        let speechRate = 0.6;

        let currentJapaneseQuizWords = [];
        let currentJapaneseWordIndex = -1;
        let currentJapaneseWord = null;

        // Listen and Choose Quiz Variables
        let currentListenQuizWords = [];
        let currentListenWordIndex = -1;
        let currentListenWord = null;
        let questionStartTime = null;
        let isAnswered = false;

        // ===== JAPANESE TTS FUNCTIONS =====
        let voices = [];
        let voicesLoaded = false;
        let currentTTSSystem = 'android';

        // Load voices function
        function loadVoices() {
            return new Promise((resolve) => {
                voices = speechSynthesis.getVoices();
                
                if (voices.length > 0) {
                    voicesLoaded = true;
                    console.log('Voices loaded:', voices.length);
                    resolve(voices);
                } else {
                    const utterance = new SpeechSynthesisUtterance('');
                    utterance.volume = 0;
                    speechSynthesis.speak(utterance);
                    
                    setTimeout(() => {
                        voices = speechSynthesis.getVoices();
                        voicesLoaded = true;
                        console.log('Voices loaded after trigger:', voices.length);
                        resolve(voices);
                    }, 100);
                }
            });
        }

        // Get the best Japanese voice
        function getJapaneseVoice() {
            if (!voicesLoaded || voices.length === 0) {
                return null;
            }
            
            if (currentTTSSystem === 'ios') {
                const iosPreferredVoices = [
                    'Kyoko', // iOS Japanese female
                    'Otoya', // iOS Japanese male
                    'Japanese'
                ];
                
                for (const voiceName of iosPreferredVoices) {
                    const voice = voices.find(v => v.name.includes(voiceName));
                    if (voice) {
                        console.log('Using iOS Japanese voice:', voice.name);
                        return voice;
                    }
                }
            } else {
                const androidPreferredVoices = [
                    'Google 日本語', 
                    'Japanese (Japan)',
                    'ja-JP-language',
                    'Japanese Japan'
                ];
                
                for (const voiceName of androidPreferredVoices) {
                    const voice = voices.find(v => 
                        v.name.includes(voiceName) || 
                        v.name.toLowerCase().includes(voiceName.toLowerCase())
                    );
                    if (voice) {
                        console.log('Using Android Japanese voice:', voice.name);
                        return voice;
                    }
                }
            }
            
            // Fallback: find any Japanese voice
            const japaneseVoice = voices.find(v => 
                v.lang === 'ja-JP' || 
                v.lang.startsWith('ja-') ||
                v.name.toLowerCase().includes('japan')
            );
            
            if (japaneseVoice) {
                console.log(`Using fallback Japanese voice for ${currentTTSSystem}:`, japaneseVoice.name);
                return japaneseVoice;
            }
            
            console.log(`Using first available voice for ${currentTTSSystem}:`, voices[0]?.name);
            return voices[0] || null;
        }

        // Japanese speak function
        function speakJapanese(text) {
            console.log('Speak Japanese function called with:', text, 'System:', currentTTSSystem);
            
            if (!('speechSynthesis' in window)) {
                console.warn('Speech synthesis not supported');
                return;
            }

            const cleanText = text.replace(/[()[\]*]/g, '').trim();
            
            if (!cleanText) return;

            speechSynthesis.cancel();
            
            setTimeout(() => {
                const utterance = new SpeechSynthesisUtterance(cleanText);
                
                const preferredVoice = getJapaneseVoice();
                if (preferredVoice) {
                    utterance.voice = preferredVoice;
                }
                
                utterance.lang = 'ja-JP';
                utterance.rate = speechRate;
                utterance.pitch = 1.0;
                utterance.volume = 1.0;
                
                if (currentTTSSystem === 'ios') {
                    utterance.rate = Math.max(0.5, speechRate * 0.9);
                } else {
                    utterance.rate = speechRate;
                    utterance.pitch = 0.95;
                }
                
                utterance.onstart = function() {
                    console.log('Japanese speech started successfully');
                };
                
                utterance.onend = function() {
                    console.log('Japanese speech ended normally');
                    isSpeaking = false;
                };

                utterance.onerror = function(event) {
                    console.error('Japanese speech error:', event.error);
                    isSpeaking = false;
                };

                try {
                    speechSynthesis.speak(utterance);
                } catch (error) {
                    console.error('Failed to start Japanese speech synthesis:', error);
                }
            }, 100);
        }

        // Initialize TTS
        async function initializeTTS() {
            console.log('Initializing Japanese TTS...');
            
            const testUtterance = new SpeechSynthesisUtterance('');
            testUtterance.volume = 0;
            speechSynthesis.speak(testUtterance);
            
            await new Promise(resolve => setTimeout(resolve, 200));
            
            await loadVoices();
            
            if (voices.length === 0) {
                console.log('No voices found, trying again...');
                await new Promise(resolve => setTimeout(resolve, 500));
                await loadVoices();
            }
            
            console.log('Japanese TTS initialization complete. Voices:', voices.length);
            
            speechSynthesis.addEventListener('voiceschanged', () => {
                console.log('Voices changed event fired');
                loadVoices();
            });
        }

        // Initialize Speech Recognition for Japanese
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'ja-JP';
            recognition.continuous = false;
            recognition.interimResults = false;

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript.trim();
                answerInput.value = transcript;
                speakBtn.textContent = '🎤 音声入力';
                speakBtn.classList.remove('recording');
            };

            recognition.onend = function() {
                speakBtn.textContent = '🎤 音声入力';
                speakBtn.classList.remove('recording');
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error', event.error);
                speakBtn.textContent = '🎤 音声入力';
                speakBtn.classList.remove('recording');
            };
        }

        // TTS Speed change handler
        ttsSpeedSelect.addEventListener('change', (e) => {
            speechRate = parseFloat(e.target.value);
        });

        // TTS System change handler
        ttsSystemSelect.addEventListener('change', (e) => {
            currentTTSSystem = e.target.value;
            console.log(`Switched to ${currentTTSSystem} TTS system`);
            
            loadVoices().then(() => {
                console.log(`Voice loading complete for ${currentTTSSystem}`);
            });
        });

        // AI Support button click handler
        aiSupportBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'flex';
        });

        aiSupportCloseBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'none';
        });

        // Text Import button click handler
        textImportBtn.addEventListener('click', () => {
            textImportModal.style.display = 'flex';
        });

        textImportCloseBtn.addEventListener('click', () => {
            textImportModal.style.display = 'none';
        });

        // Preset vocabulary data
        const presetVocabulary = {
            jlptN5: `◎JLPT N5 基本単語
こんにちは=Hello
ありがとう=Thank you
すみません=Excuse me / Sorry
はい=Yes
いいえ=No
わたし=I / Me
あなた=You
これ=This
それ=That
あれ=That (over there)
ここ=Here
そこ=There
あそこ=Over there
いま=Now
きょう=Today
あした=Tomorrow
きのう=Yesterday
おいしい=Delicious
たかい=Expensive / High
やすい=Cheap
あたらしい=New
ふるい=Old
おおきい=Big
ちいさい=Small
あつい=Hot
さむい=Cold
たべる=To eat
のむ=To drink
いく=To go
くる=To come
みる=To see / To watch
きく=To listen / To hear
よむ=To read
かく=To write
はなす=To speak / To talk
やすむ=To rest
ねる=To sleep
おきる=To wake up
はたらく=To work
べんきょうする=To study`,

            jlptN4: `◎JLPT N4 中級単語
けっこん=Marriage
りょこう=Travel
びょうき=Illness
けんこう=Health
しごと=Work / Job
がっこう=School
びょういん=Hospital
えき=Station
くうこう=Airport
ホテル=Hotel
レストラン=Restaurant
でんしゃ=Train
バス=Bus
じてんしゃ=Bicycle
くるま=Car
ひこうき=Airplane
てんき=Weather
あめ=Rain
ゆき=Snow
かぜ=Wind
おんがく=Music
えいが=Movie
ほん=Book
しんぶん=Newspaper
テレビ=Television
でんわ=Telephone
コンピューター=Computer
いんたーねっと=Internet
かいもの=Shopping
りょうり=Cooking
せんたく=Laundry
そうじ=Cleaning
うんどう=Exercise
さんぽ=Walk
やくそく=Promise
しっぱい=Failure
せいこう=Success
もんだい=Problem
かいけつ=Solution
けいけん=Experience`,

            jlptN3: `◎JLPT N3 上級単語
しゃかい=Society
ぶんか=Culture
でんとう=Tradition
ぎじゅつ=Technology
かんきょう=Environment
せいじ=Politics
けいざい=Economy
きょういく=Education
いりょう=Medical care
こうつう=Transportation
さいがい=Disaster
ちきゅう=Earth
うちゅう=Space
れきし=History
ちり=Geography
かがく=Science
すうがく=Mathematics
ぶつり=Physics
かがく=Chemistry
せいぶつ=Biology
しんり=Psychology
てつがく=Philosophy
げいじゅつ=Art
ぶんがく=Literature
おんがく=Music
えんげき=Theater
うんどう=Sports
きょうそう=Competition
せいさく=Policy
せいど=System
そしき=Organization
だんたい=Group
こうじょう=Factory
きぎょう=Company
しじょう=Market
こうこく=Advertisement
じょうほう=Information
データ=Data
けんきゅう=Research
かいはつ=Development`,

            kanji1: `◎小学1年生の漢字
一=One
二=Two
三=Three
四=Four
五=Five
六=Six
七=Seven
八=Eight
九=Nine
十=Ten
百=Hundred
千=Thousand
人=Person
大=Big
小=Small
上=Up / Above
下=Down / Below
左=Left
右=Right
中=Middle / Inside
外=Outside
前=Front / Before
後=Back / After
山=Mountain
川=River
火=Fire
水=Water
木=Tree
金=Gold / Money
土=Soil
日=Sun / Day
月=Moon / Month
年=Year
時=Time
分=Minute
白=White
黒=Black
赤=Red
青=Blue
入=Enter
出=Exit
手=Hand
足=Foot`,

            kanji2: `◎小学2年生の漢字
東=East
西=West
南=South
北=North
間=Between / Room
近=Near
遠=Far
高=High / Tall
安=Cheap / Safe
新=New
古=Old
多=Many
少=Few
長=Long
短=Short
強=Strong
弱=Weak
早=Early
遅=Late
明=Bright
暗=Dark
熱=Hot
冷=Cold
重=Heavy
軽=Light
太=Fat / Thick
細=Thin
広=Wide
狭=Narrow
深=Deep
浅=Shallow
難=Difficult
易=Easy
正=Correct
違=Wrong
好=Like
嫌=Dislike
有=Have
無=None`,

            kanji3: `◎小学3年生の漢字
学=Study
校=School
生=Life / Student
先=Before / Teacher
時=Time
間=Time / Room
今=Now
後=After / Behind
毎=Every
週=Week
曜=Day of week
昼=Noon
夜=Night
朝=Morning
夕=Evening
春=Spring
夏=Summer
秋=Autumn
冬=Winter
暖=Warm
涼=Cool
晴=Clear weather
雨=Rain
雪=Snow
風=Wind
雲=Cloud
空=Sky / Empty
海=Ocean
池=Pond
島=Island
橋=Bridge
駅=Station
道=Road
車=Car
電=Electricity
話=Talk / Story
語=Language / Word
文=Sentence
字=Character
読=Read
書=Write
聞=Listen
見=See
思=Think`,

            grammar1: `◎基本文法パターン
です=Is / To be (polite)
である=Is / To be (formal)
だ=Is / To be (casual)
ではない=Is not
じゃない=Is not (casual)
ます=Polite verb ending
ません=Negative polite verb ending
ました=Past tense polite
ませんでした=Past negative polite
る=Verb ending (ichidan)
う=Verb ending (godan)
た=Past tense (casual)
ない=Negative (casual)
て=Te-form connector
で=Particle (by means of)
に=Particle (to/at/in)
を=Object particle
が=Subject particle
は=Topic particle
も=Also particle
の=Possessive particle
から=From / Because
まで=Until / To
と=And / With
や=And (incomplete list)
けれど=But / However
でも=But / However
そして=And then
それから=And then / After that
だから=Therefore / So
しかし=However
でも=However / But`,

            grammar2: `◎敬語 (Keigo)
いらっしゃいませ=Welcome (to customers)
いらっしゃる=To be (honorific)
おいでになる=To come/go (honorific)
めしあがる=To eat (honorific)
おのみになる=To drink (honorific)
ごらんになる=To see (honorific)
おっしゃる=To say (honorific)
なさる=To do (honorific)
くださる=To give (honorific)
いただく=To receive (humble)
もうしあげる=To say (humble)
うかがう=To visit/ask (humble)
まいる=To go/come (humble)
おる=To be (humble)
いたす=To do (humble)
さしあげる=To give (humble)
はいけん=To see (humble)
ちょうだい=To receive (humble)
きんちょう=Tension/nervousness
れいぎ=Etiquette
そんけい=Respect
けんじょう=Humility
ていねい=Polite
しつれい=Rudeness
ごあいさつ=Greeting
おじぎ=Bow
めいし=Business card
おきゃくさま=Customer (honorific)
せんせい=Teacher (respectful)
しゃちょう=Company president`,

            grammar3: `◎助詞 (Particles)
が=Subject marker
を=Object marker
に=Direction/time/purpose
へ=Direction
で=Location of action/means
と=And/with/quotation
や=Incomplete listing
の=Possessive/modification
は=Topic marker
も=Also/too
から=From/because/since
まで=Until/up to
より=Than/from
ので=Because/since
のに=Although/despite
けれど=But/however
けれども=But/however (formal)
が=But/however
でも=But/however
それで=Therefore/so
だから=Therefore/because
そこで=Therefore/so
ところで=By the way
ちなみに=Incidentally
たとえば=For example
つまり=In other words
すなわち=That is to say
しかし=However
ただし=However/but
もし=If
もしも=If (emphatic)
たとえ=Even if
まさか=Surely not
きっと=Surely/certainly
たぶん=Probably
もしかして=Perhaps/maybe`,

            other1: `◎日常会話
おはよう=Good morning (casual)
おはようございます=Good morning (polite)
こんにちは=Good afternoon
こんばんは=Good evening
おやすみ=Good night (casual)
おやすみなさい=Good night (polite)
さようなら=Goodbye (formal)
また明日=See you tomorrow
また今度=See you next time
お疲れさま=Good work/Thank you for your hard work
ありがとうございます=Thank you (polite)
どういたしまして=You're welcome
すみません=Excuse me/I'm sorry
ごめんなさい=I'm sorry (polite)
ごめん=Sorry (casual)
いただきます=Before eating (gratitude for food)
ごちそうさま=After eating (gratitude for food)
はじめまして=Nice to meet you
よろしくお願いします=Please treat me favorably
お元気ですか=How are you?
元気です=I'm fine
そうですね=That's right/I agree
そうですか=Is that so?
わかりません=I don't understand
わかりました=I understand
ちょっと待って=Wait a moment
お先に失礼します=Excuse me for leaving first
お疲れさまでした=Thank you for your hard work (past tense)
いらっしゃい=Welcome (casual)
どうぞ=Please go ahead/Here you are
どうも=Thanks (casual)/Somehow`,

            other2: `◎ビジネス日本語
会社=Company
社員=Company employee
部長=Department manager
課長=Section chief
主任=Supervisor
同僚=Colleague
上司=Boss/superior
部下=Subordinate
営業=Sales
企画=Planning
開発=Development
人事=Human resources
経理=Accounting
総務=General affairs
会議=Meeting
打ち合わせ=Business meeting
資料=Materials/documents
報告=Report
提案=Proposal
契約=Contract
取引=Business transaction
顧客=Customer
売上=Sales revenue
利益=Profit
予算=Budget
締切=Deadline
スケジュール=Schedule
プロジェクト=Project
業績=Performance
成果=Results
目標=Goal/target
課題=Task/issue
問題=Problem
解決=Solution
改善=Improvement
効率=Efficiency
品質=Quality
サービス=Service
お客様=Customer (respectful)
いらっしゃいませ=Welcome (to store/office)`
        };

        // Add event listeners to all preset buttons
        document.querySelectorAll('.preset-btn').forEach(button => {
            button.addEventListener('click', () => {
                const presetKey = button.dataset.preset;
                if (presetVocabulary[presetKey]) {
                    textImportContent.value = presetVocabulary[presetKey];
                }
            });
        });

        // Text Import Submit button click handler
        textImportSubmitBtn.addEventListener('click', () => {
            const text = textImportContent.value.trim();
            if (!text) {
                alert('インポートする前に単語ペアを入力してください。');
                return;
            }
            
            processTextImport(text);
            textImportModal.style.display = 'none';
        });

        // Text Import Clear button click handler
        textImportClearBtn.addEventListener('click', () => {
            textImportContent.value = '';
        });

        function processTextImport(text) {
            vocabularyData = [];
            const lines = text.split('\n');
            
            let currentSection = "デフォルト";
            
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                if (!line) continue;
                
                // Check if this is a section header
                if (line.includes('◎') || line.includes('#')) {
                    currentSection = line.replace('◎', '').replace('#', '').trim();
                    continue;
                }
                
                const parts = line.split('=');
                if (parts.length < 2) continue;
                
                const vocabulary = parts[0].trim();
                const translation = parts[1].trim();
                
                if (vocabulary && translation) {
                    vocabularyData.push({
                        vocabulary: vocabulary,
                        translation: translation,
                        selected: true,
                        section: currentSection
                    });
                }
            }
            
            renderVocabularyTable();
            if (vocabularyData.length > 0) {
                startBtn.disabled = false;
                japaneseToEnglishBtn.disabled = false;
                listenChooseBtn.disabled = false;
            }
        }

        // Copy button click handler
        const textImportCopyBtn = document.getElementById('text-import-copy-btn');

        textImportCopyBtn.addEventListener('click', () => {
            const textToCopy = textImportContent.value;
            if (!textToCopy) {
                alert('コピーするテキストがありません。');
                return;
            }
            
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    const originalText = textImportCopyBtn.textContent;
                    textImportCopyBtn.textContent = 'コピー完了!';
                    
                    setTimeout(() => {
                        textImportCopyBtn.textContent = originalText;
                    }, 1500);
                })
                .catch(err => {
                    console.error('Failed to copy text: ', err);
                    alert('テキストのコピーに失敗しました。もう一度お試しください。');
                });
        });

        function renderVocabularyTable() {
            if (vocabularyData.length === 0) {
                vocabularyBody.innerHTML = '<tr><td colspan="3" class="no-data">単語リストをインポートして開始してください</td></tr>';
                return;
            }
            
            vocabularyBody.innerHTML = '';
            
            // Group items by section
            const sectionMap = {};
            vocabularyData.forEach(item => {
                if (!sectionMap[item.section]) {
                    sectionMap[item.section] = [];
                }
                sectionMap[item.section].push(item);
            });
            
            // Render each section
            Object.keys(sectionMap).forEach(sectionName => {
                const sectionItems = sectionMap[sectionName];
                
                // Add section header row
                const sectionRow = document.createElement('tr');
                sectionRow.className = 'section-header';
                
                const sectionCell = document.createElement('td');
                sectionCell.colSpan = 2;
                sectionCell.textContent = sectionName;
                sectionCell.style.fontWeight = 'bold';
                sectionCell.style.backgroundColor = 'var(--dark)';
                sectionCell.style.color = 'var(--light)';
                sectionCell.style.padding = '10px 15px';
                
                const sectionCheckCell = document.createElement('td');
                const sectionCheckbox = document.createElement('input');
                sectionCheckbox.type = 'checkbox';
                sectionCheckbox.checked = sectionItems.every(item => item.selected);
                sectionCheckbox.dataset.section = sectionName;
                sectionCheckbox.addEventListener('change', (e) => {
                    const isChecked = e.target.checked;
                    const section = e.target.dataset.section;
                    
                    vocabularyData.forEach((item, index) => {
                        if (item.section === section) {
                            item.selected = isChecked;
                            const checkbox = document.querySelector(`input[data-index="${index}"]`);
                            if (checkbox) checkbox.checked = isChecked;
                        }
                    });
                    
                    updateSelectAllCheckbox();
                });
                
                sectionCheckCell.appendChild(sectionCheckbox);
                sectionRow.appendChild(sectionCell);
                sectionRow.appendChild(sectionCheckCell);
                vocabularyBody.appendChild(sectionRow);
                
                // Add vocabulary items for this section
                sectionItems.forEach((item, localIndex) => {
                    const index = vocabularyData.findIndex(vItem => 
                        vItem.vocabulary === item.vocabulary && 
                        vItem.translation === item.translation);
                    
                    const row = document.createElement('tr');
                    
                    // Vocabulary column with speaker
                    const wordCell = document.createElement('td');
                    const cleanWord = item.vocabulary.replace(/\(.*\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                    
                    wordCell.innerHTML = `
                        <div class="japanese-text">${item.vocabulary}</div>
                        <span class="speaker-icon" title="聞く" data-word="${cleanWord}">🔊</span>
                    `;
                    
                    // Translation column
                    const translationCell = document.createElement('td');
                    translationCell.textContent = item.translation;
                    
                    // Checkbox column
                    const checkboxCell = document.createElement('td');
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.checked = item.selected;
                    checkbox.dataset.index = index;
                    checkbox.dataset.section = item.section;
                    checkbox.addEventListener('change', (e) => {
                        vocabularyData[index].selected = e.target.checked;
                        updateSectionCheckbox(item.section);
                        updateSelectAllCheckbox();
                    });
                    checkboxCell.appendChild(checkbox);
                    
                    row.appendChild(wordCell);
                    row.appendChild(translationCell);
                    row.appendChild(checkboxCell);
                    vocabularyBody.appendChild(row);
                });
            });
            
            // Add event listeners to speaker icons
            document.querySelectorAll('.speaker-icon').forEach(icon => {
                icon.addEventListener('click', (e) => {
                    const word = e.target.dataset.word;
                    speakJapanese(word);
                });
            });
            
            updateSelectAllCheckbox();
        }

        function updateSectionCheckbox(sectionName) {
            const sectionItems = vocabularyData.filter(item => item.section === sectionName);
            const allSelected = sectionItems.every(item => item.selected);
            const noneSelected = sectionItems.every(item => !item.selected);
            
            const sectionCheckbox = document.querySelector(`input[data-section="${sectionName}"]`);
            if (sectionCheckbox) {
                sectionCheckbox.checked = allSelected;
                sectionCheckbox.indeterminate = !allSelected && !noneSelected;
            }
        }

        function updateSelectAllCheckbox() {
            if (vocabularyData.length === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
                return;
            }
            
            const selectedCount = vocabularyData.filter(item => item.selected).length;
            
            if (selectedCount === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            } else if (selectedCount === vocabularyData.length) {
                selectAllCheckbox.checked = true;
                selectAllCheckbox.indeterminate = false;
            } else {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = true;
            }
        }

        // Update the global "Select All" checkbox handler
        selectAllCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            
            vocabularyData.forEach(item => {
                item.selected = isChecked;
            });
            
            document.querySelectorAll('#vocabulary-body input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = isChecked;
                if (checkbox.dataset.section) {
                    checkbox.indeterminate = false;
                }
            });
        });

        // Listen and Choose Quiz Functions
        function startListenAndChooseQuiz() {
            currentListenQuizWords = vocabularyData.filter(item => item.selected);
            if (currentListenQuizWords.length === 0) {
                alert('クイズを開始するには少なくとも8個の単語を選択してください。');
                return;
            }
            
            if (currentListenQuizWords.length < 8) {
                alert('クイズを開始するには少なくとも8個の単語を選択してください。');
                return;
            }
            
            resetListenAndChooseQuiz();
            listenChooseModal.style.display = 'flex';
            nextListenQuestion();
        }

        function resetListenAndChooseQuiz() {
            currentListenWordIndex = -1;
            currentListenWord = null;
            questionStartTime = null;
            isAnswered = false;
            listenAnswerDisplay.textContent = 'スピーカーをクリック';
            timerFeedback.textContent = '';
        }

        function nextListenQuestion() {
            isAnswered = false;
            questionStartTime = null;
            listenAnswerDisplay.textContent = 'スピーカーをクリック';
            timerFeedback.textContent = '';
            
            const previousIndex = currentListenWordIndex;
            
            if (currentListenQuizWords.length === 1) {
                currentListenWordIndex = 0;
            } else {
                do {
                    currentListenWordIndex = Math.floor(Math.random() * currentListenQuizWords.length);
                } while (currentListenWordIndex === previousIndex && currentListenQuizWords.length > 1);
            }
            
            currentListenWord = currentListenQuizWords[currentListenWordIndex];
            
            generateChoices();
        }

        function generateChoices() {
            if (!currentListenWord) return;
            
            const otherTranslations = currentListenQuizWords
                .filter(item => item.translation !== currentListenWord.translation)
                .map(item => item.translation);
            
            const shuffled = otherTranslations.sort(() => 0.5 - Math.random());
            const selectedChoices = shuffled.slice(0, 7);
            
            const allChoices = [...selectedChoices, currentListenWord.translation];
            
            const finalChoices = allChoices.sort(() => 0.5 - Math.random());
            
            choicesGrid.innerHTML = '';
            
            finalChoices.forEach(choice => {
                const button = document.createElement('button');
                button.className = 'choice-button';
                button.textContent = choice;
                button.addEventListener('click', () => handleChoiceClick(button, choice));
                choicesGrid.appendChild(button);
            });
        }

        function handleChoiceClick(button, selectedChoice) {
            if (isAnswered) return;
            
            isAnswered = true;
            const responseTime = questionStartTime ? (Date.now() - questionStartTime) / 1000 : 0;
            
            document.querySelectorAll('.choice-button').forEach(btn => {
                btn.disabled = true;
            });
            
            const isCorrect = selectedChoice === currentListenWord.translation;
            
            if (isCorrect) {
                button.classList.add('correct');
                listenAnswerDisplay.textContent = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                
                let feedbackMessage = '';
                if (responseTime < 2) {
                    feedbackMessage = '完璧！ ⚡';
                    speakJapanese('完璧');
                } else if (responseTime < 3.5) {
                    feedbackMessage = 'よくできました！ 👍';
                    speakJapanese('よくできました');
                } else if (responseTime < 6) {
                    feedbackMessage = 'もっと早く！ ⏰';
                    speakJapanese('もっと早く');
                } else {
                    feedbackMessage = '遅すぎます... 😴';
                    speakJapanese('遅すぎます');
                }
                
                timerFeedback.textContent = `${feedbackMessage} (${responseTime.toFixed(1)}秒かかりました。)`;
                timerFeedback.className = 'timer-feedback correct';
            } else {
                button.classList.add('incorrect');
                document.querySelectorAll('.choice-button').forEach(btn => {
                    if (btn.textContent === currentListenWord.translation) {
                        btn.classList.add('correct');
                    }
                });
                
                timerFeedback.textContent = '間違いです！ 😓❌';
                timerFeedback.className = 'timer-feedback incorrect';
                speakJapanese('間違いです');
                
                listenAnswerDisplay.textContent = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
            }
        }

        // Listen and Choose event handlers
        listenChooseBtn.addEventListener('click', startListenAndChooseQuiz);

        listenSpeaker.addEventListener('click', () => {
            if (currentListenWord && !isAnswered) {
                const cleanWord = currentListenWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                speakJapanese(cleanWord);
                
                if (!questionStartTime) {
                    questionStartTime = Date.now();
                }
            }
        });

        listenNextBtn.addEventListener('click', nextListenQuestion);

        listenCloseBtn.addEventListener('click', () => {
            listenChooseModal.style.display = 'none';
        });

        // Japanese to English Quiz button handler
        japaneseToEnglishBtn.addEventListener('click', () => {
            currentJapaneseQuizWords = vocabularyData.filter(item => item.selected);
            if (currentJapaneseQuizWords.length === 0) {
                alert('クイズを開始するには少なくとも1つの単語を選択してください。');
                return;
            }
            startJapaneseToEnglishQuiz();
        });

        // Japanese to English Quiz Modal event listeners
        checkAnswerBtn.addEventListener('click', showEnglishAnswer);
        japaneseNextBtn.addEventListener('click', nextJapaneseQuestion);
        japaneseCloseBtn.addEventListener('click', () => {
            japaneseToEnglishModal.style.display = 'none';
        });

        japaneseWordSpeaker.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            if (isSpeaking) {
                console.log('Already speaking, ignoring click');
                return;
            }
            
            if (currentJapaneseWord) {
                isSpeaking = true;
                const cleanWord = currentJapaneseWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
                console.log('About to speak Japanese:', cleanWord);
                
                speakJapanese(cleanWord);
                
                setTimeout(() => {
                    isSpeaking = false;
                }, 3000);
            }
        });

        // Start Quiz button handler (English to Japanese)
        startBtn.addEventListener('click', () => {
            currentQuizWords = vocabularyData.filter(item => item.selected);
            
            if (currentQuizWords.length === 0) {
                alert('クイズを開始するには少なくとも1つの単語を選択してください。');
                return;
            }
            
            startQuiz();
        });

        // Start the quiz (English to Japanese)
        function startQuiz() {
            resetQuiz();
            quizModal.style.display = 'flex';
            nextQuestion();
        }

        // Reset quiz state
        function resetQuiz() {
            currentWordIndex = -1;
            currentWord = null;
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
        }

        // Load the next question
        function nextQuestion() {
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
            
            const previousIndex = currentWordIndex;
            
            if (currentQuizWords.length === 1) {
                currentWordIndex = 0;
            } else {
                do {
                    currentWordIndex = Math.floor(Math.random() * currentQuizWords.length);
                } while (currentWordIndex === previousIndex && currentQuizWords.length > 1);
            }
            
            currentWord = currentQuizWords[currentWordIndex];
            translationPrompt.textContent = currentWord.translation;
        }

        // Submit answer
        function submitAnswer() {
            if (!currentWord) return;
            
            const userAnswer = answerInput.value.trim().toLowerCase();
            const correctAnswers = currentWord.vocabulary
                .split('/')
                .map(ans => ans.replace(/\(.*?\)/g, '').trim().toLowerCase());
            
            const normalizedUserAnswer = userAnswer.replace(/[.,?''…\/#!$%\^&\*;:{}=\-_`~()]/g, "");
            
            const isCorrect = correctAnswers.some(answer => {
                const normalizedAnswer = answer.replace(/[.,?''…\/#!$%\^&\*;:{}=\-_`~()]/g, "");
                return normalizedUserAnswer === normalizedAnswer;
            });
            
            if (isCorrect) {
                feedbackEl.textContent = 'よくできました！ 🏆😊👍';
                feedbackEl.className = 'feedback correct';
                speakJapanese('よくできました');
            } else {
                feedbackEl.textContent = 'もう一度挑戦してください！ 🔥🔥🔥';
                feedbackEl.className = 'feedback incorrect';
                speakJapanese('もう一度挑戦してください');
            }
        }

        // Show hint
        function showHint() {
            if (!currentWord) return;
            
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            const firstChar = correctAnswer.charAt(0);
            
            hintTextEl.textContent = `最初の文字は「${firstChar}」です。`;
        }

        // Show answer
        function showAnswer() {
            if (!currentWord) return;
            
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').replace(/\*/g, '').replace(/\[.*?\]/g, '').trim();
            revealAnswerEl.textContent = `${correctAnswer}`;
            speakJapanese(correctAnswer);
        }

        // Start Japanese to English Quiz
        function startJapaneseToEnglishQuiz() {
            console.log('Starting Japanese to English quiz');
            console.log('Voices loaded:', voicesLoaded, 'Voice count:', voices.length);
            
            if (!voicesLoaded || voices.length === 0) {
                console.log('Loading voices before starting quiz...');
                loadVoices().then(() => {
                    console.log('Voices loaded, starting quiz');
                    resetJapaneseToEnglishQuiz();
                    japaneseToEnglishModal.style.display = 'flex';
                    nextJapaneseQuestion();
                });
            } else {
                resetJapaneseToEnglishQuiz();
                japaneseToEnglishModal.style.display = 'flex';
                nextJapaneseQuestion();
            }
        }

        // Reset Japanese to English quiz state
        function resetJapaneseToEnglishQuiz() {
            currentJapaneseWordIndex = -1;
            currentJapaneseWord = null;
            englishAnswerDisplay.style.display = 'none';
            checkQuestion.style.display = 'none';
            checkAnswerBtn.style.display = 'block';
        }

        // Load next Japanese question
        function nextJapaneseQuestion() {
            englishAnswerDisplay.style.display = 'none';
            checkQuestion.style.display = 'none';
            checkAnswerBtn.style.display = 'block';
            
            const previousIndex = currentJapaneseWordIndex;
            
            if (currentJapaneseQuizWords.length === 1) {
                currentJapaneseWordIndex = 0;
            } else {
                do {
                    currentJapaneseWordIndex = Math.floor(Math.random() * currentJapaneseQuizWords.length);
                } while (currentJapaneseWordIndex === previousIndex && currentJapaneseQuizWords.length > 1);
            }
            
            currentJapaneseWord = currentJapaneseQuizWords[currentJapaneseWordIndex];
            const cleanWord = currentJapaneseWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            japaneseWordDisplay.textContent = cleanWord;
        }

        // Show English answer
        function showEnglishAnswer() {
            if (!currentJapaneseWord) return;
            
            englishAnswerDisplay.textContent = currentJapaneseWord.translation;
            englishAnswerDisplay.style.display = 'block';
            checkQuestion.style.display = 'block';
            checkAnswerBtn.style.display = 'none';
        }

        // Event Listeners for Quiz Modal
        submitBtn.addEventListener('click', submitAnswer);
        
        answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                submitAnswer();
            }
        });
        
        speakBtn.addEventListener('click', () => {
            if (!recognition) {
                alert('お使いのブラウザでは音声認識がサポートされていません。');
                return;
            }
            
            try {
                if (speakBtn.textContent === '🎤 音声入力') {
                    recognition.start();
                    speakBtn.textContent = '録音中';
                    speakBtn.classList.add('recording');
                } else {
                    recognition.stop();
                    speakBtn.textContent = '🎤 音声入力';
                    speakBtn.classList.remove('recording');
                }
            } catch (error) {
                console.error('Speech recognition error:', error);
                speakBtn.textContent = '🎤 音声入力';
                speakBtn.classList.remove('recording');
            }
        });
        
        hintBtn.addEventListener('click', showHint);
        
        answerBtn.addEventListener('click', showAnswer);
        
        nextBtn.addEventListener('click', nextQuestion);
        
        closeBtn.addEventListener('click', () => {
            quizModal.style.display = 'none';
            if (recognition) {
                recognition.stop();
            }
        });

        // Date information display
        function updateDateInfo() {
            const dateInfoEl = document.getElementById('date-info');
            
            const options = { 
                timeZone: 'Asia/Tokyo',
                weekday: 'long', 
                month: 'long', 
                day: 'numeric', 
                year: 'numeric'
            };
            const today = new Date();
            const japanDate = today.toLocaleDateString('ja-JP', options);
            
            // Calculate days until JLPT (typically held in July and December)
            const nextJLPT = new Date('July 7, 2025'); // Adjust as needed
            nextJLPT.setHours(0, 0, 0, 0);
            const todayNoTime = new Date(today);
            todayNoTime.setHours(0, 0, 0, 0);
            const daysUntilJLPT = Math.ceil((nextJLPT - todayNoTime) / (1000 * 60 * 60 * 24));
            
            // Calculate days until Japanese New Year
            const newYear = new Date('January 1, 2026');
            newYear.setHours(0, 0, 0, 0);
            const daysUntilNewYear = Math.ceil((newYear - todayNoTime) / (1000 * 60 * 60 * 24));
            
            dateInfoEl.innerHTML = `
                <span><span class="emoji">📅</span>${japanDate}</span><br>
                <span><span class="emoji">🎌</span><span class="countdown">${daysUntilJLPT}</span> days until JLPT</span>
                <span><span class="emoji">🎊</span><span class="countdown">${daysUntilNewYear}</span> days until New Year</span>
            `;
        }

        updateDateInfo();
        setInterval(updateDateInfo, 60000);

        // Initialize TTS when page loads
        document.addEventListener('DOMContentLoaded', () => {
            initializeTTS();
        });

        document.addEventListener('click', function initOnFirstClick() {
            initializeTTS();
            document.removeEventListener('click', initOnFirstClick);
        }, { once: true });
    </script>

    <footer class="visitor-counter">
        <div id="visitor-count">👥 訪問者数を読み込み中...</div>
    </footer>

    <div id="refresh-reminder-popup" class="popup-container">
        <div class="popup-content">
            <div class="popup-layout">
                <div class="mascot-image">
                    <div style="width: 150px; height: 150px; background: linear-gradient(45deg, #FF6B6B, #4ECDC4); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 60px;">🎌</div>
                </div>
                <div class="speech-bubble">
                    <p class="japanese-text-popup">毎回使用する前に「リフレッシュ🔄」をクリックして更新を取得してください！</p>
                    <p class="english-text-popup">音声機能が動作しない場合は、デバイスを再起動してください。iOS/iPhoneユーザーの音声機能は最適化されています。</p>
                </div>
            </div>
            <button id="close-reminder-btn" class="close-reminder-btn">わかりました (Got it!)</button>
        </div>
    </div>

    <script>
        // Visitor counter (simplified for Japanese version)
        function initVisitorCounter() {
            try {
                const today = new Date().toISOString().split('T')[0];
                const hasVisitedToday = localStorage.getItem('visited_jp_' + today);
                
                if (!hasVisitedToday) {
                    localStorage.setItem('visited_jp_' + today, 'true');
                }
                
                // Simple visitor count display
                document.getElementById('visitor-count').innerHTML = "🎌 Japanese Vocab Builder へようこそ！";
            } catch (e) {
                console.error("Error with visitor counter:", e);
                document.getElementById('visitor-count').innerHTML = "🎌 Japanese Vocab Builder へようこそ！";
            }
        }

        initVisitorCounter();

        // Refresh Reminder Popup functionality
        document.addEventListener('DOMContentLoaded', () => {
            const refreshReminderPopup = document.getElementById('refresh-reminder-popup');
            
            setTimeout(() => {
                refreshReminderPopup.style.display = 'flex';
            }, 1000);
            
            const closeReminderBtn = document.getElementById('close-reminder-btn');
            closeReminderBtn.addEventListener('click', () => {
                refreshReminderPopup.style.display = 'none';
            });
        });
    </script>
</body>
</html>