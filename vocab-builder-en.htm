<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vocab Builder</title>
    <style>
        :root {
            --primary: #D33E43;      /* Vibrant Red */
            --secondary: #F8B500;    /* Japanese Amber */
            --accent1: #5D9CEC;      /* Sky Blue */
            --accent2: #77B28C;      /* Matcha Green */
            --accent3: #A06CD5;      /* Purple */
            --dark: #2D2D2A;         /* Charcoal */
            --light: #F8F3E6;        /* Off-white */
            --mid: #888888;          /* Mid Gray */
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--light);
            color: var(--dark);
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.5;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
        }

      .controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px; /* Increased from 20px to 30px for better spacing */
    position: relative; /* Add this to ensure proper positioning context */
    z-index: 1; /* Add this to make sure controls stay above other elements */
}

        .left-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        button {
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        .text-import-btn {
            background-color: var(--secondary);
            color: black;
        }

     

        .start-btn {
            background-color: var(--primary);
            color: white;
            padding: 16px 25px;
            font-size: 25px;
        }

 .multiple-choice-btn {
            background-color: var(--accent3);
            color: white;
            padding: 16px 25px;
            font-size: 25px;
        }

.ai-support-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        


      table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    background-color: white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    clear: both; /* Add this to ensure the table clears any floated elements */
    display: table; /* Explicitly set to table display */
}

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
        }

        tr:nth-child(even) {
            background-color: rgba(0, 0, 0, 0.03);
        }

        tr:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .speaker-icon {
            cursor: pointer;
            color: var(--secondary);
            margin-left: 8px;
            font-size: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--light);
            width: 90%;
            max-width: 500px;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
        }

        .modal h2 {
            margin-top: 0;
            color: var(--primary);
            font-size: 1.8rem;
        }

        .prompt {
            font-size: 24px;
            margin: 20px 0;
            color: var(--dark);
            font-weight: bold;
        }

        .answer-input {
            width: 100%;
            padding: 12px;
            font-size: 18px;
            margin-bottom: 15px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
        }

        .feedback {
            margin: 15px 0;
            font-size: 25px;
            font-weight: bold;
            min-height: 27px;
        }

        .correct {
            color: var(--accent2);
        }

        .incorrect {
            color: var(--primary);
        }

        .hint {
            color: var(--accent1);
            font-style: italic;
            font-size: 25px;
            margin: 10px 0;
            min-height: 24px;
        }

        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .submit-btn {
            background-color: var(--primary);
            color: white;
        }

        .speak-btn {
            background-color: var(--accent1);
            color: white;
        }

        .hint-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        .answer-btn {
            background-color: var(--accent3);
            color: white;
        }

        .next-btn {
            background-color: var(--accent2);
            color: white;
        }

        .close-btn {
            background-color: var(--mid);
            color: white;
        }

.copy-btn {
    background-color: var(--accent3);
    color: white;
}

        .recording {
            background-color: var(--primary);
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .hidden {
            display: none;
        }

        #file-input {
            display: none;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: var(--mid);
            font-style: italic;
        }

        .tts-speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .tts-speed-control select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid var(--mid);
            background-color: white;
            font-size: 14px;
        }

        .tts-speed-control label {
            font-weight: bold;
            color: white;
        }

        .reveal-answer {
            color: var(--primary);
            font-weight: bold;
            font-size: 30px;
            margin: 10px 0;
            min-height: 27px;
        }

.section-header {
    background-color: var(--dark);
    color: var(--light);
    font-weight: bold;
}

.section-header td {
background-color: var(--dark);
    color: var(--light);
    padding: 10px 15px;
}

       /* Text Import Modal Styles - Updated for Button Sets */
/* Updated textarea style to handle larger content */
#text-import-content {
    width: 100%;
    height: 200px; /* Increased height to accommodate more text */
    padding: 12px;
    margin: 15px 0;
    font-size: 14px; /* Slightly smaller font for more content */
    border: 2px solid var(--mid);
    border-radius: 6px;
    box-sizing: border-box;
    resize: vertical;
    white-space: pre-wrap; /* Preserves line breaks and spaces */
    font-family: monospace; /* Monospace font for better alignment */
    overflow-y: auto; /* Add scroll if content exceeds height */
}

/* Make the modal larger to accommodate the expanded content */
#text-import-modal .modal-content {
    max-width: 800px;
    max-height: 90vh; /* Limit maximum height */
    overflow-y: auto; /* Add scroll for very large content */
}

/* Button set styling adjustments */
.preset-buttons {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
}

.button-set {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    background-color: rgba(0, 0, 0, 0.02);
}
.button-set h3 {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 16px;
    color: var(--dark);
}

.preset-btn {
    margin: 5px;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 14px;
    border: none;
    cursor: pointer;
    font-weight: normal;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.textbook-btn {
    background-color: var(--accent1);
    color: white;
}

.live-btn {
    background-color: var(--accent2);
    color: white;
}

.core-btn {
    background-color: var(--accent3);
    color: white;
}

.other-btn {
    background-color: var(--secondary);
    color: var(--dark);
}

#text-import-content {
    width: 100%;
    height: 100px; /* Reduced height to take up 1/5 of the modal */
    padding: 12px;
    margin: 15px 0;
    font-size: 16px;
    border: 2px solid var(--mid);
    border-radius: 6px;
    box-sizing: border-box;
    resize: vertical;
}

@media (max-width: 600px) {
    .preset-buttons {
        grid-template-columns: 1fr;
    }
}

/* AI Support Modal Styles */
        #ai-support-modal .modal-content {
            max-width: 600px;
        }

        .ai-support-links {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }

        .ai-support-link {
            background-color: var(--accent1);
            color: white;
            text-decoration: none;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .ai-support-link:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        /* Responsive adjustments */
        @media (max-width: 600px) {
            .button-group {
                flex-direction: column;
            }
            
            button {
                width: 100%;
            }
            
            th, td {
                padding: 8px 10px;
            }
            
            .controls {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .left-controls {
                justify-content: space-between;
                width: 100%;
            }

.right-controls {
                justify-content: space-between;
                width: 100%;
            }


.date-info {
    position: absolute;
    top: 20px;
    right: 20px;
    text-align: right;
    font-size: 14px;
    line-height: 1.6;
    color: var(--dark);
    background-color: rgba(255, 255, 255, 0.9);
    padding: 10px 15px;
    border-radius: 8px;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column; /* Change to column for vertical display */
    gap: 5px;
    font-weight: bold;
    max-width: 90%; /* Prevent overflow on small screens */
    z-index: 10; /* Ensure it stays above other elements */
}

.date-info span {
    display: flex;
    align-items: center;
    white-space: nowrap; /* Prevent line breaks within each date item */
}

.date-info .emoji {
    margin-right: 8px;
    font-size: 16px;
}

.date-info .countdown {
    color: var(--primary);
    margin: 0 3px;
}

/* Add media queries for mobile responsiveness */
@media (max-width: 768px) {
    .date-info {
        position: static; /* Position in normal flow on mobile */
        margin: 0 auto 15px auto; /* Center it and add margin below */
        width: 100%;
        max-width: 100%;
        text-align: center;
        right: auto;
        top: auto;
    }
    
    .date-info span {
        justify-content: center; /* Center content on mobile */
    }
    
    header {
        display: flex;
        flex-direction: column;
    }
}


            .ai-support-links {
                grid-template-columns: 1fr;
            }
        }

.visitor-counter {
    margin-top: 40px;
    text-align: center;
    padding: 15px;
    color: var(--dark);
    font-size: 16px;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

#visitor-count {
    font-weight: bold;
}

/* Refresh Reminder Popup Styles */
.popup-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background-color: white;
  padding: 25px;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  width: 90%;
  max-width: 500px;
  text-align: center;
}

.popup-layout {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.pikachu-image {
  width: 150px;
  flex-shrink: 0;
}

.pikachu-image img {
  width: 100%;
  height: auto;
}

.speech-bubble {
  position: relative;
  background-color: #FFFDE7;
  border: 2px solid var(--secondary);
  border-radius: 15px;
  padding: 15px;
  margin-left: 15px;
}

.speech-bubble:before {
  content: "";
  position: absolute;
  left: -15px;
  top: 50%;
  transform: translateY(-50%);
  border-width: 15px 15px 15px 0;
  border-style: solid;
  border-color: transparent var(--secondary) transparent transparent;
}

.speech-bubble:after {
  content: "";
  position: absolute;
  left: -12px;
  top: 50%;
  transform: translateY(-50%);
  border-width: 12px 12px 12px 0;
  border-style: solid;
  border-color: transparent #FFFDE7 transparent transparent;
}

.english-text {
  font-size: 18px;
  font-weight: bold;
  color: var(--primary);
  margin-bottom: 8px;
}

.chinese-text {
  font-size: 16px;
  color: var(--dark);
}

.close-reminder-btn {
  background-color: var(--accent1);
  color: white;
  padding: 12px 24px;
  font-size: 18px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.close-reminder-btn:hover {
  background-color: var(--primary);
  transform: translateY(-2px);
  box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
}

/* Responsive adjustments */
@media (max-width: 600px) {
  .popup-layout {
    flex-direction: column;
  }
  
  .speech-bubble {
    margin-left: 0;
    margin-top: 15px;
  }
  
  .speech-bubble:before, .speech-bubble:after {
    left: 50%;
    top: -15px;
    transform: translateX(-50%) rotate(90deg);
  }
  
  .speech-bubble:after {
    top: -12px;
  }
}

.choice-options {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
  margin: 30px 0;
  padding: 20px;
}

.choice-option {
  background-color: white;
  border: 3px solid var(--mid);
  border-radius: 12px;
  padding: 20px;
  font-size: 18px;
  font-weight: bold;
  text-align: center;
  transition: all 0.3s ease;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  min-height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.choice-option:hover {
  border-color: var(--primary);
  background-color: var(--light);
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
  cursor: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><text x="0" y="24" font-size="24">👆</text></svg>'), pointer;
}

.choice-option.selected {
  border-width: 4px;
  font-weight: bolder;
}

.choice-option.correct {
  background-color: var(--accent2);
  color: white;
  border-color: var(--accent2);
}

.choice-option.incorrect {
  background-color: var(--primary);
  color: white;
  border-color: var(--primary);
}

.choice-option.disabled {
  pointer-events: none;
  opacity: 0.7;
}



    </style>
</head>
<body>
    <header>
<div id="date-info" class="date-info"></div>
        <h1>🎯 Vocabulary Builder (2.7)</h1>
    </header>

</div>

    <div class="controls">
    <div class="left-controls">
        


        <button class="text-import-btn" id="text-import-btn">📝 Import Text</button>
    </div>
<button class="multiple-choice-btn" id="multiple-choice-btn" disabled>🚕 看英選中</button>
    <button class="start-btn" id="start-btn" disabled>✈️ 看中唸英</button>

    <button class="ai-support-btn" id="ai-support-btn">💡 AI Support</button>
</div>

    <table id="vocabulary-table">
        <thead>
            <tr>
                <th>
                    <div class="tts-speed-control">
                        <label for="tts-speed">Vocabulary</label>
                        <select id="tts-speed">
                            <option value="0.8">0.8x</option>
                            <option value="0.6">0.6x</option>                            
                            <option value="1">1x</option>                                                       
                        </select>
                    </div>
                </th>
                <th>Translation</th>
                <th>
                    <label>
                        <input type="checkbox" id="select-all"> Select All
                    </label>
                </th>
            </tr>
        </thead>
        <tbody id="vocabulary-body">
            <tr>
                <td colspan="3" class="no-data">Import your vocabulary list to get started</td>
            </tr>
        </tbody>
    </table>

    <!-- Text Import Modal -->
<div id="text-import-modal" class="modal">
    <div class="modal-content">
        <h2>Import Text</h2>
        
        <!-- Button Sets -->
        <div class="preset-buttons">
            <!-- Textbook Buttons -->
            <div class="button-set textbook-buttons">
                <h3>Textbook</h3>
                <button class="preset-btn textbook-btn" data-preset="b2l7">B2 L7</button>
                <button class="preset-btn textbook-btn" data-preset="b2l8">B2 L8</button>
                <button class="preset-btn textbook-btn" data-preset="b2l9">B2 L9</button>
            </div>
            
            <!-- Live Magazine Buttons -->
            <div class="button-set live-buttons">
                <h3>Live Magazine</h3>
                <button class="preset-btn live-btn" data-preset="liveU71">U7 #1</button>
<button class="preset-btn live-btn" data-preset="liveU72">U7 #2</button>
                <button class="preset-btn live-btn" data-preset="liveU141">U14 #1</button>
<button class="preset-btn live-btn" data-preset="liveU142">U14 #2</button>
                <button class="preset-btn live-btn" data-preset="liveU3">U3</button>
<button class="preset-btn live-btn" data-preset="liveU51">U5 #1</button>
                <button class="preset-btn live-btn" data-preset="liveU52">U5 #2</button>
            </div>
            
            <!-- 核心字彙 Buttons -->
            <div class="button-set core-buttons">
                <h3>核心字彙</h3>
                <button class="preset-btn core-btn" data-preset="coreU16">U16</button>
                <button class="preset-btn core-btn" data-preset="coreU17">U17</button>
                <button class="preset-btn core-btn" data-preset="coreU18">U18</button>
            </div>
            
            <!-- Other Button -->
            <div class="button-set other-buttons">
                <h3>Other</h3>
                <button class="preset-btn other-btn" data-preset="other1">other 1</button>
<button class="preset-btn other-btn" data-preset="other2">other 2</button>



            </div>
        </div>
        
        <!-- Text Import Field -->
        <textarea id="text-import-content" placeholder="Enter your vocabulary pairs here..."></textarea>
        
<!-- Action Buttons -->
<div class="button-group">
    <button id="text-import-submit-btn" class="submit-btn">Import</button>
    <button id="text-import-copy-btn" class="copy-btn">Copy</button>
    <button id="text-import-clear-btn" class="hint-btn">Clear</button>
    <button id="text-import-close-btn" class="close-btn">Close</button>
</div>        

    </div>
</div>

<!-- AI Support Modal -->
    <div id="ai-support-modal" class="modal">
        <div class="modal-content">
            <h2>💡 AI Support</h2>
            <div class="ai-support-links">
<a href="https://dictionary.cambridge.org/zht/%E8%A9%9E%E5%85%B8/%E8%8B%B1%E8%AA%9E-%E6%BC%A2%E8%AA%9E-%E7%B9%81%E9%AB%94/" class="ai-support-link" target="_blank">🔍 劍橋中英雙解字典</a>
                                              <a href="https://chatgpt.com/share/67fb4661-ab40-800a-91e1-84af81f0382b" class="ai-support-link" target="_blank">🌟 生成例句+中譯</a>
 <a href="https://chatgpt.com/share/67da57c1-afa4-800a-956f-41b344ca587c" class="ai-support-link" target="_blank">💬 互動問答</a>
                                <a href="https://tobespecified" class="ai-support-link" target="_blank">☕ (未完成)生成故事 / 短文</a>
<a href="https://chatgpt.com/share/67f896d4-e3a4-800a-9169-b0f385820e3e" class="ai-support-link" target="_blank">[Quiz] 填空題 ✏️</a>
<a href="https://chatgpt.com/share/67f7329b-e008-800a-9c06-df50ec1bb977" class="ai-support-link" target="_blank">[Quiz] 中譯英 (入門) 😃 </a>
<a href="https://chatgpt.com/share/67f619dd-d668-800a-af6e-696897e751e7" class="ai-support-link" target="_blank">[Quiz] 中譯英 (學測難度) 😖</a>
<a href="https://tobespecified" class="ai-support-link" target="_blank">(未完成)[Quiz] 閱讀測驗 ⏳</a>
            </div>
            <div class="button-group">
                <button id="ai-support-close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

    <!-- Quiz Modal -->
    <div id="quiz-modal" class="modal">
        <div class="modal-content">
            <div id="prompt" class="prompt">Say "<span id="translation-prompt"></span>" in English.</div>
            <input type="text" id="answer-input" class="answer-input" placeholder="Type your answer here...">
            <div id="feedback" class="feedback"></div>
            <div id="hint-text" class="hint"></div>
            <div id="reveal-answer" class="reveal-answer"></div>
            <div class="button-group">
                <button id="submit-btn" class="submit-btn">Submit</button>
                <button id="speak-btn" class="speak-btn">🎤 Speak</button>
                <button id="hint-btn" class="hint-btn">Hint</button>
                <button id="answer-btn" class="answer-btn">🔑 Answer</button>
                <button id="next-btn" class="next-btn">Next</button>
                <button id="close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

<div id="multiple-choice-modal" class="modal">
  <div class="modal-content">
    <div id="vocab-word" class="prompt">
      <span id="vocabulary-prompt"></span>
      <span class="speaker-icon" id="vocab-speaker" title="Listen">🔊</span>
    </div>
    
    <div id="choice-options" class="choice-options">
      <!-- 選項將由JavaScript動態生成 -->
    </div>
    
    <div id="mc-feedback" class="feedback"></div>
    <div id="mc-reveal-answer" class="reveal-answer"></div>
    
    <div class="button-group">
<button id="mc-next-btn" class="next-btn">Next</button>
<button id="mc-close-btn" class="close-btn">Close</button>
</div>
  </div>
</div>
 
    <script>
        // DOM Elements
      
        const textImportBtn = document.getElementById('text-import-btn');
     
        const startBtn = document.getElementById('start-btn');
const aiSupportBtn = document.getElementById('ai-support-btn');
        const vocabularyTable = document.getElementById('vocabulary-table');
        const vocabularyBody = document.getElementById('vocabulary-body');
        const selectAllCheckbox = document.getElementById('select-all');
        const quizModal = document.getElementById('quiz-modal');
        const translationPrompt = document.getElementById('translation-prompt');
        const answerInput = document.getElementById('answer-input');
        const feedbackEl = document.getElementById('feedback');
        const hintTextEl = document.getElementById('hint-text');
        const revealAnswerEl = document.getElementById('reveal-answer');
        const submitBtn = document.getElementById('submit-btn');
        const speakBtn = document.getElementById('speak-btn');
        const hintBtn = document.getElementById('hint-btn');
        const answerBtn = document.getElementById('answer-btn');
        const nextBtn = document.getElementById('next-btn');
        const closeBtn = document.getElementById('close-btn');
        const ttsSpeedSelect = document.getElementById('tts-speed');
        
        // Text Import Modal Elements
        const textImportModal = document.getElementById('text-import-modal');
        const textImportContent = document.getElementById('text-import-content');
        const textImportSubmitBtn = document.getElementById('text-import-submit-btn');
        const textImportCloseBtn = document.getElementById('text-import-close-btn');
const textImportClearBtn = document.getElementById('text-import-clear-btn');

// AI Support Modal Elements
        const aiSupportModal = document.getElementById('ai-support-modal');
        const aiSupportCloseBtn = document.getElementById('ai-support-close-btn');

// 第四步：新增JavaScript變數和DOM元素 (在現有變數區域新增)
const multipleChoiceBtn = document.getElementById('multiple-choice-btn');
const multipleChoiceModal = document.getElementById('multiple-choice-modal');
const vocabularyPrompt = document.getElementById('vocabulary-prompt');
const vocabSpeaker = document.getElementById('vocab-speaker');
const choiceOptions = document.getElementById('choice-options');
const mcFeedbackEl = document.getElementById('mc-feedback');
const mcRevealAnswerEl = document.getElementById('mc-reveal-answer');
const mcNextBtn = document.getElementById('mc-next-btn');
const mcCloseBtn = document.getElementById('mc-close-btn');

        // Variables
        let vocabularyData = [];
        let currentQuizWords = [];
        let currentWordIndex = -1;
        let currentWord = null;
        let recognition = null;
        let speechRate = 0.8;

// 第五步：新增多選題相關變數
let currentMCWord = null;
let correctChoice = '';
let selectedChoice = '';

        // Initialize Speech Recognition
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.continuous = false;
            recognition.interimResults = false;

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript.toLowerCase().trim();
                answerInput.value = transcript;
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onend = function() {
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error', event.error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };
        }

        // Text-to-Speech function
        function speak(text) {
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'en-US';
                utterance.rate = speechRate;
                speechSynthesis.speak(utterance);
            }
        }

        // TTS Speed change handler
        ttsSpeedSelect.addEventListener('change', (e) => {
            speechRate = parseFloat(e.target.value);
        });

// AI Support button click handler
        aiSupportBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'flex';
        });

        // AI Support Close button click handler
        aiSupportCloseBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'none';
        });

        // Text Import button click handler
        textImportBtn.addEventListener('click', () => {
            textImportModal.style.display = 'flex';
        });

        // Text Import Close button click handler
        textImportCloseBtn.addEventListener('click', () => {
            textImportModal.style.display = 'none';
        });

// Preset vocabulary data
const presetVocabulary = {

    b2l7: `
◎First Half (#1-#12)
seek (v)	=尋求、尋找
audience (n)	=觀眾、聽眾
series (n)	=系列
technology =(n)	科技
worth (adj)	=1.價值…的($) 	2.值得…的
found (v)	=創立、建立
conference (n)	=會議、研討會
increase (v)	=增加、提升(v)
organize (v)	=1.組織、籌辦 　2.整理、安排
broad (adj)	=1.寬的　2.廣泛的
range (n)	=1.種類、系列 　2.範圍

◎Second Half (#13-#21)
field (n)	=1.田野　2.領域
philosophy =(n)	哲學
launch (v) = 	1.發射(飛彈等)	　2.推出(產品等)	　3.發起(活動等)
collect (v)	=收集
numerous (adj)	=許多的(＝many)
celebrity (n)	=名人
fascinate (v)	=使著迷
fiction (n)	=小說、虛構故事
discuss (v)	=討論(v)
method (n)	=方法
◎片語(Phrases & Idioms)
as well as...	=[片語] 以及…
for free	=[片語] 免費
at present	=[片語] 目前
give something a try	=[片語] 嘗試某事
broaden your horizons	=[片語] 拓展你的視野

◎詞類變化(different parts of speech)
technological (adj)	=技術的
worth (n)	=價值(＝value)
a worthy winner	= 一個實至名歸的贏家
The scientist is worthy of respect. = 這位科學家值得尊敬)
foundation (n)	=1.建立　2.基金會
there is an increase in something = 某物增加了
increasingly (+ Adj) =越來越...(+ Adj.)
organizer (n)	=主辦人
organization (n)	=組織、機構
broaden (v)	=擴展
range from A to B	=範圍涵蓋A到B
collection (n)	=收藏品
fascination (n)	=著迷(n)
discussion (n)	=討論(n)
`,

    b2l8: `


◎First Half (#1-#10)
exchange (v, n)	=交換
expect (v)	=預期、預料(v)
shelter (n)	=1.避難所	2.躲避
fierce (adj)	=1.(天氣)強烈的	2.(情緒)激烈的
occupy (v)	=佔據；佔用
vehicle (n)	=車輛、(陸上)交通工具
temporary (adj)	=暫時的
assist (v)	=協助(＝help)
curious (adj)	=好奇的
origin (n)	=起源；來源

◎Second Half (#11-#20)
event (n)	=1.事件	2.活動
elder (n)	=年長者
neighborhood (n)	=社區、鄰近地區
cooperate (v)	=合作(v)
arrange (v) 	=1.安排、籌畫	2.整理、排列
relax (v)	=放鬆
contain (v)	=包含
stroll (v)	=散步(v)
aspect (n)	=方面
spirit (n)	=精神

◎片語(idioms & phrases)
take part in…	=[片語]參加(＝participate in…)
take place	=[片語] (事件)發生、(活動)舉行
come about	=[片語] (問題、情況等)發生、產生
help out =[片語]幫忙
hand out	=[片語]分發、發放

◎詞類變化(different parts of speech)
expectation (n)	=預期、期望(n)
shelter (v)	=庇護、遮蔽
occupation (n) 	=1.佔領	2.職業
assistant (n)	=助理
assistance (n)	=協助(n)
curiosity (n)	=好奇心
originate (v)	=起源於…(v)
original (adj)	=原創的
elder (adj)	=較年長的(＝ older)
elderly (adj)	=年老的
cooperation (n)	=合作(n)
arrangement (n)	=(n) 1.安排 2.整理排列
container (n)	容器
stroll (n)	=散步(n)
spiritual (adj)	=精神上的

`,

    b2l9: `
◎First Half (#1-#11)
general (adj)	=1.普遍的、整體的
general (adj)	=2.一般的、非專門的
general (adj)=	3.大致的、籠統的
derive (v)	1.起源於、來自
derive (v)	=2.得到、獲取
feature (n)	=特徵、特色
gossip (n)	=八卦、閒話
reveal (v)	=揭露、透露(v)
release (v)	=1.發行、發布(v)
release (v)=	2.釋放、排放(v)
chase (v)	=追逐、追趕(v)
brand (n)	=品牌
image (n)	=1.圖像、影像
image (n)=	2.形象
edit (v)	=編輯(v)
modify (v)	=修改(v)

◎Second Half (#12-#19)
digital (adj)	=數位的
combine (v)	=結合、合併(v)
standard (adj)	=標準的
widespread (adj)	=廣泛的、普遍的
usage (n)	=使用、用法
constant (adj)	=持續的、不斷的
alternative (adj)	=1.替代的 
alternative (adj)=	2.另類的、非傳統的
exist (v)	=存在(v)

◎片語(Phrases & Idioms)
in general	= [片語] 一般來說
take on (+ quality)	= [片語] 開始具有or呈現(某特質)
later on	= [片語] 後來，之後
in the beginning	= [片語] 一開始、起初
too... to do something	= [片語] 太...而無法...
play a... role (in...)	= [片語]  (在...中)扮演...角色
think up	= [片語] 想出（主意、計畫等）

◎詞類變化(different parts of speech) 
feature (v)	=以…為特色
gossip (v)	=講八卦、閒聊
release (n)	=發行、發布(n)
chase (n)	=追逐、追趕(n)
edition (n)	=版本
modification (n)	=修改(n)
digitally (adv)	=以數位方式
combination (n)	=組合、結合(n)
standard (n)	=標準
constantly (adv)	=不斷地、持續地
alternative (n)	=替代方案
existing (adj)	=現存的、目前的
existence (n)	=存在(n)

`,

    liveU71: `

◎Paragraph 1
unexpected	=意想不到的
hit theaters	=[片語](在戲院)上映
lengthy	=冗長的、長時間的
run time	=播放時間
significant	=重要的(＝important)
emperor	=皇帝
leave out	=遺漏
◎Paragraph 2
fort	=堡壘
come across...	=偶然發現
carve	=雕刻
writing system	=書寫系統
alphabet	 =字母系統
script	=1.(某語言的)文字(如：Latin script) 	2.劇本
military officer	=軍官
in charge (of...)	=[片語] 負責管理
significance	=重要性(＝importance)
property	=財產、所有物
army	=軍隊、陸軍
◎Paragraph 3
mere	=僅僅
defeat	=打敗
terms	=(合約等的)條款
sign a treaty	=簽訂條約
riches (n)	=財富、財產(＝wealth)
place (v)	=放置(＝ put)
ship (v)	=運送
remain	=維持某狀態
to this day	=[片語] 直到今天


`,

liveU72: `

◎Paragraph 1
ancient	=古代的
century	=世紀
die out	=[片語] 滅絕、消失
scholar	=學者
text	=文字
code	=密碼、代碼
decode	=破解(密碼等)
decipher	=破譯(難懂的文字或符號)
◎Paragraph 2
perhaps	=或許(＝ maybe)
celebrate	=1.慶祝 	2.讚揚(＝praise)
allow someone to do something	=1.允許	2.使能夠(＝ enable)
as a result	=結果、因此(＝ therefore ＝ thus)
blossom	=1.開花	2.蓬勃發展
fascinating	=令人著迷的
era	=時代
expand	=擴大、擴展
◎Paragraph 3
likely (adv)	=很可能地(＝probably)
legacy	=1.遺產 	2.留下的影響
live on	= 繼續存在
in recent years	=近年來
teach oneself	=自學
educational	=有教育意義的
software	=軟體
in honor of...	=[片語]向…致敬
remarkable	=卓越的；了不起的

`,

    liveU141: `

◎Paragraphs 1 & 2

battle (n)	=戰鬥
battle (v)	=與…奮戰
rot 	=腐爛
the press =	1.報刊 2.出版社
record (v)	=記錄
refer to...	 =指的是…
general  = 一般的；普遍的
decline	=減少；衰退
mental	=心理的；精神的
effort	=努力
among	=在…之中
population	=人口
digital	=數位的
digital age	=數位時代
term	=用語；術語
value	=價值
content	=內容
typically	=通常；一般來說
social media	=社群媒體
harmful	=有害的
impact	=影響；衝擊
overconsume=	過度攝取/使用
screen time	=看螢幕的時間
negatively	=負面地(vs. positively)
function (n)	=功能
function (v)	=發揮作用；運作

◎Paragraph 3
background	=背景
focus on...	=專注於...
result in...	=導致...(＝cause＝lead to…)
similarly	=同樣地
adult	=成人
news feed	= (社群媒體的)動態消息
over time	 =隨著時間推移、漸漸地
reduce	=減少
productivity	=生產力
creativity	 =創造力
attention span	=注意力持續時間

`,

liveU142: `
◎Paragraph 1
effect	=影響(n) (＝influence ＝impact)
permanent	=永久的
method	=方法
practice	=1.練習 	2.習慣性做某事
mindfulness	= 專注覺察當下的身心感受，類似冥想(中文譯為「正念」)
involve	=涉及；包含
throughout (+ time)=	在整段時間中
throughout (+ place)=	遍佈整個地點
for instance	=舉例來說(＝for example)
breathe	=呼吸
calm	=使平靜；冷靜
expert	=專家
recommend	=推薦
-free (e.g. sugar-free, carefree, rent-free) =	無...的(如：無糖的、無憂無慮的、免租金的)

◎Paragraphs 2 & 3
strategy	=策略
take up (+ activity)	=開始從事某活動
technology	=科技
aim to do something	=目標是…
replace	=替代
journal 	=1.日記 2.期刊
journaling	=寫日記
board game	=桌遊
adventure	=冒險
research	=研究
significantly	=明顯地；顯著地
mood	=心情
make a difference	=[片語]產生影響
aside from...	=除了…之外(＝1.besides... 2.except for…)
make time for...	=為…騰出時間
loved ones	=摯愛的家人/親人
well-being	=幸福、安康
recognize	=1.認出 2.承認、接受(事實)
risk	=風險
sharp	=1.鋒利的、尖的 	2.精明敏銳的

`,


    liveU3: `
migrant	=移民
attempt (+ to V)	= 試圖... (＝try to V)
cross (v)	=穿越
channel	=　1.頻道 2.通道
the English Channel	　=英吉利海峽
the Taiwan Strait =  台灣海峽
journey	=旅程
desperate	=因絕望而不顧一切的
port	=港口
passage	=通道；通過
fill up the bottle with water	=把瓶子裝滿水
garage	=車庫
charge (v)	=充電
cable	=電線
allow someone to do something	=允許某人做某事
homeless	=無家可歸的
essential	=必需的
find directions	=找到方向
stay in touch with... 	=和…保持聯繫
translate	=翻譯
seek	 =尋求
generous	=慷慨的
affectionate	=親切的；有愛心的
granny	=奶奶（口語）
charger	=充電器
be on board with...	=[片語]同意；支持…
operation	=行動
shut down	=關閉
yet	=然而；但
keep (on) doing something	=持續做某事
`,

 liveU51: `
Live U5  Shohei Ohtani 大谷翔平 May 12 

◎Baseball terms (棒球術語)
hitter / batter	=打擊者
pitcher	=投手
a two-run home run	=兩分全壘打
steal a base	=盜壘
season	=球季

◎Paragraph 1
dual (adj)	=雙重的
mastery (n)	=精通(n)
talent (n)	=天賦
native (n)	=本地人
nickname (v)	=給…取暱稱
major (adj)	=主要的
league (n)	=聯盟
make one’s debut	=初登場、首演
celebrate (v)	=慶祝
thanks to...	=因為、多虧(＝because of…, due to…)
extend (v)	=延伸，擴展
baseball field = 棒球場(vs. basketball court)
on the field	=在場上
off the field = 在場外
as well	=也(＝too)
successfully (adv)	=成功地
balance A with B	=平衡A與B
demanding (adj)	=耗費精力的
career (n)	=職業生涯

◎Paragraph 2
sign a contract	=簽約
worth (+ $)	=價值(多少錢)
deal (n)	=交易
prove (v)	=證明(v)
worth (n)	=價值(＝value)
deliver (v)	=兌現(承諾)
nothing short of...	= [片語] 簡直是…
incredible (adj)	=難以置信的、很棒的
achieve (v)	=達成、實現
historic (adj)	=歷史性的
record (n)	=記錄
on top of...	=除了…之外(＝besides…, in addition to…)
championship (n)	=冠軍頭銜

◎Paragraph 3
success (n)	=成功(n)
recently (adv)	=最近
private (adj)	=私人的
spotlight (n)	=聚光燈，注目
announcement (n)	=公告、宣佈
rare (adj)	=罕見的
rather than	=而不是


`,

    liveU52: `
Live U5  Shohei Ohtani 大谷翔平 May 13


◎Paragraph 1
smooth (adj)	=順利的
..., though. 	=[放句尾] 不過，然而
former (adj)	=前任的
interpreter (n)	=口譯員
be accused of...	=被指控...
fuel (n)	=燃料
fuel (v)	=激起，引發
gamble (v)	=賭博
perform well	=表現好
perform poorly = 表現差
incredibly (adv)	=難以置信地


◎Paragraph 2
be central to...	=是...的核心
method (n)	=方法
technique (n)	=技巧
middle school	=(美國的)國中(vs. high school高中)
emphasize (v)	=強調
rely on...	=依靠...
self-reliance (n)	=自力更生
recommend (v)	=推薦
chart (n)	=圖表
goal (n)	=目標
include (v)	=包含
aim (n)	=目標，宗旨(＝goal)
as well as...	=以及...
caring (adj)	=有愛心的

◎Paragraphs 3 and 4
drive (n)	=魄力、幹勁
connect with someone	=與...建立良好關係
youth (n)	=青年、年輕人
in a... way	=以...的方式
represent (v)	=代表
dedication (n)	=投入，奉獻
effort (n)	=努力
as such	=因此(＝therefore, thus)
motivate (v)	=激勵
athlete (n)	=運動員
pursue your dream	=追求你的夢想
feature (v)	=以...為特色
do something in person	=親自做某事
once again	=再一次


`,

    coreU16: `
核心單U16

perfume (n) = 香水
develop (v) = 1.發展 2.開發 3.洗(照片)
pleasant (adj) = 令人愉悅的、宜人的
expand (v) = 擴展
possibility (n) = 可能性
entry (n) = 1.進入 2.條目(如：a dictionary entry)
spray (v) = 噴灑；噴霧
amount (n) = 數量
blend (v) = 混合
outcome (n) = 結果(＝result)
concept (n) = 概念
shift (n) = 1.轉變、改變 2.輪班(如：day/night shift 日/夜班)
conventional (adj) = 傳統的、依照常規的
overcome (v) = 克服
boldness (n) = 大膽
favorable (adj) = 1.獲得讚許的 2.有利的
review (n) = 1.評論 2.複習
rumor (n) = 謠言
It is rumored that... / Rumor has it that... = 謠傳...
deliver (v) = 運送、遞送

`,

    coreU17: `
核心單U17

specific (adj) = 1.特定的 2.確切的(vs. general 籠統的)
analyze (v) = 分析
location (n) = 位置
remote (adj) = 偏遠的
recognize (v) = 認出；辨識
harmony (n) = 和諧
determine (v) = 1.決定、影響 2.判定、確定
accuracy (n) = 準確
vary (v) = 有差異、不同
various (adj) = 各式各樣的(＝many different)
rare (adj) = 稀有的
rarely (adv) = 幾乎不(＝seldom, almost never)
occasion (n) = 場合、時機
cooperate (v) = 合作
exchange (v, n) = 交換
ignore (v) = 忽視
function = (n)功能  (v)起作用
territory (n) = 領土
survive (v) = 生存
identify (v) = 1.識別(身份)  2.發現、找出(＝find out)
evidence (n) = 證據
capacity (n) = 1.能力(＝ability) 2.容納人數
demonstrate (v) = 示範
scratch (v) = 抓、搔


`,

    coreU18: `
核心單U18

cinema (n) = 1.電影院(＝movie theater)  2.電影業
essential (adj) = 必要的
entertainment (n) = 娛樂
direct (v) = 1.指揮、領導 2.執導(電影)
silence (n) = 寂靜
fair (n) = 園遊會(school fair)、市集、展覽會(book fair, car fair)
fair (adj) = 公平的
stage (n) = 1.舞台 2.階段
inventor (n) = 發明家
proper (adj) = 適當的
decade (n) = 十年
nearly (adv) = 幾乎、將近
dialogue (n) = 對話
creativity (n) = 創造力
career (n) = 職涯、事業
fame (n) = 名聲
hardship (n) = 困苦
dramatically (adv) = 1.戲劇性地 2.大幅地
switch (v) = 轉換
light switch (n) = 電燈開關
emergence (n) = 出現、興起

`,

    other1: `


`,
other2: `

`

};







// Add event listeners to all preset buttons
document.querySelectorAll('.preset-btn').forEach(button => {
    button.addEventListener('click', () => {
        const presetKey = button.dataset.preset;
        if (presetVocabulary[presetKey]) {
            textImportContent.value = presetVocabulary[presetKey];
        }
    });
});

        // Text Import Submit button click handler
        textImportSubmitBtn.addEventListener('click', () => {
            const text = textImportContent.value.trim();
            if (!text) {
                alert('欄位中沒有可供匯入的資料，請自行輸入中英文配對(如：English = 英文)，或點選預設的單字表。');
                return;
            }
            
            processTextImport(text);
            textImportModal.style.display = 'none';
        });

// Text Import Clear button click handler
textImportClearBtn.addEventListener('click', () => {
    textImportContent.value = '';
});

        
function processTextImport(text) {
    vocabularyData = [];
    const lines = text.split('\n');
    
    let currentSection = "Default";
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;
        
        // Check if this is a section header
        if (line.includes('◎') || line.includes('*') || line.startsWith('*')) {
            currentSection = line.replace('◎', '').replace('*', '').replace('*', '').trim();
            continue;
        }
        
        const parts = line.split('=');
        if (parts.length < 2) continue;
        
        const vocabulary = parts[0].trim();
        const translation = parts[1].trim();
        
        if (vocabulary && translation) {
            vocabularyData.push({
                vocabulary: vocabulary,
                translation: translation,
                selected: true,
                section: currentSection
            });
        }
    }
    
    renderVocabularyTable();
    if (vocabularyData.length > 0) {
        startBtn.disabled = false;
multipleChoiceBtn.disabled = false; // 新增這一行
    }
}

      
// Copy button click handler
const textImportCopyBtn = document.getElementById('text-import-copy-btn');

textImportCopyBtn.addEventListener('click', () => {
    const textToCopy = textImportContent.value;
    if (!textToCopy) {
        alert('No text to copy.');
        return;
    }
    
    // Copy text to clipboard
    navigator.clipboard.writeText(textToCopy)
        .then(() => {
            // Provide visual feedback
            const originalText = textImportCopyBtn.textContent;
            textImportCopyBtn.textContent = 'Copied!';
            
            // Revert button text after a short delay
            setTimeout(() => {
                textImportCopyBtn.textContent = originalText;
            }, 1500);
        })
        .catch(err => {
            console.error('Failed to copy text: ', err);
            alert('Failed to copy text. Please try again.');
        });
});
       

        function renderVocabularyTable() {
    if (vocabularyData.length === 0) {
        vocabularyBody.innerHTML = '<tr><td colspan="3" class="no-data">Import your vocabulary list to get started</td></tr>';
        return;
    }
    
    vocabularyBody.innerHTML = '';
    
    // Group items by section
    const sectionMap = {};
    vocabularyData.forEach(item => {
        if (!sectionMap[item.section]) {
            sectionMap[item.section] = [];
        }
        sectionMap[item.section].push(item);
    });
    
    // Render each section
    Object.keys(sectionMap).forEach(sectionName => {
        const sectionItems = sectionMap[sectionName];
        
        // Add section header row
        const sectionRow = document.createElement('tr');
        sectionRow.className = 'section-header';
        
        const sectionCell = document.createElement('td');
        sectionCell.colSpan = 2;
        sectionCell.textContent = sectionName;
        sectionCell.style.fontWeight = 'bold';
        sectionCell.style.backgroundColor = 'var(--dark)';
        sectionCell.style.color = 'var(--light)';
        sectionCell.style.padding = '10px 15px';
        
        const sectionCheckCell = document.createElement('td');
        const sectionCheckbox = document.createElement('input');
        sectionCheckbox.type = 'checkbox';
        sectionCheckbox.checked = sectionItems.every(item => item.selected);
        sectionCheckbox.dataset.section = sectionName;
        sectionCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            const section = e.target.dataset.section;
            
            // Update all items in this section
            vocabularyData.forEach((item, index) => {
                if (item.section === section) {
                    item.selected = isChecked;
                    // Also update the displayed checkboxes
                    const checkbox = document.querySelector(`input[data-index="${index}"]`);
                    if (checkbox) checkbox.checked = isChecked;
                }
            });
            
            updateSelectAllCheckbox();
        });
        
        sectionCheckCell.appendChild(sectionCheckbox);
        sectionRow.appendChild(sectionCell);
        sectionRow.appendChild(sectionCheckCell);
        vocabularyBody.appendChild(sectionRow);
        
        // Add vocabulary items for this section
        sectionItems.forEach((item, localIndex) => {
            const index = vocabularyData.findIndex(vItem => 
                vItem.vocabulary === item.vocabulary && 
                vItem.translation === item.translation);
            
            const row = document.createElement('tr');
            
            // Vocabulary column with speaker
            const wordCell = document.createElement('td');
            const cleanWord = item.vocabulary.replace(/\(.*\)/g, '').trim();
            
            wordCell.innerHTML = `
                ${item.vocabulary}
                <span class="speaker-icon" title="Listen" data-word="${cleanWord}">🔊</span>
            `;
            
            // Translation column
            const translationCell = document.createElement('td');
            translationCell.textContent = item.translation;
            
            // Checkbox column
            const checkboxCell = document.createElement('td');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = item.selected;
            checkbox.dataset.index = index;
            checkbox.dataset.section = item.section;
            checkbox.addEventListener('change', (e) => {
                vocabularyData[index].selected = e.target.checked;
                updateSectionCheckbox(item.section);
                updateSelectAllCheckbox();
            });
            checkboxCell.appendChild(checkbox);
            
            row.appendChild(wordCell);
            row.appendChild(translationCell);
            row.appendChild(checkboxCell);
            vocabularyBody.appendChild(row);
        });
    });
    
    // Add event listeners to speaker icons
    document.querySelectorAll('.speaker-icon').forEach(icon => {
        icon.addEventListener('click', (e) => {
            const word = e.target.dataset.word;
            speak(word);
        });
    });
    
    updateSelectAllCheckbox();
}


function updateSectionCheckbox(sectionName) {
    const sectionItems = vocabularyData.filter(item => item.section === sectionName);
    const allSelected = sectionItems.every(item => item.selected);
    const noneSelected = sectionItems.every(item => !item.selected);
    
    const sectionCheckbox = document.querySelector(`input[data-section="${sectionName}"]`);
    if (sectionCheckbox) {
        sectionCheckbox.checked = allSelected;
        sectionCheckbox.indeterminate = !allSelected && !noneSelected;
    }
}








        // modify the Update "Select All" checkbox state
        
function updateSelectAllCheckbox() {
    if (vocabularyData.length === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
        return;
    }
    
    const selectedCount = vocabularyData.filter(item => item.selected).length;
    
    if (selectedCount === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
    } else if (selectedCount === vocabularyData.length) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
    } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
    }
}

//Update the global "Select All" checkbox handler
       selectAllCheckbox.addEventListener('change', (e) => {
    const isChecked = e.target.checked;
    
    vocabularyData.forEach(item => {
        item.selected = isChecked;
    });
    
    document.querySelectorAll('#vocabulary-body input[type="checkbox"]').forEach(checkbox => {
        checkbox.checked = isChecked;
        if (checkbox.dataset.section) {
            checkbox.indeterminate = false;
        }
    });
});

        // Start Quiz button handler
        startBtn.addEventListener('click', () => {
            currentQuizWords = vocabularyData.filter(item => item.selected);
            
            if (currentQuizWords.length === 0) {
                alert('至少勾選 1個單字 才能開始此測驗！');
                return;
            }
            
            startQuiz();
        });

        // Start the quiz
        function startQuiz() {
            resetQuiz();
            quizModal.style.display = 'flex';
            nextQuestion();
        }

        // Reset quiz state
        function resetQuiz() {
            currentWordIndex = -1;
            currentWord = null;
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
        }

        // Load the next question
        function nextQuestion() {
            // Reset UI elements
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
            
            // Randomly select next word
            const previousIndex = currentWordIndex;
            
            // If only one word, just use it
            if (currentQuizWords.length === 1) {
                currentWordIndex = 0;
            } else {
                // Make sure we don't get the same word twice in a row
                do {
                    currentWordIndex = Math.floor(Math.random() * currentQuizWords.length);
                } while (currentWordIndex === previousIndex && currentQuizWords.length > 1);
            }
            
            currentWord = currentQuizWords[currentWordIndex];
            translationPrompt.textContent = currentWord.translation;
        }

        // Submit answer
        function submitAnswer() {
    if (!currentWord) return;
    
    const userAnswer = answerInput.value.trim().toLowerCase();
    // Split the vocabulary by slash and clean each option
    const correctAnswers = currentWord.vocabulary
        .split('/')
        .map(ans => ans.replace(/\(.*?\)/g, '').trim().toLowerCase());
    
    // Normalize user answer (remove punctuation)
    const normalizedUserAnswer = userAnswer.replace(/[.,?'’…\/#!$%\^&\*;:{}=\-_`~()]/g, "");
    
    // Check if user's answer matches any of the correct options
    const isCorrect = correctAnswers.some(answer => {
        const normalizedAnswer = answer.replace(/[.,?'’…\/#!$%\^&\*;:{}=\-_`~()]/g, "");
        return normalizedUserAnswer === normalizedAnswer;
    });
    
    if (isCorrect) {
        feedbackEl.textContent = 'Well done! 🏆😊👍';
        feedbackEl.className = 'feedback correct';
        speak('Well done!');
    } else {
        feedbackEl.textContent = 'Try again! 🔥🔥🔥';
        feedbackEl.className = 'feedback incorrect';
        speak('Try again!');
    }
}

        // Show hint
        function showHint() {
            if (!currentWord) return;
            
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            const firstLetter = correctAnswer.charAt(0).toUpperCase();
            
            hintTextEl.textContent = `The answer starts with the letter ${firstLetter}.`;
        }

        // Show answer
        function showAnswer() {
            if (!currentWord) return;
            
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            revealAnswerEl.textContent = `${correctAnswer}`;
            speak(correctAnswer);
        }

        // Event Listeners for Quiz Modal
        submitBtn.addEventListener('click', submitAnswer);
        
        answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                submitAnswer();
            }
        });
        
        speakBtn.addEventListener('click', () => {
            if (!recognition) {
                alert('Speech recognition is not supported in your browser.');
                return;
            }
            
            try {
                if (speakBtn.textContent === '🎤 Speak') {
                    recognition.start();
                    speakBtn.textContent = 'Recording';
                    speakBtn.classList.add('recording');
                } else {
                    recognition.stop();
                    speakBtn.textContent = '🎤 Speak';
                    speakBtn.classList.remove('recording');
                }
            } catch (error) {
                console.error('Speech recognition error:', error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            }
        });
        
        hintBtn.addEventListener('click', showHint);
        
        answerBtn.addEventListener('click', showAnswer);
        
        nextBtn.addEventListener('click', nextQuestion);
        
        closeBtn.addEventListener('click', () => {
            quizModal.style.display = 'none';
            if (recognition) {
                recognition.stop();
            }
        });

// 第七步：新增多選題按鈕事件監聽器
multipleChoiceBtn.addEventListener('click', () => {
  currentQuizWords = vocabularyData.filter(item => item.selected);
  if (currentQuizWords.length < 4) {
    alert('至少勾選 4個單字 才能開始此測驗！');
    return;
  }
  startMultipleChoiceQuiz();
});

// 第八步：新增多選題主要功能函數
function startMultipleChoiceQuiz() {
  resetMultipleChoiceQuiz();
  multipleChoiceModal.style.display = 'flex';
  nextMultipleChoiceQuestion();
}

function resetMultipleChoiceQuiz() {
  currentMCWord = null;
  selectedChoice = '';
  correctChoice = '';
  mcFeedbackEl.textContent = '';
  mcFeedbackEl.className = 'feedback';
  mcRevealAnswerEl.textContent = '';
  choiceOptions.innerHTML = '';
}

function nextMultipleChoiceQuestion() {
  // 重置UI元素
  mcFeedbackEl.textContent = '';
  mcFeedbackEl.className = 'feedback';
  mcRevealAnswerEl.textContent = '';
  selectedChoice = '';

  // 隨機選擇一個單字
  const randomIndex = Math.floor(Math.random() * currentQuizWords.length);
  currentMCWord = currentQuizWords[randomIndex];
  
  // 清理並顯示vocabulary
  const cleanVocab = currentMCWord.vocabulary.replace(/\(.*?\)/g, '').trim();
  vocabularyPrompt.textContent = cleanVocab;
  correctChoice = currentMCWord.translation;

  // 生成選項
  generateChoices();
}

function generateChoices() {
  // 獲取正確答案
  const correctAnswer = currentMCWord.translation;
  
  // 獲取其他3個錯誤選項
  const otherWords = currentQuizWords.filter(word => word.translation !== correctAnswer);
  const wrongChoices = [];
  
  while (wrongChoices.length < 3 && wrongChoices.length < otherWords.length) {
    const randomWord = otherWords[Math.floor(Math.random() * otherWords.length)];
    if (!wrongChoices.includes(randomWord.translation)) {
      wrongChoices.push(randomWord.translation);
    }
  }
  
  // 組合所有選項並打亂順序
  const allChoices = [correctAnswer, ...wrongChoices];
  const shuffledChoices = allChoices.sort(() => Math.random() - 0.5);
  
  // 生成選項HTML
  choiceOptions.innerHTML = '';
  shuffledChoices.forEach((choice, index) => {
    const optionDiv = document.createElement('div');
    optionDiv.className = 'choice-option';
    optionDiv.textContent = choice;
    optionDiv.dataset.choice = choice;
    
    optionDiv.addEventListener('click', () => selectChoice(choice, optionDiv));
    
    choiceOptions.appendChild(optionDiv);
  });
}

function selectChoice(choice, optionElement) {
  // 如果已經選擇過，不允許再選
  if (selectedChoice) return;
  
  selectedChoice = choice;
  
  // 禁用所有選項
  document.querySelectorAll('.choice-option').forEach(option => {
    option.classList.add('disabled');
  });
  
  // 標記選中的選項
  optionElement.classList.add('selected');
  
  // 檢查答案
  if (choice === correctChoice) {
    optionElement.classList.add('correct');
    mcFeedbackEl.textContent = 'Nice shot! ✅🏀🧺😊';
    mcFeedbackEl.className = 'feedback correct';
    speak('Nice shot!');
  } else {
    optionElement.classList.add('incorrect');
    // 顯示正確答案
    document.querySelectorAll('.choice-option').forEach(option => {
      if (option.dataset.choice === correctChoice) {
        option.classList.add('correct');
      }
    });
    mcFeedbackEl.textContent = 'You missed! ❌🏀💥😤';
    mcFeedbackEl.className = 'feedback incorrect';
    speak('You missed!');
  }
}

function showMCAnswer() {
  if (!currentMCWord) return;
  
  mcRevealAnswerEl.textContent = `Correct answer: ${correctChoice}`;
  
  // 高亮正確答案
  document.querySelectorAll('.choice-option').forEach(option => {
    if (option.dataset.choice === correctChoice) {
      option.classList.add('correct');
    }
    option.classList.add('disabled');
  });
  
  selectedChoice = correctChoice; // 防止再次選擇
}

// 第九步：新增事件監聽器
vocabSpeaker.addEventListener('click', () => {
  if (currentMCWord) {
    const cleanVocab = currentMCWord.vocabulary.replace(/\(.*?\)/g, '').trim();
    speak(cleanVocab);
  }
});

mcNextBtn.addEventListener('click', nextMultipleChoiceQuestion);

mcCloseBtn.addEventListener('click', () => {
  multipleChoiceModal.style.display = 'none';
});

// Date information display
function updateDateInfo() {
    const dateInfoEl = document.getElementById('date-info');
    
    // Get current date in Taiwan timezone
    const options = { 
        timeZone: 'Asia/Taipei',
        weekday: 'long', 
        month: 'long', 
        day: 'numeric', 
        year: 'numeric'
    };
    const today = new Date();
    const taiwanDate = today.toLocaleDateString('en-US', options);
    
    // Calculate days until 段考
    const examDate = new Date('June 25, 2025');
    examDate.setHours(0, 0, 0, 0);
    const todayNoTime = new Date(today);
    todayNoTime.setHours(0, 0, 0, 0);
    const daysUntilExam = Math.ceil((examDate - todayNoTime) / (1000 * 60 * 60 * 24));
    
    // Calculate days until 115年學測
    const collegeExamDate = new Date('January 16, 2026');
    collegeExamDate.setHours(0, 0, 0, 0);
    const daysUntilCollegeExam = Math.ceil((collegeExamDate - todayNoTime) / (1000 * 60 * 60 * 24));
    
    // Update the HTML - each item on separate line
    dateInfoEl.innerHTML = `
        <span><span class="emoji">📅</span>${taiwanDate}</span><br>
        <span><span class="emoji">⏰</span><span class="countdown">${daysUntilExam}</span> days until 段考</span>
        <span><span class="emoji">📚</span><span class="countdown">${daysUntilCollegeExam}</span> days until 115年學測</span>
    `;
}


// Update date information when page loads
updateDateInfo();

// Update date information every minute
setInterval(updateDateInfo, 60000);

    </script>

<footer class="visitor-counter">
    <div id="visitor-count">👥 Loading visitor count...</div>
</footer>

<div id="refresh-reminder-popup" class="popup-container">
  <div class="popup-content">
    <div class="popup-layout">
      <div class="pikachu-image">
        <img src="dodoro_transparent.png" alt="Image Not Found" width="150">
      </div>
      <div class="speech-bubble">
        <p class="english-text">1.點擊「重新整理(refresh)」🔄 以獲取更新！</p>
       
        <p class="chinese-text">2.若手機上的🔊無法運作，表示「文字轉語音」功能經過更新，重開機即可解決。</p>

        <p class="chinese-text">3.本網頁使用Windows系統開發，較適合Android系統的手機，某些iPhone會有🔊異常問題，未來會設法解決。</p>

      </div>
    </div>
    <button id="close-reminder-btn" class="close-reminder-btn">OK. I got it.</button>
  </div>
</div>

<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>

<!-- Add this to the end of your existing <script> section -->
<script>
    // Firebase visitor counter
    function initVisitorCounter() {
        // Your Firebase configuration - REPLACE WITH YOUR ACTUAL VALUES
        const firebaseConfig = {
            apiKey: "AIzaSyBFhmaAZmBtsM5DKoxgy1G-RouRKsrjYsA",
            authDomain: "vocab-builder-visitor-counter.firebaseapp.co",
            databaseURL: "https://vocab-builder-visitor-counter-default-rtdb.asia-southeast1.firebasedatabase.app/",
            projectId: "vocab-builder-visitor-counter",
            storageBucket: "vocab-builder-visitor-counter.firebasestorage.app",
            messagingSenderId: "648587683861",
            appId: "1:648587683861:web:dcb777160dabb4cbf8c61c"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        // Get today's date in YYYY-MM-DD format in Taiwan timezone
        const today = new Date();
        const taiwanDate = new Date(today.toLocaleString('en-US', { timeZone: 'Asia/Taipei' }));
        const dateStr = taiwanDate.getFullYear() + '-' + 
                       (taiwanDate.getMonth() + 1).toString().padStart(2, '0') + '-' + 
                       taiwanDate.getDate().toString().padStart(2, '0');

        // Reference to today's visitor count
        const visitorCountRef = database.ref('visitorCount/' + dateStr);

        // Function to update visitor display
        function updateVisitorDisplay(count) {
            const visitorCountEl = document.getElementById('visitor-count');
            if (count === 1) {
                visitorCountEl.innerHTML = `👋  ${count} person has visited this website today.`;
            } else {
                visitorCountEl.innerHTML = `👋  ${count} people have visited this website today.`;
            }
        }

        // Check if this browser has already been counted today
        const hasVisitedToday = localStorage.getItem('visited_' + dateStr);
        
        if (!hasVisitedToday) {
            // Increment the count using a transaction
            visitorCountRef.transaction((currentCount) => {
                return (currentCount || 0) + 1;
            }, (error, committed, snapshot) => {
                if (error) {
                    console.error('Transaction failed:', error);
                } else if (committed) {
                    // Mark this browser as counted for today
                    localStorage.setItem('visited_' + dateStr, 'true');
                    updateVisitorDisplay(snapshot.val());
                }
            });
        } else {
            // Just get the current count without incrementing
            visitorCountRef.once('value', (snapshot) => {
                const count = snapshot.val() || 0;
                updateVisitorDisplay(count);
            });
        }

        // Listen for count changes
        visitorCountRef.on('value', (snapshot) => {
            const count = snapshot.val() || 0;
            updateVisitorDisplay(count);
        });
    }

    // Call the function to initialize the visitor counter
    try {
        initVisitorCounter();
    } catch (e) {
        console.error("Error initializing visitor counter:", e);
        document.getElementById('visitor-count').innerHTML = "😅 Visitor count unavailable";
    }

// Refresh Reminder Popup functionality
document.addEventListener('DOMContentLoaded', () => {
  // Show the popup when the page loads
  const refreshReminderPopup = document.getElementById('refresh-reminder-popup');
  
  // Show popup after a slight delay for better user experience
  setTimeout(() => {
    refreshReminderPopup.style.display = 'flex';
  }, 1000);
  
  // Add event listener to close button
  const closeReminderBtn = document.getElementById('close-reminder-btn');
  closeReminderBtn.addEventListener('click', () => {
    refreshReminderPopup.style.display = 'none';
  });
});

</script>


</body>
</html>
