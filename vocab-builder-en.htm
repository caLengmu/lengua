<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vocab Builder</title>
    <style>
        :root {
            --primary: #D33E43;      /* Vibrant Red */
            --secondary: #F8B500;    /* Japanese Amber */
            --accent1: #5D9CEC;      /* Sky Blue */
            --accent2: #77B28C;      /* Matcha Green */
            --accent3: #A06CD5;      /* Purple */
            --dark: #2D2D2A;         /* Charcoal */
            --light: #F8F3E6;        /* Off-white */
            --mid: #888888;          /* Mid Gray */
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--light);
            color: var(--dark);
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.5;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
        }

        h1 {
            color: var(--primary);
            font-size: 2.5rem;
            margin-bottom: 10px;
            letter-spacing: 1px;
        }

      .controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px; /* Increased from 20px to 30px for better spacing */
    position: relative; /* Add this to ensure proper positioning context */
    z-index: 1; /* Add this to make sure controls stay above other elements */
}

        .left-controls {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        button {
            padding: 10px 16px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
        }

        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        .text-import-btn {
            background-color: var(--secondary);
            color: black;
        }

     .english-to-chinese-btn {
    background-color: var(--accent3);
    color: white;
    padding: 16px 25px;
    font-size: 20px;
}


        .start-btn {
            background-color: var(--primary);
            color: white;
            padding: 16px 25px;
            font-size: 25px;
        }

.ai-support-btn {
            background-color: var(--accent1);
            color: white;
            padding: 12px 24px;
            font-size: 18px;
        }

        


      table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
    background-color: white;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    clear: both; /* Add this to ensure the table clears any floated elements */
    display: table; /* Explicitly set to table display */
}

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: var(--dark);
            color: var(--light);
            font-weight: bold;
        }

        tr:nth-child(even) {
            background-color: rgba(0, 0, 0, 0.03);
        }

        tr:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .speaker-icon {
            cursor: pointer;
            color: var(--secondary);
            margin-left: 8px;
            font-size: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 100;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: var(--light);
            width: 90%;
            max-width: 500px;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            text-align: center;
        }

        .modal h2 {
            margin-top: 0;
            color: var(--primary);
            font-size: 1.8rem;
        }

        .prompt {
            font-size: 24px;
            margin: 20px 0;
            color: var(--dark);
            font-weight: bold;
        }

        .answer-input {
            width: 100%;
            padding: 12px;
            font-size: 18px;
            margin-bottom: 15px;
            border: 2px solid var(--mid);
            border-radius: 6px;
            box-sizing: border-box;
        }

        .feedback {
            margin: 15px 0;
            font-size: 25px;
            font-weight: bold;
            min-height: 27px;
        }

        .correct {
            color: var(--accent2);
        }

        .incorrect {
            color: var(--primary);
        }

        .hint {
            color: var(--accent1);
            font-style: italic;
            font-size: 25px;
            margin: 10px 0;
            min-height: 24px;
        }

        .button-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 20px;
        }

        .submit-btn {
            background-color: var(--primary);
            color: white;
        }

        .speak-btn {
            background-color: var(--accent1);
            color: white;
        }

        .hint-btn {
            background-color: var(--secondary);
            color: var(--dark);
        }

        .answer-btn {
            background-color: var(--accent3);
            color: white;
        }

        .next-btn {
            background-color: var(--accent2);
            color: white;
        }

        .close-btn {
            background-color: var(--mid);
            color: white;
        }

.copy-btn {
    background-color: var(--accent3);
    color: white;
}

        .recording {
            background-color: var(--primary);
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }

        .hidden {
            display: none;
        }

        #file-input {
            display: none;
        }

        .no-data {
            text-align: center;
            padding: 40px;
            color: var(--mid);
            font-style: italic;
        }

        .tts-speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .tts-speed-control select {
            padding: 5px;
            border-radius: 4px;
            border: 1px solid var(--mid);
            background-color: white;
            font-size: 14px;
        }

        .tts-speed-control label {
            font-weight: bold;
            color: white;
        }

        .reveal-answer {
            color: var(--primary);
            font-weight: bold;
            font-size: 30px;
            margin: 10px 0;
            min-height: 27px;
        }

.section-header {
    background-color: var(--dark);
    color: var(--light);
    font-weight: bold;
}

.section-header td {
background-color: var(--dark);
    color: var(--light);
    padding: 10px 15px;
}

       /* Text Import Modal Styles - Updated for Button Sets */
/* Updated textarea style to handle larger content */
#text-import-content {
    width: 100%;
    height: 200px; /* Increased height to accommodate more text */
    padding: 12px;
    margin: 15px 0;
    font-size: 14px; /* Slightly smaller font for more content */
    border: 2px solid var(--mid);
    border-radius: 6px;
    box-sizing: border-box;
    resize: vertical;
    white-space: pre-wrap; /* Preserves line breaks and spaces */
    font-family: monospace; /* Monospace font for better alignment */
    overflow-y: auto; /* Add scroll if content exceeds height */
}

/* Make the modal larger to accommodate the expanded content */
#text-import-modal .modal-content {
    max-width: 800px;
    max-height: 90vh; /* Limit maximum height */
    overflow-y: auto; /* Add scroll for very large content */
}

/* Button set styling adjustments */
.preset-buttons {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
}

.button-set {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    background-color: rgba(0, 0, 0, 0.02);
}
.button-set h3 {
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 16px;
    color: var(--dark);
}

.preset-btn {
    margin: 5px;
    padding: 8px 12px;
    border-radius: 4px;
    font-size: 14px;
    border: none;
    cursor: pointer;
    font-weight: normal;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.textbook-btn {
    background-color: var(--accent1);
    color: white;
}

.live-btn {
    background-color: var(--accent2);
    color: white;
}

.core-btn {
    background-color: var(--accent3);
    color: white;
}

.other-btn {
    background-color: var(--secondary);
    color: var(--dark);
}

#text-import-content {
    width: 100%;
    height: 100px; /* Reduced height to take up 1/5 of the modal */
    padding: 12px;
    margin: 15px 0;
    font-size: 16px;
    border: 2px solid var(--mid);
    border-radius: 6px;
    box-sizing: border-box;
    resize: vertical;
}

@media (max-width: 600px) {
    .preset-buttons {
        grid-template-columns: 1fr;
    }
}

/* AI Support Modal Styles */
        #ai-support-modal .modal-content {
            max-width: 600px;
        }

        .ai-support-links {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin: 20px 0;
        }

        .ai-support-link {
            background-color: var(--accent1);
            color: white;
            text-decoration: none;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .ai-support-link:hover {
            background-color: var(--primary);
            transform: translateY(-2px);
            box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
        }

        /* Responsive adjustments */
        @media (max-width: 600px) {
            .button-group {
                flex-direction: column;
            }
            
            button {
                width: 100%;
            }
            
            th, td {
                padding: 8px 10px;
            }
            
            .controls {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .left-controls {
                justify-content: space-between;
                width: 100%;
            }

.right-controls {
                justify-content: space-between;
                width: 100%;
            }


.date-info {
    position: absolute;
    top: 20px;
    right: 20px;
    text-align: right;
    font-size: 14px;
    line-height: 1.6;
    color: var(--dark);
    background-color: rgba(255, 255, 255, 0.9);
    padding: 10px 15px;
    border-radius: 8px;
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column; /* Change to column for vertical display */
    gap: 5px;
    font-weight: bold;
    max-width: 90%; /* Prevent overflow on small screens */
    z-index: 10; /* Ensure it stays above other elements */
}

.date-info span {
    display: flex;
    align-items: center;
    white-space: nowrap; /* Prevent line breaks within each date item */
}

.date-info .emoji {
    margin-right: 8px;
    font-size: 16px;
}

.date-info .countdown {
    color: var(--primary);
    margin: 0 3px;
}

/* Add media queries for mobile responsiveness */
@media (max-width: 768px) {
    .date-info {
        position: static; /* Position in normal flow on mobile */
        margin: 0 auto 15px auto; /* Center it and add margin below */
        width: 100%;
        max-width: 100%;
        text-align: center;
        right: auto;
        top: auto;
    }
    
    .date-info span {
        justify-content: center; /* Center content on mobile */
    }
    
    header {
        display: flex;
        flex-direction: column;
    }
}


            .ai-support-links {
                grid-template-columns: 1fr;
            }
        }

.visitor-counter {
    margin-top: 40px;
    text-align: center;
    padding: 15px;
    color: var(--dark);
    font-size: 16px;
    background-color: rgba(255, 255, 255, 0.7);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

#visitor-count {
    font-weight: bold;
}

/* Refresh Reminder Popup Styles */
.popup-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.popup-content {
  background-color: white;
  padding: 25px;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
  width: 90%;
  max-width: 500px;
  text-align: center;
}

.popup-layout {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}

.pikachu-image {
  width: 150px;
  flex-shrink: 0;
}

.pikachu-image img {
  width: 100%;
  height: auto;
}

.speech-bubble {
  position: relative;
  background-color: #FFFDE7;
  border: 2px solid var(--secondary);
  border-radius: 15px;
  padding: 15px;
  margin-left: 15px;
}

.speech-bubble:before {
  content: "";
  position: absolute;
  left: -15px;
  top: 50%;
  transform: translateY(-50%);
  border-width: 15px 15px 15px 0;
  border-style: solid;
  border-color: transparent var(--secondary) transparent transparent;
}

.speech-bubble:after {
  content: "";
  position: absolute;
  left: -12px;
  top: 50%;
  transform: translateY(-50%);
  border-width: 12px 12px 12px 0;
  border-style: solid;
  border-color: transparent #FFFDE7 transparent transparent;
}

.english-text {
  font-size: 18px;
  font-weight: bold;
  color: var(--primary);
  margin-bottom: 8px;
}

.chinese-text {
  font-size: 16px;
  color: var(--dark);
}

.close-reminder-btn {
  background-color: var(--accent1);
  color: white;
  padding: 12px 24px;
  font-size: 18px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.close-reminder-btn:hover {
  background-color: var(--primary);
  transform: translateY(-2px);
  box-shadow: 0 5px 8px rgba(0, 0, 0, 0.15);
}

/* Responsive adjustments */
@media (max-width: 600px) {
  .popup-layout {
    flex-direction: column;
  }
  
  .speech-bubble {
    margin-left: 0;
    margin-top: 15px;
  }
  
  .speech-bubble:before, .speech-bubble:after {
    left: 50%;
    top: -15px;
    transform: translateX(-50%) rotate(90deg);
  }
  
  .speech-bubble:after {
    top: -12px;
  }

}

    </style>
</head>
<body>
    <header>
<div id="date-info" class="date-info"></div>
        <h1>🎯 Vocabulary Builder (2.8)</h1>
    </header>

</div>

    <div class="controls">
    <div class="left-controls">
        


        <button class="text-import-btn" id="text-import-btn">📝 Import Text</button>
    </div>
<button class="english-to-chinese-btn" id="english-to-chinese-btn" disabled>👌 英 --> 中</button>
    <button class="start-btn" id="start-btn" disabled>👍 中 --> 英</button>
    <button class="ai-support-btn" id="ai-support-btn">💡 AI Support</button>
</div>

    <table id="vocabulary-table">
        <thead>
            <tr>
                <th>
                    <div class="tts-speed-control">
                        <label for="tts-speed">Vocabulary</label>
                        <select id="tts-speed">
                            <option value="0.6">0.6x</option>
                            <option value="0.8">0.8x</option>
                            <option value="1">1x</option>                                                       
                        </select>
                    </div>
                </th>
                <th>Translation</th>
                <th>
                    <label>
                        <input type="checkbox" id="select-all"> Select All
                    </label>
                </th>
            </tr>
        </thead>
        <tbody id="vocabulary-body">
            <tr>
                <td colspan="3" class="no-data">Import your vocabulary list to get started</td>
            </tr>
        </tbody>
    </table>

    <!-- Text Import Modal -->
<div id="text-import-modal" class="modal">
    <div class="modal-content">
        <h2>Import Text</h2>
        
        <!-- Button Sets -->
        <div class="preset-buttons">
            <!-- Textbook Buttons -->
            <div class="button-set textbook-buttons">
                <h3>Textbook</h3>
                <button class="preset-btn textbook-btn" data-preset="b2l7">B2 L7</button>
                <button class="preset-btn textbook-btn" data-preset="b2l8">B2 L8</button>
                <button class="preset-btn textbook-btn" data-preset="b2l9">B2 L9</button>
            </div>
            
            <!-- Live Magazine Buttons -->
            <div class="button-set live-buttons">
                <h3>Live Magazine</h3>
                <button class="preset-btn live-btn" data-preset="liveU71">U7 #1</button>
<button class="preset-btn live-btn" data-preset="liveU72">U7 #2</button>
                <button class="preset-btn live-btn" data-preset="liveU141">U14 #1</button>
<button class="preset-btn live-btn" data-preset="liveU142">U14 #2</button>
                <button class="preset-btn live-btn" data-preset="liveU3">U3</button>
<button class="preset-btn live-btn" data-preset="liveU51">U5 #1</button>
                <button class="preset-btn live-btn" data-preset="liveU52">U5 #2</button>
            </div>
            
            <!-- 核心字彙 Buttons -->
            <div class="button-set core-buttons">
                <h3>核心字彙</h3>
                <button class="preset-btn core-btn" data-preset="coreU16">U16</button>
                <button class="preset-btn core-btn" data-preset="coreU17">U17</button>
                <button class="preset-btn core-btn" data-preset="coreU18">U18</button>
            </div>
            
            <!-- Other Button -->
            <div class="button-set other-buttons">
                <h3>Other</h3>
                <button class="preset-btn other-btn" data-preset="other1">other 1</button>
<button class="preset-btn other-btn" data-preset="other2">other 2</button>



            </div>
        </div>
        
        <!-- Text Import Field -->
        <textarea id="text-import-content" placeholder="Enter your vocabulary pairs here..."></textarea>
        
<!-- Action Buttons -->
<div class="button-group">
    <button id="text-import-submit-btn" class="submit-btn">Import</button>
    <button id="text-import-copy-btn" class="copy-btn">Copy</button>
    <button id="text-import-clear-btn" class="hint-btn">Clear</button>
    <button id="text-import-close-btn" class="close-btn">Close</button>
</div>        

    </div>
</div>

<!-- AI Support Modal -->
    <div id="ai-support-modal" class="modal">
        <div class="modal-content">
            <h2>💡 AI Support</h2>
            <div class="ai-support-links">
<a href="https://dictionary.cambridge.org/zht/%E8%A9%9E%E5%85%B8/%E8%8B%B1%E8%AA%9E-%E6%BC%A2%E8%AA%9E-%E7%B9%81%E9%AB%94/" class="ai-support-link" target="_blank">🔍 劍橋中英雙解字典</a>
                                              <a href="https://chatgpt.com/share/67fb4661-ab40-800a-91e1-84af81f0382b" class="ai-support-link" target="_blank">🌟 生成例句+中譯</a>
 <a href="https://chatgpt.com/share/67da57c1-afa4-800a-956f-41b344ca587c" class="ai-support-link" target="_blank">💬 互動問答</a>
                                <a href="https://tobespecified" class="ai-support-link" target="_blank">☕ (未完成)生成故事 / 短文</a>
<a href="https://chatgpt.com/share/67f896d4-e3a4-800a-9169-b0f385820e3e" class="ai-support-link" target="_blank">[Quiz] 填空題 ✏️</a>
<a href="https://chatgpt.com/share/67f7329b-e008-800a-9c06-df50ec1bb977" class="ai-support-link" target="_blank">[Quiz] 中譯英 (入門) 😃 </a>
<a href="https://chatgpt.com/share/67f619dd-d668-800a-af6e-696897e751e7" class="ai-support-link" target="_blank">[Quiz] 中譯英 (學測難度) 😖</a>
<a href="https://tobespecified" class="ai-support-link" target="_blank">(未完成)[Quiz] 閱讀測驗 ⏳</a>
            </div>
            <div class="button-group">
                <button id="ai-support-close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

<!-- English to Chinese Quiz Modal -->
<div id="english-to-chinese-modal" class="modal">
    <div class="modal-content">
        <div class="prompt">Think about how to say this in Chinese and then check the answer.</div>
        
        <div style="font-size: 28px; font-weight: bold; color: var(--primary); margin: 20px 0; display: flex; align-items: center; justify-content: center; gap: 15px;">
            <span id="english-word-display"></span>
            <span class="speaker-icon" id="english-word-speaker" title="Listen" style="cursor: pointer; color: var(--secondary); font-size: 24px;">🔊</span>
        </div>
        
        <div id="chinese-answer-display" class="reveal-answer" style="display: none;"></div>
        <div id="check-question" style="display: none; font-size: 23px; color: var(--accent1); margin-top: 10px;">Did you get it right?</div>
        
        <div style="margin-top: 30px;">
            <button id="check-answer-btn" class="submit-btn" style="width: 100%; margin-bottom: 15px; padding: 15px;">Check Answer</button>
            
            <div class="button-group">
                <button id="english-next-btn" class="next-btn">Next</button>
                <button id="english-close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>
</div>

    <!-- Quiz Modal -->
    <div id="quiz-modal" class="modal">
        <div class="modal-content">
            <div id="prompt" class="prompt">Say "<span id="translation-prompt"></span>" in English.</div>
            <input type="text" id="answer-input" class="answer-input" placeholder="Type your answer here...">
            <div id="feedback" class="feedback"></div>
            <div id="hint-text" class="hint"></div>
            <div id="reveal-answer" class="reveal-answer"></div>
            <div class="button-group">
                <button id="submit-btn" class="submit-btn">Submit</button>
                <button id="speak-btn" class="speak-btn">🎤 Speak</button>
                <button id="hint-btn" class="hint-btn">Hint</button>
                <button id="answer-btn" class="answer-btn">🔑 Answer</button>
                <button id="next-btn" class="next-btn">Next</button>
                <button id="close-btn" class="close-btn">Close</button>
            </div>
        </div>
    </div>

 
    <script>
        // DOM Elements
      
// English to Chinese Quiz Modal Elements
const englishToChineseBtn = document.getElementById('english-to-chinese-btn');
const englishToChineseModal = document.getElementById('english-to-chinese-modal');
const englishWordDisplay = document.getElementById('english-word-display');
const englishWordSpeaker = document.getElementById('english-word-speaker');
const chineseAnswerDisplay = document.getElementById('chinese-answer-display');
const checkQuestion = document.getElementById('check-question');
const checkAnswerBtn = document.getElementById('check-answer-btn');
const englishNextBtn = document.getElementById('english-next-btn');
const englishCloseBtn = document.getElementById('english-close-btn');

        const textImportBtn = document.getElementById('text-import-btn');
     
        const startBtn = document.getElementById('start-btn');
const aiSupportBtn = document.getElementById('ai-support-btn');
        const vocabularyTable = document.getElementById('vocabulary-table');
        const vocabularyBody = document.getElementById('vocabulary-body');
        const selectAllCheckbox = document.getElementById('select-all');
        const quizModal = document.getElementById('quiz-modal');
        const translationPrompt = document.getElementById('translation-prompt');
        const answerInput = document.getElementById('answer-input');
        const feedbackEl = document.getElementById('feedback');
        const hintTextEl = document.getElementById('hint-text');
        const revealAnswerEl = document.getElementById('reveal-answer');
        const submitBtn = document.getElementById('submit-btn');
        const speakBtn = document.getElementById('speak-btn');
        const hintBtn = document.getElementById('hint-btn');
        const answerBtn = document.getElementById('answer-btn');
        const nextBtn = document.getElementById('next-btn');
        const closeBtn = document.getElementById('close-btn');
        const ttsSpeedSelect = document.getElementById('tts-speed');
        
        // Text Import Modal Elements
        const textImportModal = document.getElementById('text-import-modal');
        const textImportContent = document.getElementById('text-import-content');
        const textImportSubmitBtn = document.getElementById('text-import-submit-btn');
        const textImportCloseBtn = document.getElementById('text-import-close-btn');
const textImportClearBtn = document.getElementById('text-import-clear-btn');

// AI Support Modal Elements
        const aiSupportModal = document.getElementById('ai-support-modal');
        const aiSupportCloseBtn = document.getElementById('ai-support-close-btn');

        // Variables
        let vocabularyData = [];
        let currentQuizWords = [];
        let currentWordIndex = -1;
        let currentWord = null;
        let recognition = null;
        let speechRate = 0.6;

let currentEnglishQuizWords = [];
let currentEnglishWordIndex = -1;
let currentEnglishWord = null;

        // Initialize Speech Recognition
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US';
            recognition.continuous = false;
            recognition.interimResults = false;

            recognition.onresult = function(event) {
                const transcript = event.results[0][0].transcript.toLowerCase().trim();
                answerInput.value = transcript;
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onend = function() {
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };

            recognition.onerror = function(event) {
                console.error('Speech recognition error', event.error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            };
        }

        // Text-to-Speech function
        function speak(text) {
            if ('speechSynthesis' in window) {
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'en-US';
                utterance.rate = speechRate;
                speechSynthesis.speak(utterance);
            }
        }

        // TTS Speed change handler
        ttsSpeedSelect.addEventListener('change', (e) => {
            speechRate = parseFloat(e.target.value);
        });

// AI Support button click handler
        aiSupportBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'flex';
        });

        // AI Support Close button click handler
        aiSupportCloseBtn.addEventListener('click', () => {
            aiSupportModal.style.display = 'none';
        });

        // Text Import button click handler
        textImportBtn.addEventListener('click', () => {
            textImportModal.style.display = 'flex';
        });

        // Text Import Close button click handler
        textImportCloseBtn.addEventListener('click', () => {
            textImportModal.style.display = 'none';
        });

// Preset vocabulary data
const presetVocabulary = {

    b2l7: `
◎First Half (#1-#12)
seek (v)	=尋求、尋找
audience (n)	=觀眾、聽眾
series (n)	=系列
technology =(n)	科技
worth (adj)	=1.價值…的($) 	2.值得…的
found (v)	=創立、建立
conference (n)	=會議、研討會
increase (v)	=增加、提升(v)
organize (v)	=1.組織、籌辦 　2.整理、安排
broad (adj)	=1.寬的　2.廣泛的
range (n)	=1.種類、系列 　2.範圍

◎Second Half (#13-#21)
field (n)	=1.田野　2.領域
philosophy =(n)	哲學
launch (v) = 	1.發射(飛彈等)	　2.推出(產品等)	　3.發起(活動等)
collect (v)	=收集
numerous (adj)	=許多的(＝many)
celebrity (n)	=名人
fascinate (v)	=使著迷
fiction (n)	=小說、虛構故事
discuss (v)	=討論(v)
method (n)	=方法
◎片語(Phrases & Idioms)
as well as...	=以及…
for free	=免費
at present	=目前
give something a try	=嘗試某事
broaden your horizons	=拓展視野

◎詞類變化(different parts of speech)
technological (adj)	=技術的
worth (n)	=價值(＝value)
a worthy winner	= 實至名歸的贏家
	The scientist if worthy of respect. = 這位科學家值得尊敬(＝The scientist deserves to be respected.)
foundation (n)	=1.建立　2.基金會
increase (n)	=增加(n)
increasingly (+ Adj) =越來越...(+ Adj.)
organizer (n)	=主辦人
organization (n)	=組織、機構
broaden (v)	=擴展
range from A to B	=範圍涵蓋A到B
collection (n)	=收藏品
fascination (n)	=著迷(n)
discussion (n)	=討論(n)
`,

    b2l8: `


`,

    b2l9: `


`,

    liveU71: `

`,

liveU72: `


`,

    liveU141: `

`,

liveU142: `


`,


    liveU3: `

`,

 liveU51: `


`,

    liveU52: `


`,

    coreU16: `
核心單U16
`,

    coreU17: `
`,

    coreU18: `
`,

    other1: `


`,
other2: `

`

};







// Add event listeners to all preset buttons
document.querySelectorAll('.preset-btn').forEach(button => {
    button.addEventListener('click', () => {
        const presetKey = button.dataset.preset;
        if (presetVocabulary[presetKey]) {
            textImportContent.value = presetVocabulary[presetKey];
        }
    });
});

        // Text Import Submit button click handler
        textImportSubmitBtn.addEventListener('click', () => {
            const text = textImportContent.value.trim();
            if (!text) {
                alert('Please enter vocabulary pairs before importing.');
                return;
            }
            
            processTextImport(text);
            textImportModal.style.display = 'none';
        });

// Text Import Clear button click handler
textImportClearBtn.addEventListener('click', () => {
    textImportContent.value = '';
});

        
function processTextImport(text) {
    vocabularyData = [];
    const lines = text.split('\n');
    
    let currentSection = "Default";
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;
        
        // Check if this is a section header
        if (line.includes('◎') || line.includes('=...') || line.startsWith('#')) {
            currentSection = line.replace('◎', '').replace('=...', '').replace('#', '').trim();
            continue;
        }
        
        const parts = line.split('=');
        if (parts.length < 2) continue;
        
        const vocabulary = parts[0].trim();
        const translation = parts[1].trim();
        
        if (vocabulary && translation) {
            vocabularyData.push({
                vocabulary: vocabulary,
                translation: translation,
                selected: true,
                section: currentSection
            });
        }
    }
    
    renderVocabularyTable();
    if (vocabularyData.length > 0) {
        startBtn.disabled = false;
englishToChineseBtn.disabled = false;
    }
}

      
// Copy button click handler
const textImportCopyBtn = document.getElementById('text-import-copy-btn');

textImportCopyBtn.addEventListener('click', () => {
    const textToCopy = textImportContent.value;
    if (!textToCopy) {
        alert('No text to copy.');
        return;
    }
    
    // Copy text to clipboard
    navigator.clipboard.writeText(textToCopy)
        .then(() => {
            // Provide visual feedback
            const originalText = textImportCopyBtn.textContent;
            textImportCopyBtn.textContent = 'Copied!';
            
            // Revert button text after a short delay
            setTimeout(() => {
                textImportCopyBtn.textContent = originalText;
            }, 1500);
        })
        .catch(err => {
            console.error('Failed to copy text: ', err);
            alert('Failed to copy text. Please try again.');
        });
});
       

        function renderVocabularyTable() {
    if (vocabularyData.length === 0) {
        vocabularyBody.innerHTML = '<tr><td colspan="3" class="no-data">Import your vocabulary list to get started</td></tr>';
        return;
    }
    
    vocabularyBody.innerHTML = '';
    
    // Group items by section
    const sectionMap = {};
    vocabularyData.forEach(item => {
        if (!sectionMap[item.section]) {
            sectionMap[item.section] = [];
        }
        sectionMap[item.section].push(item);
    });
    
    // Render each section
    Object.keys(sectionMap).forEach(sectionName => {
        const sectionItems = sectionMap[sectionName];
        
        // Add section header row
        const sectionRow = document.createElement('tr');
        sectionRow.className = 'section-header';
        
        const sectionCell = document.createElement('td');
        sectionCell.colSpan = 2;
        sectionCell.textContent = sectionName;
        sectionCell.style.fontWeight = 'bold';
        sectionCell.style.backgroundColor = 'var(--dark)';
        sectionCell.style.color = 'var(--light)';
        sectionCell.style.padding = '10px 15px';
        
        const sectionCheckCell = document.createElement('td');
        const sectionCheckbox = document.createElement('input');
        sectionCheckbox.type = 'checkbox';
        sectionCheckbox.checked = sectionItems.every(item => item.selected);
        sectionCheckbox.dataset.section = sectionName;
        sectionCheckbox.addEventListener('change', (e) => {
            const isChecked = e.target.checked;
            const section = e.target.dataset.section;
            
            // Update all items in this section
            vocabularyData.forEach((item, index) => {
                if (item.section === section) {
                    item.selected = isChecked;
                    // Also update the displayed checkboxes
                    const checkbox = document.querySelector(`input[data-index="${index}"]`);
                    if (checkbox) checkbox.checked = isChecked;
                }
            });
            
            updateSelectAllCheckbox();
        });
        
        sectionCheckCell.appendChild(sectionCheckbox);
        sectionRow.appendChild(sectionCell);
        sectionRow.appendChild(sectionCheckCell);
        vocabularyBody.appendChild(sectionRow);
        
        // Add vocabulary items for this section
        sectionItems.forEach((item, localIndex) => {
            const index = vocabularyData.findIndex(vItem => 
                vItem.vocabulary === item.vocabulary && 
                vItem.translation === item.translation);
            
            const row = document.createElement('tr');
            
            // Vocabulary column with speaker
            const wordCell = document.createElement('td');
            const cleanWord = item.vocabulary.replace(/\(.*\)/g, '').trim();
            
            wordCell.innerHTML = `
                ${item.vocabulary}
                <span class="speaker-icon" title="Listen" data-word="${cleanWord}">🔊</span>
            `;
            
            // Translation column
            const translationCell = document.createElement('td');
            translationCell.textContent = item.translation;
            
            // Checkbox column
            const checkboxCell = document.createElement('td');
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.checked = item.selected;
            checkbox.dataset.index = index;
            checkbox.dataset.section = item.section;
            checkbox.addEventListener('change', (e) => {
                vocabularyData[index].selected = e.target.checked;
                updateSectionCheckbox(item.section);
                updateSelectAllCheckbox();
            });
            checkboxCell.appendChild(checkbox);
            
            row.appendChild(wordCell);
            row.appendChild(translationCell);
            row.appendChild(checkboxCell);
            vocabularyBody.appendChild(row);
        });
    });
    
    // Add event listeners to speaker icons
    document.querySelectorAll('.speaker-icon').forEach(icon => {
        icon.addEventListener('click', (e) => {
            const word = e.target.dataset.word;
            speak(word);
        });
    });
    
    updateSelectAllCheckbox();
}


function updateSectionCheckbox(sectionName) {
    const sectionItems = vocabularyData.filter(item => item.section === sectionName);
    const allSelected = sectionItems.every(item => item.selected);
    const noneSelected = sectionItems.every(item => !item.selected);
    
    const sectionCheckbox = document.querySelector(`input[data-section="${sectionName}"]`);
    if (sectionCheckbox) {
        sectionCheckbox.checked = allSelected;
        sectionCheckbox.indeterminate = !allSelected && !noneSelected;
    }
}








        // modify the Update "Select All" checkbox state
        
function updateSelectAllCheckbox() {
    if (vocabularyData.length === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
        return;
    }
    
    const selectedCount = vocabularyData.filter(item => item.selected).length;
    
    if (selectedCount === 0) {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = false;
    } else if (selectedCount === vocabularyData.length) {
        selectAllCheckbox.checked = true;
        selectAllCheckbox.indeterminate = false;
    } else {
        selectAllCheckbox.checked = false;
        selectAllCheckbox.indeterminate = true;
    }
}

//Update the global "Select All" checkbox handler
       selectAllCheckbox.addEventListener('change', (e) => {
    const isChecked = e.target.checked;
    
    vocabularyData.forEach(item => {
        item.selected = isChecked;
    });
    
    document.querySelectorAll('#vocabulary-body input[type="checkbox"]').forEach(checkbox => {
        checkbox.checked = isChecked;
        if (checkbox.dataset.section) {
            checkbox.indeterminate = false;
        }
    });
});

// English to Chinese Quiz button handler
englishToChineseBtn.addEventListener('click', () => {
    currentEnglishQuizWords = vocabularyData.filter(item => item.selected);
    if (currentEnglishQuizWords.length === 0) {
        alert('Please select at least one vocabulary word to start the quiz.');
        return;
    }
    startEnglishToChineseQuiz();
});

// English to Chinese Quiz Modal event listeners
checkAnswerBtn.addEventListener('click', showChineseAnswer);
englishNextBtn.addEventListener('click', nextEnglishQuestion);
englishCloseBtn.addEventListener('click', () => {
    englishToChineseModal.style.display = 'none';
});

englishWordSpeaker.addEventListener('click', () => {
    if (currentEnglishWord) {
        const cleanWord = currentEnglishWord.vocabulary.replace(/\(.*?\)/g, '').trim();
        speak(cleanWord);
    }
});

        // Start Quiz button handler
        startBtn.addEventListener('click', () => {
            currentQuizWords = vocabularyData.filter(item => item.selected);
            
            if (currentQuizWords.length === 0) {
                alert('Please select at least one vocabulary word to start the quiz.');
                return;
            }
            
            startQuiz();
        });

        // Start the quiz
        function startQuiz() {
            resetQuiz();
            quizModal.style.display = 'flex';
            nextQuestion();
        }

        // Reset quiz state
        function resetQuiz() {
            currentWordIndex = -1;
            currentWord = null;
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
        }

        // Load the next question
        function nextQuestion() {
            // Reset UI elements
            answerInput.value = '';
            feedbackEl.textContent = '';
            feedbackEl.className = 'feedback';
            hintTextEl.textContent = '';
            revealAnswerEl.textContent = '';
            
            // Randomly select next word
            const previousIndex = currentWordIndex;
            
            // If only one word, just use it
            if (currentQuizWords.length === 1) {
                currentWordIndex = 0;
            } else {
                // Make sure we don't get the same word twice in a row
                do {
                    currentWordIndex = Math.floor(Math.random() * currentQuizWords.length);
                } while (currentWordIndex === previousIndex && currentQuizWords.length > 1);
            }
            
            currentWord = currentQuizWords[currentWordIndex];
            translationPrompt.textContent = currentWord.translation;
        }

        // Submit answer
        function submitAnswer() {
    if (!currentWord) return;
    
    const userAnswer = answerInput.value.trim().toLowerCase();
    // Split the vocabulary by slash and clean each option
    const correctAnswers = currentWord.vocabulary
        .split('/')
        .map(ans => ans.replace(/\(.*?\)/g, '').trim().toLowerCase());
    
    // Normalize user answer (remove punctuation)
    const normalizedUserAnswer = userAnswer.replace(/[.,?'’…\/#!$%\^&\*;:{}=\-_`~()]/g, "");
    
    // Check if user's answer matches any of the correct options
    const isCorrect = correctAnswers.some(answer => {
        const normalizedAnswer = answer.replace(/[.,?'’…\/#!$%\^&\*;:{}=\-_`~()]/g, "");
        return normalizedUserAnswer === normalizedAnswer;
    });
    
    if (isCorrect) {
        feedbackEl.textContent = 'Well done! 🏆😊👍';
        feedbackEl.className = 'feedback correct';
        speak('Well done!');
    } else {
        feedbackEl.textContent = 'Try again! 🔥🔥🔥';
        feedbackEl.className = 'feedback incorrect';
        speak('Try again!');
    }
}

        // Show hint
        function showHint() {
            if (!currentWord) return;
            
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            const firstLetter = correctAnswer.charAt(0).toUpperCase();
            
            hintTextEl.textContent = `The answer starts with the letter ${firstLetter}.`;
        }

        // Show answer
        function showAnswer() {
            if (!currentWord) return;
            
            const correctAnswer = currentWord.vocabulary.replace(/\(.*?\)/g, '').trim();
            revealAnswerEl.textContent = `${correctAnswer}`;
            speak(correctAnswer);
        }

        // Event Listeners for Quiz Modal
        submitBtn.addEventListener('click', submitAnswer);
        
        answerInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                submitAnswer();
            }
        });
        
        speakBtn.addEventListener('click', () => {
            if (!recognition) {
                alert('Speech recognition is not supported in your browser.');
                return;
            }
            
            try {
                if (speakBtn.textContent === '🎤 Speak') {
                    recognition.start();
                    speakBtn.textContent = 'Recording';
                    speakBtn.classList.add('recording');
                } else {
                    recognition.stop();
                    speakBtn.textContent = '🎤 Speak';
                    speakBtn.classList.remove('recording');
                }
            } catch (error) {
                console.error('Speech recognition error:', error);
                speakBtn.textContent = '🎤 Speak';
                speakBtn.classList.remove('recording');
            }
        });
        
        hintBtn.addEventListener('click', showHint);
        
        answerBtn.addEventListener('click', showAnswer);
        
        nextBtn.addEventListener('click', nextQuestion);
        
        closeBtn.addEventListener('click', () => {
            quizModal.style.display = 'none';
            if (recognition) {
                recognition.stop();
            }
        });

// Start English to Chinese Quiz
function startEnglishToChineseQuiz() {
    resetEnglishToChineseQuiz();
    englishToChineseModal.style.display = 'flex';
    nextEnglishQuestion();
}

// Reset English to Chinese quiz state
function resetEnglishToChineseQuiz() {
    currentEnglishWordIndex = -1;
    currentEnglishWord = null;
    chineseAnswerDisplay.style.display = 'none';
    checkQuestion.style.display = 'none';
    checkAnswerBtn.style.display = 'block';
}

// Load next English question
function nextEnglishQuestion() {
    // Reset UI elements
    chineseAnswerDisplay.style.display = 'none';
    checkQuestion.style.display = 'none';
    checkAnswerBtn.style.display = 'block';
    
    // Randomly select next word
    const previousIndex = currentEnglishWordIndex;
    
    if (currentEnglishQuizWords.length === 1) {
        currentEnglishWordIndex = 0;
    } else {
        do {
            currentEnglishWordIndex = Math.floor(Math.random() * currentEnglishQuizWords.length);
        } while (currentEnglishWordIndex === previousIndex && currentEnglishQuizWords.length > 1);
    }
    
    currentEnglishWord = currentEnglishQuizWords[currentEnglishWordIndex];
    const cleanWord = currentEnglishWord.vocabulary.replace(/\(.*?\)/g, '').trim();
    englishWordDisplay.textContent = cleanWord;
}

// Show Chinese answer
function showChineseAnswer() {
    if (!currentEnglishWord) return;
    
    chineseAnswerDisplay.textContent = currentEnglishWord.translation;
    chineseAnswerDisplay.style.display = 'block';
    checkQuestion.style.display = 'block';
    checkAnswerBtn.style.display = 'none';
}


// Date information display
function updateDateInfo() {
    const dateInfoEl = document.getElementById('date-info');
    
    // Get current date in Taiwan timezone
    const options = { 
        timeZone: 'Asia/Taipei',
        weekday: 'long', 
        month: 'long', 
        day: 'numeric', 
        year: 'numeric'
    };
    const today = new Date();
    const taiwanDate = today.toLocaleDateString('en-US', options);
    
    // Calculate days until 段考
    const examDate = new Date('June 25, 2025');
    examDate.setHours(0, 0, 0, 0);
    const todayNoTime = new Date(today);
    todayNoTime.setHours(0, 0, 0, 0);
    const daysUntilExam = Math.ceil((examDate - todayNoTime) / (1000 * 60 * 60 * 24));
    
    // Calculate days until 115年學測
    const collegeExamDate = new Date('January 16, 2026');
    collegeExamDate.setHours(0, 0, 0, 0);
    const daysUntilCollegeExam = Math.ceil((collegeExamDate - todayNoTime) / (1000 * 60 * 60 * 24));
    
    // Update the HTML - each item on separate line
    dateInfoEl.innerHTML = `
        <span><span class="emoji">📅</span>${taiwanDate}</span><br>
        <span><span class="emoji">⏰</span><span class="countdown">${daysUntilExam}</span> days until 段考</span>
        <span><span class="emoji">📚</span><span class="countdown">${daysUntilCollegeExam}</span> days until 115年學測</span>
    `;
}


// Update date information when page loads
updateDateInfo();

// Update date information every minute
setInterval(updateDateInfo, 60000);

    </script>

<footer class="visitor-counter">
    <div id="visitor-count">👥 Loading visitor count...</div>
</footer>

<div id="refresh-reminder-popup" class="popup-container">
  <div class="popup-content">
    <div class="popup-layout">
      <div class="pikachu-image">
        <img src="dodoro_transparent.png" alt="Image Not Found" width="150">
      </div>
      <div class="speech-bubble">
        
<p class="english-text">1.每次使用請點擊「重新整理(refresh)🔄」以獲取更新！</p>
       
        <p class="chinese-text">2.若手機上的🔊無法運作，表示「文字轉語音」功能經過更新，重開機即可解決。</p>

        <p class="chinese-text">3.本網頁較適合Android系統的手機，某些iPhone會有🔊異常問題，未來會設法解決。</p>

      </div>
    </div>
    <button id="close-reminder-btn" class="close-reminder-btn">OK. I got it.</button>

  </div>
</div>

<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>

<!-- Add this to the end of your existing <script> section -->
<script>
    // Firebase visitor counter
    function initVisitorCounter() {
        // Your Firebase configuration - REPLACE WITH YOUR ACTUAL VALUES
        const firebaseConfig = {
            apiKey: "AIzaSyBFhmaAZmBtsM5DKoxgy1G-RouRKsrjYsA",
            authDomain: "vocab-builder-visitor-counter.firebaseapp.co",
            databaseURL: "https://vocab-builder-visitor-counter-default-rtdb.asia-southeast1.firebasedatabase.app/",
            projectId: "vocab-builder-visitor-counter",
            storageBucket: "vocab-builder-visitor-counter.firebasestorage.app",
            messagingSenderId: "648587683861",
            appId: "1:648587683861:web:dcb777160dabb4cbf8c61c"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        // Get today's date in YYYY-MM-DD format in Taiwan timezone
        const today = new Date();
        const taiwanDate = new Date(today.toLocaleString('en-US', { timeZone: 'Asia/Taipei' }));
        const dateStr = taiwanDate.getFullYear() + '-' + 
                       (taiwanDate.getMonth() + 1).toString().padStart(2, '0') + '-' + 
                       taiwanDate.getDate().toString().padStart(2, '0');

        // Reference to today's visitor count
        const visitorCountRef = database.ref('visitorCount/' + dateStr);

        // Function to update visitor display
        function updateVisitorDisplay(count) {
            const visitorCountEl = document.getElementById('visitor-count');
            if (count === 1) {
                visitorCountEl.innerHTML = `👋  ${count} person has visited this website today.`;
            } else {
                visitorCountEl.innerHTML = `👋  ${count} people have visited this website today.`;
            }
        }

        // Check if this browser has already been counted today
        const hasVisitedToday = localStorage.getItem('visited_' + dateStr);
        
        if (!hasVisitedToday) {
            // Increment the count using a transaction
            visitorCountRef.transaction((currentCount) => {
                return (currentCount || 0) + 1;
            }, (error, committed, snapshot) => {
                if (error) {
                    console.error('Transaction failed:', error);
                } else if (committed) {
                    // Mark this browser as counted for today
                    localStorage.setItem('visited_' + dateStr, 'true');
                    updateVisitorDisplay(snapshot.val());
                }
            });
        } else {
            // Just get the current count without incrementing
            visitorCountRef.once('value', (snapshot) => {
                const count = snapshot.val() || 0;
                updateVisitorDisplay(count);
            });
        }

        // Listen for count changes
        visitorCountRef.on('value', (snapshot) => {
            const count = snapshot.val() || 0;
            updateVisitorDisplay(count);
        });
    }

    // Call the function to initialize the visitor counter
    try {
        initVisitorCounter();
    } catch (e) {
        console.error("Error initializing visitor counter:", e);
        document.getElementById('visitor-count').innerHTML = "😅 Visitor count unavailable";
    }

// Refresh Reminder Popup functionality
document.addEventListener('DOMContentLoaded', () => {
  // Show the popup when the page loads
  const refreshReminderPopup = document.getElementById('refresh-reminder-popup');
  
  // Show popup after a slight delay for better user experience
  setTimeout(() => {
    refreshReminderPopup.style.display = 'flex';
  }, 1000);
  
  // Add event listener to close button
  const closeReminderBtn = document.getElementById('close-reminder-btn');
  closeReminderBtn.addEventListener('click', () => {
    refreshReminderPopup.style.display = 'none';
  });
});

</script>


</body>
</html>

